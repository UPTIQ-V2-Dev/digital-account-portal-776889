
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  currentStep: 'currentStep',
  accountType: 'accountType',
  customerType: 'customerType',
  applicantId: 'applicantId',
  submittedAt: 'submittedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  sessionId: 'sessionId',
  startedAt: 'startedAt',
  lastActivity: 'lastActivity',
  source: 'source',
  userId: 'userId'
};

exports.Prisma.PersonalInfoScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  suffix: 'suffix',
  dateOfBirth: 'dateOfBirth',
  ssn: 'ssn',
  phone: 'phone',
  email: 'email',
  employmentStatus: 'employmentStatus',
  occupation: 'occupation',
  employer: 'employer',
  workPhone: 'workPhone',
  mailingStreet: 'mailingStreet',
  mailingCity: 'mailingCity',
  mailingState: 'mailingState',
  mailingZipCode: 'mailingZipCode',
  mailingCountry: 'mailingCountry',
  mailingApartment: 'mailingApartment',
  physicalStreet: 'physicalStreet',
  physicalCity: 'physicalCity',
  physicalState: 'physicalState',
  physicalZipCode: 'physicalZipCode',
  physicalCountry: 'physicalCountry',
  physicalApartment: 'physicalApartment',
  applicationId: 'applicationId'
};

exports.Prisma.BusinessProfileScalarFieldEnum = {
  id: 'id',
  businessName: 'businessName',
  dbaName: 'dbaName',
  ein: 'ein',
  entityType: 'entityType',
  industryType: 'industryType',
  dateEstablished: 'dateEstablished',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  website: 'website',
  description: 'description',
  isCashIntensive: 'isCashIntensive',
  monthlyTransactionVolume: 'monthlyTransactionVolume',
  monthlyTransactionCount: 'monthlyTransactionCount',
  expectedBalance: 'expectedBalance',
  businessStreet: 'businessStreet',
  businessCity: 'businessCity',
  businessState: 'businessState',
  businessZipCode: 'businessZipCode',
  businessCountry: 'businessCountry',
  businessApartment: 'businessApartment',
  mailingStreet: 'mailingStreet',
  mailingCity: 'mailingCity',
  mailingState: 'mailingState',
  mailingZipCode: 'mailingZipCode',
  mailingCountry: 'mailingCountry',
  mailingApartment: 'mailingApartment',
  applicationId: 'applicationId'
};

exports.Prisma.FinancialProfileScalarFieldEnum = {
  id: 'id',
  annualIncome: 'annualIncome',
  incomeSource: 'incomeSource',
  employmentInfo: 'employmentInfo',
  assets: 'assets',
  liabilities: 'liabilities',
  applicationId: 'applicationId'
};

exports.Prisma.BankingRelationshipScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  accountTypes: 'accountTypes',
  yearsWithBank: 'yearsWithBank',
  financialProfileId: 'financialProfileId'
};

exports.Prisma.AccountActivityScalarFieldEnum = {
  id: 'id',
  activity: 'activity',
  frequency: 'frequency',
  amount: 'amount',
  financialProfileId: 'financialProfileId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  features: 'features',
  minimumBalance: 'minimumBalance',
  monthlyFee: 'monthlyFee',
  interestRate: 'interestRate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EligibilityRuleScalarFieldEnum = {
  id: 'id',
  field: 'field',
  operator: 'operator',
  value: 'value',
  description: 'description',
  productId: 'productId'
};

exports.Prisma.ProductSelectionScalarFieldEnum = {
  id: 'id',
  selectedFeatures: 'selectedFeatures',
  initialDeposit: 'initialDeposit',
  applicationId: 'applicationId',
  productId: 'productId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt',
  verificationStatus: 'verificationStatus',
  verificationProvider: 'verificationProvider',
  verificationConfidence: 'verificationConfidence',
  extractedData: 'extractedData',
  verificationId: 'verificationId',
  verifiedAt: 'verifiedAt',
  signerId: 'signerId',
  applicationId: 'applicationId'
};

exports.Prisma.KYCVerificationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  provider: 'provider',
  verificationId: 'verificationId',
  confidence: 'confidence',
  verifiedAt: 'verifiedAt',
  identityPassed: 'identityPassed',
  identityConfidence: 'identityConfidence',
  addressPassed: 'addressPassed',
  addressConfidence: 'addressConfidence',
  phonePassed: 'phonePassed',
  phoneConfidence: 'phoneConfidence',
  emailPassed: 'emailPassed',
  emailConfidence: 'emailConfidence',
  ofacPassed: 'ofacPassed',
  ofacMatches: 'ofacMatches',
  applicationId: 'applicationId'
};

exports.Prisma.AdditionalSignerScalarFieldEnum = {
  id: 'id',
  role: 'role',
  relationshipToBusiness: 'relationshipToBusiness',
  beneficialOwnershipPercentage: 'beneficialOwnershipPercentage',
  hasSigningAuthority: 'hasSigningAuthority',
  kycStatus: 'kycStatus',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  ssn: 'ssn',
  phone: 'phone',
  email: 'email',
  applicationId: 'applicationId'
};

exports.Prisma.RiskAssessmentScalarFieldEnum = {
  id: 'id',
  overallRisk: 'overallRisk',
  riskScore: 'riskScore',
  recommendations: 'recommendations',
  requiresManualReview: 'requiresManualReview',
  assessedAt: 'assessedAt',
  assessedBy: 'assessedBy',
  applicationId: 'applicationId'
};

exports.Prisma.RiskFactorScalarFieldEnum = {
  id: 'id',
  category: 'category',
  factor: 'factor',
  weight: 'weight',
  score: 'score',
  impact: 'impact',
  description: 'description',
  riskAssessmentId: 'riskAssessmentId'
};

exports.Prisma.DisclosureScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  content: 'content',
  version: 'version',
  effectiveDate: 'effectiveDate',
  required: 'required',
  applicableFor: 'applicableFor'
};

exports.Prisma.AgreementScalarFieldEnum = {
  id: 'id',
  acknowledged: 'acknowledged',
  acknowledgedAt: 'acknowledgedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  applicationId: 'applicationId',
  disclosureId: 'disclosureId'
};

exports.Prisma.ElectronicSignatureScalarFieldEnum = {
  id: 'id',
  signerId: 'signerId',
  documentType: 'documentType',
  signatureData: 'signatureData',
  signedAt: 'signedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  biometric: 'biometric',
  applicationId: 'applicationId'
};

exports.Prisma.FundingSetupScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  status: 'status',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  routingNumber: 'routingNumber',
  accountType: 'accountType',
  plaidAccountId: 'plaidAccountId',
  wireInstructions: 'wireInstructions',
  createdAt: 'createdAt',
  processedAt: 'processedAt',
  applicationId: 'applicationId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.TokenType = exports.$Enums.TokenType = {
  ACCESS: 'ACCESS',
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

exports.ProductType = exports.$Enums.ProductType = {
  CHECKING: 'CHECKING',
  SAVINGS: 'SAVINGS',
  MONEY_MARKET: 'MONEY_MARKET',
  CERTIFICATE_DEPOSIT: 'CERTIFICATE_DEPOSIT',
  CREDIT_CARD: 'CREDIT_CARD',
  LOAN: 'LOAN',
  MORTGAGE: 'MORTGAGE',
  INVESTMENT: 'INVESTMENT',
  RETIREMENT: 'RETIREMENT'
};

exports.EligibilityOperator = exports.$Enums.EligibilityOperator = {
  GREATER_THAN_OR_EQUAL: 'GREATER_THAN_OR_EQUAL',
  LESS_THAN_OR_EQUAL: 'LESS_THAN_OR_EQUAL',
  EQUAL: 'EQUAL',
  NOT_EQUAL: 'NOT_EQUAL',
  IN: 'IN',
  NOT_IN: 'NOT_IN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  Application: 'Application',
  PersonalInfo: 'PersonalInfo',
  BusinessProfile: 'BusinessProfile',
  FinancialProfile: 'FinancialProfile',
  BankingRelationship: 'BankingRelationship',
  AccountActivity: 'AccountActivity',
  Product: 'Product',
  EligibilityRule: 'EligibilityRule',
  ProductSelection: 'ProductSelection',
  Document: 'Document',
  KYCVerification: 'KYCVerification',
  AdditionalSigner: 'AdditionalSigner',
  RiskAssessment: 'RiskAssessment',
  RiskFactor: 'RiskFactor',
  Disclosure: 'Disclosure',
  Agreement: 'Agreement',
  ElectronicSignature: 'ElectronicSignature',
  FundingSetup: 'FundingSetup'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
