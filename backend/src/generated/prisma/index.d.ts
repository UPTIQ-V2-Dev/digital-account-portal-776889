
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model PersonalInfo
 * 
 */
export type PersonalInfo = $Result.DefaultSelection<Prisma.$PersonalInfoPayload>
/**
 * Model BusinessProfile
 * 
 */
export type BusinessProfile = $Result.DefaultSelection<Prisma.$BusinessProfilePayload>
/**
 * Model FinancialProfile
 * 
 */
export type FinancialProfile = $Result.DefaultSelection<Prisma.$FinancialProfilePayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductSelection
 * 
 */
export type ProductSelection = $Result.DefaultSelection<Prisma.$ProductSelectionPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model KYCVerification
 * 
 */
export type KYCVerification = $Result.DefaultSelection<Prisma.$KYCVerificationPayload>
/**
 * Model AdditionalSigner
 * 
 */
export type AdditionalSigner = $Result.DefaultSelection<Prisma.$AdditionalSignerPayload>
/**
 * Model RiskAssessment
 * 
 */
export type RiskAssessment = $Result.DefaultSelection<Prisma.$RiskAssessmentPayload>
/**
 * Model Disclosure
 * 
 */
export type Disclosure = $Result.DefaultSelection<Prisma.$DisclosurePayload>
/**
 * Model Agreement
 * 
 */
export type Agreement = $Result.DefaultSelection<Prisma.$AgreementPayload>
/**
 * Model ElectronicSignature
 * 
 */
export type ElectronicSignature = $Result.DefaultSelection<Prisma.$ElectronicSignaturePayload>
/**
 * Model FundingSetup
 * 
 */
export type FundingSetup = $Result.DefaultSelection<Prisma.$FundingSetupPayload>
/**
 * Model AuditTrailEntry
 * 
 */
export type AuditTrailEntry = $Result.DefaultSelection<Prisma.$AuditTrailEntryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TokenType: {
  ACCESS: 'ACCESS',
  REFRESH: 'REFRESH',
  RESET_PASSWORD: 'RESET_PASSWORD',
  VERIFY_EMAIL: 'VERIFY_EMAIL'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personalInfo`: Exposes CRUD operations for the **PersonalInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalInfos
    * const personalInfos = await prisma.personalInfo.findMany()
    * ```
    */
  get personalInfo(): Prisma.PersonalInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessProfile`: Exposes CRUD operations for the **BusinessProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessProfiles
    * const businessProfiles = await prisma.businessProfile.findMany()
    * ```
    */
  get businessProfile(): Prisma.BusinessProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialProfile`: Exposes CRUD operations for the **FinancialProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialProfiles
    * const financialProfiles = await prisma.financialProfile.findMany()
    * ```
    */
  get financialProfile(): Prisma.FinancialProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productSelection`: Exposes CRUD operations for the **ProductSelection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSelections
    * const productSelections = await prisma.productSelection.findMany()
    * ```
    */
  get productSelection(): Prisma.ProductSelectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kYCVerification`: Exposes CRUD operations for the **KYCVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KYCVerifications
    * const kYCVerifications = await prisma.kYCVerification.findMany()
    * ```
    */
  get kYCVerification(): Prisma.KYCVerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.additionalSigner`: Exposes CRUD operations for the **AdditionalSigner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdditionalSigners
    * const additionalSigners = await prisma.additionalSigner.findMany()
    * ```
    */
  get additionalSigner(): Prisma.AdditionalSignerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.riskAssessment`: Exposes CRUD operations for the **RiskAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RiskAssessments
    * const riskAssessments = await prisma.riskAssessment.findMany()
    * ```
    */
  get riskAssessment(): Prisma.RiskAssessmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.disclosure`: Exposes CRUD operations for the **Disclosure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disclosures
    * const disclosures = await prisma.disclosure.findMany()
    * ```
    */
  get disclosure(): Prisma.DisclosureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agreement`: Exposes CRUD operations for the **Agreement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agreements
    * const agreements = await prisma.agreement.findMany()
    * ```
    */
  get agreement(): Prisma.AgreementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.electronicSignature`: Exposes CRUD operations for the **ElectronicSignature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ElectronicSignatures
    * const electronicSignatures = await prisma.electronicSignature.findMany()
    * ```
    */
  get electronicSignature(): Prisma.ElectronicSignatureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fundingSetup`: Exposes CRUD operations for the **FundingSetup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FundingSetups
    * const fundingSetups = await prisma.fundingSetup.findMany()
    * ```
    */
  get fundingSetup(): Prisma.FundingSetupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditTrailEntry`: Exposes CRUD operations for the **AuditTrailEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditTrailEntries
    * const auditTrailEntries = await prisma.auditTrailEntry.findMany()
    * ```
    */
  get auditTrailEntry(): Prisma.AuditTrailEntryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Token: 'Token',
    Application: 'Application',
    PersonalInfo: 'PersonalInfo',
    BusinessProfile: 'BusinessProfile',
    FinancialProfile: 'FinancialProfile',
    Product: 'Product',
    ProductSelection: 'ProductSelection',
    Document: 'Document',
    KYCVerification: 'KYCVerification',
    AdditionalSigner: 'AdditionalSigner',
    RiskAssessment: 'RiskAssessment',
    Disclosure: 'Disclosure',
    Agreement: 'Agreement',
    ElectronicSignature: 'ElectronicSignature',
    FundingSetup: 'FundingSetup',
    AuditTrailEntry: 'AuditTrailEntry'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "token" | "application" | "personalInfo" | "businessProfile" | "financialProfile" | "product" | "productSelection" | "document" | "kYCVerification" | "additionalSigner" | "riskAssessment" | "disclosure" | "agreement" | "electronicSignature" | "fundingSetup" | "auditTrailEntry"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      PersonalInfo: {
        payload: Prisma.$PersonalInfoPayload<ExtArgs>
        fields: Prisma.PersonalInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          findFirst: {
            args: Prisma.PersonalInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          findMany: {
            args: Prisma.PersonalInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          create: {
            args: Prisma.PersonalInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          createMany: {
            args: Prisma.PersonalInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          delete: {
            args: Prisma.PersonalInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          update: {
            args: Prisma.PersonalInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          deleteMany: {
            args: Prisma.PersonalInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonalInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          upsert: {
            args: Prisma.PersonalInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          aggregate: {
            args: Prisma.PersonalInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonalInfo>
          }
          groupBy: {
            args: Prisma.PersonalInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalInfoCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalInfoCountAggregateOutputType> | number
          }
        }
      }
      BusinessProfile: {
        payload: Prisma.$BusinessProfilePayload<ExtArgs>
        fields: Prisma.BusinessProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          findFirst: {
            args: Prisma.BusinessProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          findMany: {
            args: Prisma.BusinessProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>[]
          }
          create: {
            args: Prisma.BusinessProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          createMany: {
            args: Prisma.BusinessProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>[]
          }
          delete: {
            args: Prisma.BusinessProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          update: {
            args: Prisma.BusinessProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          deleteMany: {
            args: Prisma.BusinessProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>[]
          }
          upsert: {
            args: Prisma.BusinessProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessProfilePayload>
          }
          aggregate: {
            args: Prisma.BusinessProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessProfile>
          }
          groupBy: {
            args: Prisma.BusinessProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessProfileCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessProfileCountAggregateOutputType> | number
          }
        }
      }
      FinancialProfile: {
        payload: Prisma.$FinancialProfilePayload<ExtArgs>
        fields: Prisma.FinancialProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          findFirst: {
            args: Prisma.FinancialProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          findMany: {
            args: Prisma.FinancialProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>[]
          }
          create: {
            args: Prisma.FinancialProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          createMany: {
            args: Prisma.FinancialProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>[]
          }
          delete: {
            args: Prisma.FinancialProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          update: {
            args: Prisma.FinancialProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          deleteMany: {
            args: Prisma.FinancialProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>[]
          }
          upsert: {
            args: Prisma.FinancialProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialProfilePayload>
          }
          aggregate: {
            args: Prisma.FinancialProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialProfile>
          }
          groupBy: {
            args: Prisma.FinancialProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialProfileCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialProfileCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductSelection: {
        payload: Prisma.$ProductSelectionPayload<ExtArgs>
        fields: Prisma.ProductSelectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductSelectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductSelectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          findFirst: {
            args: Prisma.ProductSelectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductSelectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          findMany: {
            args: Prisma.ProductSelectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>[]
          }
          create: {
            args: Prisma.ProductSelectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          createMany: {
            args: Prisma.ProductSelectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductSelectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>[]
          }
          delete: {
            args: Prisma.ProductSelectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          update: {
            args: Prisma.ProductSelectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          deleteMany: {
            args: Prisma.ProductSelectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductSelectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductSelectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>[]
          }
          upsert: {
            args: Prisma.ProductSelectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSelectionPayload>
          }
          aggregate: {
            args: Prisma.ProductSelectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductSelection>
          }
          groupBy: {
            args: Prisma.ProductSelectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductSelectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductSelectionCountArgs<ExtArgs>
            result: $Utils.Optional<ProductSelectionCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      KYCVerification: {
        payload: Prisma.$KYCVerificationPayload<ExtArgs>
        fields: Prisma.KYCVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KYCVerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KYCVerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          findFirst: {
            args: Prisma.KYCVerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KYCVerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          findMany: {
            args: Prisma.KYCVerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>[]
          }
          create: {
            args: Prisma.KYCVerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          createMany: {
            args: Prisma.KYCVerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KYCVerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>[]
          }
          delete: {
            args: Prisma.KYCVerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          update: {
            args: Prisma.KYCVerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          deleteMany: {
            args: Prisma.KYCVerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KYCVerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KYCVerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>[]
          }
          upsert: {
            args: Prisma.KYCVerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCVerificationPayload>
          }
          aggregate: {
            args: Prisma.KYCVerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKYCVerification>
          }
          groupBy: {
            args: Prisma.KYCVerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<KYCVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.KYCVerificationCountArgs<ExtArgs>
            result: $Utils.Optional<KYCVerificationCountAggregateOutputType> | number
          }
        }
      }
      AdditionalSigner: {
        payload: Prisma.$AdditionalSignerPayload<ExtArgs>
        fields: Prisma.AdditionalSignerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdditionalSignerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdditionalSignerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          findFirst: {
            args: Prisma.AdditionalSignerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdditionalSignerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          findMany: {
            args: Prisma.AdditionalSignerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>[]
          }
          create: {
            args: Prisma.AdditionalSignerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          createMany: {
            args: Prisma.AdditionalSignerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdditionalSignerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>[]
          }
          delete: {
            args: Prisma.AdditionalSignerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          update: {
            args: Prisma.AdditionalSignerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          deleteMany: {
            args: Prisma.AdditionalSignerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdditionalSignerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdditionalSignerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>[]
          }
          upsert: {
            args: Prisma.AdditionalSignerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalSignerPayload>
          }
          aggregate: {
            args: Prisma.AdditionalSignerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdditionalSigner>
          }
          groupBy: {
            args: Prisma.AdditionalSignerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdditionalSignerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdditionalSignerCountArgs<ExtArgs>
            result: $Utils.Optional<AdditionalSignerCountAggregateOutputType> | number
          }
        }
      }
      RiskAssessment: {
        payload: Prisma.$RiskAssessmentPayload<ExtArgs>
        fields: Prisma.RiskAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RiskAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RiskAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          findFirst: {
            args: Prisma.RiskAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RiskAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          findMany: {
            args: Prisma.RiskAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>[]
          }
          create: {
            args: Prisma.RiskAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          createMany: {
            args: Prisma.RiskAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RiskAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>[]
          }
          delete: {
            args: Prisma.RiskAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          update: {
            args: Prisma.RiskAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.RiskAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RiskAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RiskAssessmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>[]
          }
          upsert: {
            args: Prisma.RiskAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAssessmentPayload>
          }
          aggregate: {
            args: Prisma.RiskAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRiskAssessment>
          }
          groupBy: {
            args: Prisma.RiskAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RiskAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RiskAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<RiskAssessmentCountAggregateOutputType> | number
          }
        }
      }
      Disclosure: {
        payload: Prisma.$DisclosurePayload<ExtArgs>
        fields: Prisma.DisclosureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisclosureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisclosureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          findFirst: {
            args: Prisma.DisclosureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisclosureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          findMany: {
            args: Prisma.DisclosureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>[]
          }
          create: {
            args: Prisma.DisclosureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          createMany: {
            args: Prisma.DisclosureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisclosureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>[]
          }
          delete: {
            args: Prisma.DisclosureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          update: {
            args: Prisma.DisclosureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          deleteMany: {
            args: Prisma.DisclosureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisclosureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DisclosureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>[]
          }
          upsert: {
            args: Prisma.DisclosureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisclosurePayload>
          }
          aggregate: {
            args: Prisma.DisclosureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDisclosure>
          }
          groupBy: {
            args: Prisma.DisclosureGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisclosureGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisclosureCountArgs<ExtArgs>
            result: $Utils.Optional<DisclosureCountAggregateOutputType> | number
          }
        }
      }
      Agreement: {
        payload: Prisma.$AgreementPayload<ExtArgs>
        fields: Prisma.AgreementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgreementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgreementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          findFirst: {
            args: Prisma.AgreementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgreementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          findMany: {
            args: Prisma.AgreementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          create: {
            args: Prisma.AgreementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          createMany: {
            args: Prisma.AgreementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgreementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          delete: {
            args: Prisma.AgreementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          update: {
            args: Prisma.AgreementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          deleteMany: {
            args: Prisma.AgreementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgreementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgreementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>[]
          }
          upsert: {
            args: Prisma.AgreementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgreementPayload>
          }
          aggregate: {
            args: Prisma.AgreementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgreement>
          }
          groupBy: {
            args: Prisma.AgreementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgreementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgreementCountArgs<ExtArgs>
            result: $Utils.Optional<AgreementCountAggregateOutputType> | number
          }
        }
      }
      ElectronicSignature: {
        payload: Prisma.$ElectronicSignaturePayload<ExtArgs>
        fields: Prisma.ElectronicSignatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ElectronicSignatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ElectronicSignatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          findFirst: {
            args: Prisma.ElectronicSignatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ElectronicSignatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          findMany: {
            args: Prisma.ElectronicSignatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>[]
          }
          create: {
            args: Prisma.ElectronicSignatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          createMany: {
            args: Prisma.ElectronicSignatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ElectronicSignatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>[]
          }
          delete: {
            args: Prisma.ElectronicSignatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          update: {
            args: Prisma.ElectronicSignatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          deleteMany: {
            args: Prisma.ElectronicSignatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ElectronicSignatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ElectronicSignatureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>[]
          }
          upsert: {
            args: Prisma.ElectronicSignatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ElectronicSignaturePayload>
          }
          aggregate: {
            args: Prisma.ElectronicSignatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateElectronicSignature>
          }
          groupBy: {
            args: Prisma.ElectronicSignatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ElectronicSignatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ElectronicSignatureCountArgs<ExtArgs>
            result: $Utils.Optional<ElectronicSignatureCountAggregateOutputType> | number
          }
        }
      }
      FundingSetup: {
        payload: Prisma.$FundingSetupPayload<ExtArgs>
        fields: Prisma.FundingSetupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FundingSetupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FundingSetupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          findFirst: {
            args: Prisma.FundingSetupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FundingSetupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          findMany: {
            args: Prisma.FundingSetupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>[]
          }
          create: {
            args: Prisma.FundingSetupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          createMany: {
            args: Prisma.FundingSetupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FundingSetupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>[]
          }
          delete: {
            args: Prisma.FundingSetupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          update: {
            args: Prisma.FundingSetupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          deleteMany: {
            args: Prisma.FundingSetupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FundingSetupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FundingSetupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>[]
          }
          upsert: {
            args: Prisma.FundingSetupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundingSetupPayload>
          }
          aggregate: {
            args: Prisma.FundingSetupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFundingSetup>
          }
          groupBy: {
            args: Prisma.FundingSetupGroupByArgs<ExtArgs>
            result: $Utils.Optional<FundingSetupGroupByOutputType>[]
          }
          count: {
            args: Prisma.FundingSetupCountArgs<ExtArgs>
            result: $Utils.Optional<FundingSetupCountAggregateOutputType> | number
          }
        }
      }
      AuditTrailEntry: {
        payload: Prisma.$AuditTrailEntryPayload<ExtArgs>
        fields: Prisma.AuditTrailEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditTrailEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditTrailEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          findFirst: {
            args: Prisma.AuditTrailEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditTrailEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          findMany: {
            args: Prisma.AuditTrailEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>[]
          }
          create: {
            args: Prisma.AuditTrailEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          createMany: {
            args: Prisma.AuditTrailEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditTrailEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>[]
          }
          delete: {
            args: Prisma.AuditTrailEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          update: {
            args: Prisma.AuditTrailEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          deleteMany: {
            args: Prisma.AuditTrailEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditTrailEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditTrailEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>[]
          }
          upsert: {
            args: Prisma.AuditTrailEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailEntryPayload>
          }
          aggregate: {
            args: Prisma.AuditTrailEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditTrailEntry>
          }
          groupBy: {
            args: Prisma.AuditTrailEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditTrailEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditTrailEntryCountArgs<ExtArgs>
            result: $Utils.Optional<AuditTrailEntryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    token?: TokenOmit
    application?: ApplicationOmit
    personalInfo?: PersonalInfoOmit
    businessProfile?: BusinessProfileOmit
    financialProfile?: FinancialProfileOmit
    product?: ProductOmit
    productSelection?: ProductSelectionOmit
    document?: DocumentOmit
    kYCVerification?: KYCVerificationOmit
    additionalSigner?: AdditionalSignerOmit
    riskAssessment?: RiskAssessmentOmit
    disclosure?: DisclosureOmit
    agreement?: AgreementOmit
    electronicSignature?: ElectronicSignatureOmit
    fundingSetup?: FundingSetupOmit
    auditTrailEntry?: AuditTrailEntryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tokens: number
    applications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | UserCountOutputTypeCountTokensArgs
    applications?: boolean | UserCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    productSelections: number
    documents: number
    additionalSigners: number
    agreements: number
    signatures: number
    auditTrail: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productSelections?: boolean | ApplicationCountOutputTypeCountProductSelectionsArgs
    documents?: boolean | ApplicationCountOutputTypeCountDocumentsArgs
    additionalSigners?: boolean | ApplicationCountOutputTypeCountAdditionalSignersArgs
    agreements?: boolean | ApplicationCountOutputTypeCountAgreementsArgs
    signatures?: boolean | ApplicationCountOutputTypeCountSignaturesArgs
    auditTrail?: boolean | ApplicationCountOutputTypeCountAuditTrailArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountProductSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSelectionWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountAdditionalSignersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdditionalSignerWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountAgreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectronicSignatureWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountAuditTrailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditTrailEntryWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    productSelections: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productSelections?: boolean | ProductCountOutputTypeCountProductSelectionsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSelectionWhereInput
  }


  /**
   * Count Type AdditionalSignerCountOutputType
   */

  export type AdditionalSignerCountOutputType = {
    documents: number
  }

  export type AdditionalSignerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | AdditionalSignerCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * AdditionalSignerCountOutputType without action
   */
  export type AdditionalSignerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSignerCountOutputType
     */
    select?: AdditionalSignerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdditionalSignerCountOutputType without action
   */
  export type AdditionalSignerCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type DisclosureCountOutputType
   */

  export type DisclosureCountOutputType = {
    agreements: number
  }

  export type DisclosureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreements?: boolean | DisclosureCountOutputTypeCountAgreementsArgs
  }

  // Custom InputTypes
  /**
   * DisclosureCountOutputType without action
   */
  export type DisclosureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisclosureCountOutputType
     */
    select?: DisclosureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisclosureCountOutputType without action
   */
  export type DisclosureCountOutputTypeCountAgreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    isEmailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    isEmailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    isEmailVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    isEmailVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    isEmailVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    isEmailVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string | null
    password: string
    role: $Enums.Role
    isEmailVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    isEmailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tokens?: boolean | User$tokensArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    isEmailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    isEmailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    isEmailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "isEmailVerified" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | User$tokensArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tokens: Prisma.$TokenPayload<ExtArgs>[]
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
      password: string
      role: $Enums.Role
      isEmailVerified: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tokens<T extends User$tokensArgs<ExtArgs> = {}>(args?: Subset<T, User$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applications<T extends User$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.tokens
   */
  export type User$tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * User.applications
   */
  export type User$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    token: string | null
    type: $Enums.TokenType | null
    expires: Date | null
    blacklisted: boolean | null
    createdAt: Date | null
    userId: number | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    token: string | null
    type: $Enums.TokenType | null
    expires: Date | null
    blacklisted: boolean | null
    createdAt: Date | null
    userId: number | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    token: number
    type: number
    expires: number
    blacklisted: number
    createdAt: number
    userId: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    token?: true
    type?: true
    expires?: true
    blacklisted?: true
    createdAt?: true
    userId?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    token?: true
    type?: true
    expires?: true
    blacklisted?: true
    createdAt?: true
    userId?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    token?: true
    type?: true
    expires?: true
    blacklisted?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: number
    token: string
    type: $Enums.TokenType
    expires: Date
    blacklisted: boolean
    createdAt: Date
    userId: number
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    type?: boolean
    expires?: boolean
    blacklisted?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    type?: boolean
    expires?: boolean
    blacklisted?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    type?: boolean
    expires?: boolean
    blacklisted?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    token?: boolean
    type?: boolean
    expires?: boolean
    blacklisted?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "type" | "expires" | "blacklisted" | "createdAt" | "userId", ExtArgs["result"]["token"]>
  export type TokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
      type: $Enums.TokenType
      expires: Date
      blacklisted: boolean
      createdAt: Date
      userId: number
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {TokenUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'Int'>
    readonly token: FieldRef<"Token", 'String'>
    readonly type: FieldRef<"Token", 'TokenType'>
    readonly expires: FieldRef<"Token", 'DateTime'>
    readonly blacklisted: FieldRef<"Token", 'Boolean'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
    readonly userId: FieldRef<"Token", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token updateManyAndReturn
   */
  export type TokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    userId: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    userId: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: string | null
    status: string | null
    currentStep: string | null
    accountType: string | null
    customerType: string | null
    applicantId: string | null
    submittedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: string | null
    status: string | null
    currentStep: string | null
    accountType: string | null
    customerType: string | null
    applicantId: string | null
    submittedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    status: number
    currentStep: number
    accountType: number
    customerType: number
    applicantId: number
    submittedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    metadata: number
    userId: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    userId?: true
  }

  export type ApplicationSumAggregateInputType = {
    userId?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    status?: true
    currentStep?: true
    accountType?: true
    customerType?: true
    applicantId?: true
    submittedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    status?: true
    currentStep?: true
    accountType?: true
    customerType?: true
    applicantId?: true
    submittedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    status?: true
    currentStep?: true
    accountType?: true
    customerType?: true
    applicantId?: true
    submittedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    metadata?: true
    userId?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: string
    status: string
    currentStep: string
    accountType: string
    customerType: string
    applicantId: string
    submittedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    metadata: JsonValue
    userId: number
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    currentStep?: boolean
    accountType?: boolean
    customerType?: boolean
    applicantId?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    userId?: boolean
    personalInfo?: boolean | Application$personalInfoArgs<ExtArgs>
    businessProfile?: boolean | Application$businessProfileArgs<ExtArgs>
    financialProfile?: boolean | Application$financialProfileArgs<ExtArgs>
    productSelections?: boolean | Application$productSelectionsArgs<ExtArgs>
    documents?: boolean | Application$documentsArgs<ExtArgs>
    additionalSigners?: boolean | Application$additionalSignersArgs<ExtArgs>
    kycVerification?: boolean | Application$kycVerificationArgs<ExtArgs>
    riskAssessment?: boolean | Application$riskAssessmentArgs<ExtArgs>
    agreements?: boolean | Application$agreementsArgs<ExtArgs>
    signatures?: boolean | Application$signaturesArgs<ExtArgs>
    fundingSetup?: boolean | Application$fundingSetupArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    auditTrail?: boolean | Application$auditTrailArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    currentStep?: boolean
    accountType?: boolean
    customerType?: boolean
    applicantId?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    currentStep?: boolean
    accountType?: boolean
    customerType?: boolean
    applicantId?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    status?: boolean
    currentStep?: boolean
    accountType?: boolean
    customerType?: boolean
    applicantId?: boolean
    submittedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    userId?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "currentStep" | "accountType" | "customerType" | "applicantId" | "submittedAt" | "completedAt" | "createdAt" | "updatedAt" | "metadata" | "userId", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personalInfo?: boolean | Application$personalInfoArgs<ExtArgs>
    businessProfile?: boolean | Application$businessProfileArgs<ExtArgs>
    financialProfile?: boolean | Application$financialProfileArgs<ExtArgs>
    productSelections?: boolean | Application$productSelectionsArgs<ExtArgs>
    documents?: boolean | Application$documentsArgs<ExtArgs>
    additionalSigners?: boolean | Application$additionalSignersArgs<ExtArgs>
    kycVerification?: boolean | Application$kycVerificationArgs<ExtArgs>
    riskAssessment?: boolean | Application$riskAssessmentArgs<ExtArgs>
    agreements?: boolean | Application$agreementsArgs<ExtArgs>
    signatures?: boolean | Application$signaturesArgs<ExtArgs>
    fundingSetup?: boolean | Application$fundingSetupArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    auditTrail?: boolean | Application$auditTrailArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      personalInfo: Prisma.$PersonalInfoPayload<ExtArgs> | null
      businessProfile: Prisma.$BusinessProfilePayload<ExtArgs> | null
      financialProfile: Prisma.$FinancialProfilePayload<ExtArgs> | null
      productSelections: Prisma.$ProductSelectionPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      additionalSigners: Prisma.$AdditionalSignerPayload<ExtArgs>[]
      kycVerification: Prisma.$KYCVerificationPayload<ExtArgs> | null
      riskAssessment: Prisma.$RiskAssessmentPayload<ExtArgs> | null
      agreements: Prisma.$AgreementPayload<ExtArgs>[]
      signatures: Prisma.$ElectronicSignaturePayload<ExtArgs>[]
      fundingSetup: Prisma.$FundingSetupPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      auditTrail: Prisma.$AuditTrailEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      currentStep: string
      accountType: string
      customerType: string
      applicantId: string
      submittedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
      metadata: Prisma.JsonValue
      userId: number
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications and returns the data updated in the database.
     * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personalInfo<T extends Application$personalInfoArgs<ExtArgs> = {}>(args?: Subset<T, Application$personalInfoArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    businessProfile<T extends Application$businessProfileArgs<ExtArgs> = {}>(args?: Subset<T, Application$businessProfileArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    financialProfile<T extends Application$financialProfileArgs<ExtArgs> = {}>(args?: Subset<T, Application$financialProfileArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    productSelections<T extends Application$productSelectionsArgs<ExtArgs> = {}>(args?: Subset<T, Application$productSelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Application$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Application$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    additionalSigners<T extends Application$additionalSignersArgs<ExtArgs> = {}>(args?: Subset<T, Application$additionalSignersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    kycVerification<T extends Application$kycVerificationArgs<ExtArgs> = {}>(args?: Subset<T, Application$kycVerificationArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    riskAssessment<T extends Application$riskAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, Application$riskAssessmentArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    agreements<T extends Application$agreementsArgs<ExtArgs> = {}>(args?: Subset<T, Application$agreementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    signatures<T extends Application$signaturesArgs<ExtArgs> = {}>(args?: Subset<T, Application$signaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fundingSetup<T extends Application$fundingSetupArgs<ExtArgs> = {}>(args?: Subset<T, Application$fundingSetupArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    auditTrail<T extends Application$auditTrailArgs<ExtArgs> = {}>(args?: Subset<T, Application$auditTrailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'String'>
    readonly status: FieldRef<"Application", 'String'>
    readonly currentStep: FieldRef<"Application", 'String'>
    readonly accountType: FieldRef<"Application", 'String'>
    readonly customerType: FieldRef<"Application", 'String'>
    readonly applicantId: FieldRef<"Application", 'String'>
    readonly submittedAt: FieldRef<"Application", 'DateTime'>
    readonly completedAt: FieldRef<"Application", 'DateTime'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
    readonly metadata: FieldRef<"Application", 'Json'>
    readonly userId: FieldRef<"Application", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application updateManyAndReturn
   */
  export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.personalInfo
   */
  export type Application$personalInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    where?: PersonalInfoWhereInput
  }

  /**
   * Application.businessProfile
   */
  export type Application$businessProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    where?: BusinessProfileWhereInput
  }

  /**
   * Application.financialProfile
   */
  export type Application$financialProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    where?: FinancialProfileWhereInput
  }

  /**
   * Application.productSelections
   */
  export type Application$productSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    where?: ProductSelectionWhereInput
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    cursor?: ProductSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSelectionScalarFieldEnum | ProductSelectionScalarFieldEnum[]
  }

  /**
   * Application.documents
   */
  export type Application$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Application.additionalSigners
   */
  export type Application$additionalSignersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    where?: AdditionalSignerWhereInput
    orderBy?: AdditionalSignerOrderByWithRelationInput | AdditionalSignerOrderByWithRelationInput[]
    cursor?: AdditionalSignerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdditionalSignerScalarFieldEnum | AdditionalSignerScalarFieldEnum[]
  }

  /**
   * Application.kycVerification
   */
  export type Application$kycVerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    where?: KYCVerificationWhereInput
  }

  /**
   * Application.riskAssessment
   */
  export type Application$riskAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    where?: RiskAssessmentWhereInput
  }

  /**
   * Application.agreements
   */
  export type Application$agreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    where?: AgreementWhereInput
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    cursor?: AgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Application.signatures
   */
  export type Application$signaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    where?: ElectronicSignatureWhereInput
    orderBy?: ElectronicSignatureOrderByWithRelationInput | ElectronicSignatureOrderByWithRelationInput[]
    cursor?: ElectronicSignatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ElectronicSignatureScalarFieldEnum | ElectronicSignatureScalarFieldEnum[]
  }

  /**
   * Application.fundingSetup
   */
  export type Application$fundingSetupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    where?: FundingSetupWhereInput
  }

  /**
   * Application.auditTrail
   */
  export type Application$auditTrailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    where?: AuditTrailEntryWhereInput
    orderBy?: AuditTrailEntryOrderByWithRelationInput | AuditTrailEntryOrderByWithRelationInput[]
    cursor?: AuditTrailEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditTrailEntryScalarFieldEnum | AuditTrailEntryScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model PersonalInfo
   */

  export type AggregatePersonalInfo = {
    _count: PersonalInfoCountAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
  }

  export type PersonalInfoMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    suffix: string | null
    dateOfBirth: string | null
    ssn: string | null
    phone: string | null
    email: string | null
    employmentStatus: string | null
    occupation: string | null
    employer: string | null
    workPhone: string | null
    applicationId: string | null
  }

  export type PersonalInfoMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    suffix: string | null
    dateOfBirth: string | null
    ssn: string | null
    phone: string | null
    email: string | null
    employmentStatus: string | null
    occupation: string | null
    employer: string | null
    workPhone: string | null
    applicationId: string | null
  }

  export type PersonalInfoCountAggregateOutputType = {
    id: number
    firstName: number
    middleName: number
    lastName: number
    suffix: number
    dateOfBirth: number
    ssn: number
    phone: number
    email: number
    mailingAddress: number
    physicalAddress: number
    employmentStatus: number
    occupation: number
    employer: number
    workPhone: number
    applicationId: number
    _all: number
  }


  export type PersonalInfoMinAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    dateOfBirth?: true
    ssn?: true
    phone?: true
    email?: true
    employmentStatus?: true
    occupation?: true
    employer?: true
    workPhone?: true
    applicationId?: true
  }

  export type PersonalInfoMaxAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    dateOfBirth?: true
    ssn?: true
    phone?: true
    email?: true
    employmentStatus?: true
    occupation?: true
    employer?: true
    workPhone?: true
    applicationId?: true
  }

  export type PersonalInfoCountAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    dateOfBirth?: true
    ssn?: true
    phone?: true
    email?: true
    mailingAddress?: true
    physicalAddress?: true
    employmentStatus?: true
    occupation?: true
    employer?: true
    workPhone?: true
    applicationId?: true
    _all?: true
  }

  export type PersonalInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalInfo to aggregate.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalInfos
    **/
    _count?: true | PersonalInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalInfoMaxAggregateInputType
  }

  export type GetPersonalInfoAggregateType<T extends PersonalInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalInfo[P]>
      : GetScalarType<T[P], AggregatePersonalInfo[P]>
  }




  export type PersonalInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalInfoWhereInput
    orderBy?: PersonalInfoOrderByWithAggregationInput | PersonalInfoOrderByWithAggregationInput[]
    by: PersonalInfoScalarFieldEnum[] | PersonalInfoScalarFieldEnum
    having?: PersonalInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalInfoCountAggregateInputType | true
    _min?: PersonalInfoMinAggregateInputType
    _max?: PersonalInfoMaxAggregateInputType
  }

  export type PersonalInfoGroupByOutputType = {
    id: string
    firstName: string
    middleName: string | null
    lastName: string
    suffix: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonValue
    physicalAddress: JsonValue | null
    employmentStatus: string
    occupation: string | null
    employer: string | null
    workPhone: string | null
    applicationId: string
    _count: PersonalInfoCountAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
  }

  type GetPersonalInfoGroupByPayload<T extends PersonalInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]>
        }
      >
    >


  export type PersonalInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    dateOfBirth?: boolean
    ssn?: boolean
    phone?: boolean
    email?: boolean
    mailingAddress?: boolean
    physicalAddress?: boolean
    employmentStatus?: boolean
    occupation?: boolean
    employer?: boolean
    workPhone?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    dateOfBirth?: boolean
    ssn?: boolean
    phone?: boolean
    email?: boolean
    mailingAddress?: boolean
    physicalAddress?: boolean
    employmentStatus?: boolean
    occupation?: boolean
    employer?: boolean
    workPhone?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    dateOfBirth?: boolean
    ssn?: boolean
    phone?: boolean
    email?: boolean
    mailingAddress?: boolean
    physicalAddress?: boolean
    employmentStatus?: boolean
    occupation?: boolean
    employer?: boolean
    workPhone?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectScalar = {
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    dateOfBirth?: boolean
    ssn?: boolean
    phone?: boolean
    email?: boolean
    mailingAddress?: boolean
    physicalAddress?: boolean
    employmentStatus?: boolean
    occupation?: boolean
    employer?: boolean
    workPhone?: boolean
    applicationId?: boolean
  }

  export type PersonalInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "middleName" | "lastName" | "suffix" | "dateOfBirth" | "ssn" | "phone" | "email" | "mailingAddress" | "physicalAddress" | "employmentStatus" | "occupation" | "employer" | "workPhone" | "applicationId", ExtArgs["result"]["personalInfo"]>
  export type PersonalInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type PersonalInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type PersonalInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $PersonalInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonalInfo"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      middleName: string | null
      lastName: string
      suffix: string | null
      dateOfBirth: string
      ssn: string
      phone: string
      email: string
      mailingAddress: Prisma.JsonValue
      physicalAddress: Prisma.JsonValue | null
      employmentStatus: string
      occupation: string | null
      employer: string | null
      workPhone: string | null
      applicationId: string
    }, ExtArgs["result"]["personalInfo"]>
    composites: {}
  }

  type PersonalInfoGetPayload<S extends boolean | null | undefined | PersonalInfoDefaultArgs> = $Result.GetResult<Prisma.$PersonalInfoPayload, S>

  type PersonalInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonalInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonalInfoCountAggregateInputType | true
    }

  export interface PersonalInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonalInfo'], meta: { name: 'PersonalInfo' } }
    /**
     * Find zero or one PersonalInfo that matches the filter.
     * @param {PersonalInfoFindUniqueArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalInfoFindUniqueArgs>(args: SelectSubset<T, PersonalInfoFindUniqueArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PersonalInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonalInfoFindUniqueOrThrowArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindFirstArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalInfoFindFirstArgs>(args?: SelectSubset<T, PersonalInfoFindFirstArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindFirstOrThrowArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PersonalInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany()
     * 
     * // Get first 10 PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonalInfoFindManyArgs>(args?: SelectSubset<T, PersonalInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PersonalInfo.
     * @param {PersonalInfoCreateArgs} args - Arguments to create a PersonalInfo.
     * @example
     * // Create one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.create({
     *   data: {
     *     // ... data to create a PersonalInfo
     *   }
     * })
     * 
     */
    create<T extends PersonalInfoCreateArgs>(args: SelectSubset<T, PersonalInfoCreateArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PersonalInfos.
     * @param {PersonalInfoCreateManyArgs} args - Arguments to create many PersonalInfos.
     * @example
     * // Create many PersonalInfos
     * const personalInfo = await prisma.personalInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalInfoCreateManyArgs>(args?: SelectSubset<T, PersonalInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PersonalInfos and returns the data saved in the database.
     * @param {PersonalInfoCreateManyAndReturnArgs} args - Arguments to create many PersonalInfos.
     * @example
     * // Create many PersonalInfos
     * const personalInfo = await prisma.personalInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PersonalInfos and only return the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PersonalInfo.
     * @param {PersonalInfoDeleteArgs} args - Arguments to delete one PersonalInfo.
     * @example
     * // Delete one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.delete({
     *   where: {
     *     // ... filter to delete one PersonalInfo
     *   }
     * })
     * 
     */
    delete<T extends PersonalInfoDeleteArgs>(args: SelectSubset<T, PersonalInfoDeleteArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PersonalInfo.
     * @param {PersonalInfoUpdateArgs} args - Arguments to update one PersonalInfo.
     * @example
     * // Update one PersonalInfo
     * const personalInfo = await prisma.personalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalInfoUpdateArgs>(args: SelectSubset<T, PersonalInfoUpdateArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PersonalInfos.
     * @param {PersonalInfoDeleteManyArgs} args - Arguments to filter PersonalInfos to delete.
     * @example
     * // Delete a few PersonalInfos
     * const { count } = await prisma.personalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalInfoDeleteManyArgs>(args?: SelectSubset<T, PersonalInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalInfos
     * const personalInfo = await prisma.personalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalInfoUpdateManyArgs>(args: SelectSubset<T, PersonalInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalInfos and returns the data updated in the database.
     * @param {PersonalInfoUpdateManyAndReturnArgs} args - Arguments to update many PersonalInfos.
     * @example
     * // Update many PersonalInfos
     * const personalInfo = await prisma.personalInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PersonalInfos and only return the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonalInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonalInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PersonalInfo.
     * @param {PersonalInfoUpsertArgs} args - Arguments to update or create a PersonalInfo.
     * @example
     * // Update or create a PersonalInfo
     * const personalInfo = await prisma.personalInfo.upsert({
     *   create: {
     *     // ... data to create a PersonalInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalInfo we want to update
     *   }
     * })
     */
    upsert<T extends PersonalInfoUpsertArgs>(args: SelectSubset<T, PersonalInfoUpsertArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoCountArgs} args - Arguments to filter PersonalInfos to count.
     * @example
     * // Count the number of PersonalInfos
     * const count = await prisma.personalInfo.count({
     *   where: {
     *     // ... the filter for the PersonalInfos we want to count
     *   }
     * })
    **/
    count<T extends PersonalInfoCountArgs>(
      args?: Subset<T, PersonalInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalInfoAggregateArgs>(args: Subset<T, PersonalInfoAggregateArgs>): Prisma.PrismaPromise<GetPersonalInfoAggregateType<T>>

    /**
     * Group by PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalInfoGroupByArgs['orderBy'] }
        : { orderBy?: PersonalInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonalInfo model
   */
  readonly fields: PersonalInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PersonalInfo model
   */
  interface PersonalInfoFieldRefs {
    readonly id: FieldRef<"PersonalInfo", 'String'>
    readonly firstName: FieldRef<"PersonalInfo", 'String'>
    readonly middleName: FieldRef<"PersonalInfo", 'String'>
    readonly lastName: FieldRef<"PersonalInfo", 'String'>
    readonly suffix: FieldRef<"PersonalInfo", 'String'>
    readonly dateOfBirth: FieldRef<"PersonalInfo", 'String'>
    readonly ssn: FieldRef<"PersonalInfo", 'String'>
    readonly phone: FieldRef<"PersonalInfo", 'String'>
    readonly email: FieldRef<"PersonalInfo", 'String'>
    readonly mailingAddress: FieldRef<"PersonalInfo", 'Json'>
    readonly physicalAddress: FieldRef<"PersonalInfo", 'Json'>
    readonly employmentStatus: FieldRef<"PersonalInfo", 'String'>
    readonly occupation: FieldRef<"PersonalInfo", 'String'>
    readonly employer: FieldRef<"PersonalInfo", 'String'>
    readonly workPhone: FieldRef<"PersonalInfo", 'String'>
    readonly applicationId: FieldRef<"PersonalInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PersonalInfo findUnique
   */
  export type PersonalInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo findUniqueOrThrow
   */
  export type PersonalInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo findFirst
   */
  export type PersonalInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalInfos.
     */
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo findFirstOrThrow
   */
  export type PersonalInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalInfos.
     */
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo findMany
   */
  export type PersonalInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfos to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo create
   */
  export type PersonalInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonalInfo.
     */
    data: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
  }

  /**
   * PersonalInfo createMany
   */
  export type PersonalInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonalInfos.
     */
    data: PersonalInfoCreateManyInput | PersonalInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PersonalInfo createManyAndReturn
   */
  export type PersonalInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * The data used to create many PersonalInfos.
     */
    data: PersonalInfoCreateManyInput | PersonalInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalInfo update
   */
  export type PersonalInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonalInfo.
     */
    data: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
    /**
     * Choose, which PersonalInfo to update.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo updateMany
   */
  export type PersonalInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonalInfos.
     */
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyInput>
    /**
     * Filter which PersonalInfos to update
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to update.
     */
    limit?: number
  }

  /**
   * PersonalInfo updateManyAndReturn
   */
  export type PersonalInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * The data used to update PersonalInfos.
     */
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyInput>
    /**
     * Filter which PersonalInfos to update
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalInfo upsert
   */
  export type PersonalInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonalInfo to update in case it exists.
     */
    where: PersonalInfoWhereUniqueInput
    /**
     * In case the PersonalInfo found by the `where` argument doesn't exist, create a new PersonalInfo with this data.
     */
    create: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
    /**
     * In case the PersonalInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
  }

  /**
   * PersonalInfo delete
   */
  export type PersonalInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter which PersonalInfo to delete.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo deleteMany
   */
  export type PersonalInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalInfos to delete
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to delete.
     */
    limit?: number
  }

  /**
   * PersonalInfo without action
   */
  export type PersonalInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
  }


  /**
   * Model BusinessProfile
   */

  export type AggregateBusinessProfile = {
    _count: BusinessProfileCountAggregateOutputType | null
    _avg: BusinessProfileAvgAggregateOutputType | null
    _sum: BusinessProfileSumAggregateOutputType | null
    _min: BusinessProfileMinAggregateOutputType | null
    _max: BusinessProfileMaxAggregateOutputType | null
  }

  export type BusinessProfileAvgAggregateOutputType = {
    monthlyTransactionVolume: number | null
    monthlyTransactionCount: number | null
    expectedBalance: number | null
  }

  export type BusinessProfileSumAggregateOutputType = {
    monthlyTransactionVolume: number | null
    monthlyTransactionCount: number | null
    expectedBalance: number | null
  }

  export type BusinessProfileMinAggregateOutputType = {
    id: string | null
    businessName: string | null
    dbaName: string | null
    ein: string | null
    entityType: string | null
    industryType: string | null
    dateEstablished: string | null
    businessPhone: string | null
    businessEmail: string | null
    website: string | null
    description: string | null
    isCashIntensive: boolean | null
    monthlyTransactionVolume: number | null
    monthlyTransactionCount: number | null
    expectedBalance: number | null
    applicationId: string | null
  }

  export type BusinessProfileMaxAggregateOutputType = {
    id: string | null
    businessName: string | null
    dbaName: string | null
    ein: string | null
    entityType: string | null
    industryType: string | null
    dateEstablished: string | null
    businessPhone: string | null
    businessEmail: string | null
    website: string | null
    description: string | null
    isCashIntensive: boolean | null
    monthlyTransactionVolume: number | null
    monthlyTransactionCount: number | null
    expectedBalance: number | null
    applicationId: string | null
  }

  export type BusinessProfileCountAggregateOutputType = {
    id: number
    businessName: number
    dbaName: number
    ein: number
    entityType: number
    industryType: number
    dateEstablished: number
    businessAddress: number
    mailingAddress: number
    businessPhone: number
    businessEmail: number
    website: number
    description: number
    isCashIntensive: number
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
    applicationId: number
    _all: number
  }


  export type BusinessProfileAvgAggregateInputType = {
    monthlyTransactionVolume?: true
    monthlyTransactionCount?: true
    expectedBalance?: true
  }

  export type BusinessProfileSumAggregateInputType = {
    monthlyTransactionVolume?: true
    monthlyTransactionCount?: true
    expectedBalance?: true
  }

  export type BusinessProfileMinAggregateInputType = {
    id?: true
    businessName?: true
    dbaName?: true
    ein?: true
    entityType?: true
    industryType?: true
    dateEstablished?: true
    businessPhone?: true
    businessEmail?: true
    website?: true
    description?: true
    isCashIntensive?: true
    monthlyTransactionVolume?: true
    monthlyTransactionCount?: true
    expectedBalance?: true
    applicationId?: true
  }

  export type BusinessProfileMaxAggregateInputType = {
    id?: true
    businessName?: true
    dbaName?: true
    ein?: true
    entityType?: true
    industryType?: true
    dateEstablished?: true
    businessPhone?: true
    businessEmail?: true
    website?: true
    description?: true
    isCashIntensive?: true
    monthlyTransactionVolume?: true
    monthlyTransactionCount?: true
    expectedBalance?: true
    applicationId?: true
  }

  export type BusinessProfileCountAggregateInputType = {
    id?: true
    businessName?: true
    dbaName?: true
    ein?: true
    entityType?: true
    industryType?: true
    dateEstablished?: true
    businessAddress?: true
    mailingAddress?: true
    businessPhone?: true
    businessEmail?: true
    website?: true
    description?: true
    isCashIntensive?: true
    monthlyTransactionVolume?: true
    monthlyTransactionCount?: true
    expectedBalance?: true
    applicationId?: true
    _all?: true
  }

  export type BusinessProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessProfile to aggregate.
     */
    where?: BusinessProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessProfiles to fetch.
     */
    orderBy?: BusinessProfileOrderByWithRelationInput | BusinessProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessProfiles
    **/
    _count?: true | BusinessProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessProfileMaxAggregateInputType
  }

  export type GetBusinessProfileAggregateType<T extends BusinessProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessProfile[P]>
      : GetScalarType<T[P], AggregateBusinessProfile[P]>
  }




  export type BusinessProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessProfileWhereInput
    orderBy?: BusinessProfileOrderByWithAggregationInput | BusinessProfileOrderByWithAggregationInput[]
    by: BusinessProfileScalarFieldEnum[] | BusinessProfileScalarFieldEnum
    having?: BusinessProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessProfileCountAggregateInputType | true
    _avg?: BusinessProfileAvgAggregateInputType
    _sum?: BusinessProfileSumAggregateInputType
    _min?: BusinessProfileMinAggregateInputType
    _max?: BusinessProfileMaxAggregateInputType
  }

  export type BusinessProfileGroupByOutputType = {
    id: string
    businessName: string
    dbaName: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonValue
    mailingAddress: JsonValue | null
    businessPhone: string
    businessEmail: string
    website: string | null
    description: string
    isCashIntensive: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
    applicationId: string
    _count: BusinessProfileCountAggregateOutputType | null
    _avg: BusinessProfileAvgAggregateOutputType | null
    _sum: BusinessProfileSumAggregateOutputType | null
    _min: BusinessProfileMinAggregateOutputType | null
    _max: BusinessProfileMaxAggregateOutputType | null
  }

  type GetBusinessProfileGroupByPayload<T extends BusinessProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessProfileGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessProfileGroupByOutputType[P]>
        }
      >
    >


  export type BusinessProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    dbaName?: boolean
    ein?: boolean
    entityType?: boolean
    industryType?: boolean
    dateEstablished?: boolean
    businessAddress?: boolean
    mailingAddress?: boolean
    businessPhone?: boolean
    businessEmail?: boolean
    website?: boolean
    description?: boolean
    isCashIntensive?: boolean
    monthlyTransactionVolume?: boolean
    monthlyTransactionCount?: boolean
    expectedBalance?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessProfile"]>

  export type BusinessProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    dbaName?: boolean
    ein?: boolean
    entityType?: boolean
    industryType?: boolean
    dateEstablished?: boolean
    businessAddress?: boolean
    mailingAddress?: boolean
    businessPhone?: boolean
    businessEmail?: boolean
    website?: boolean
    description?: boolean
    isCashIntensive?: boolean
    monthlyTransactionVolume?: boolean
    monthlyTransactionCount?: boolean
    expectedBalance?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessProfile"]>

  export type BusinessProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    dbaName?: boolean
    ein?: boolean
    entityType?: boolean
    industryType?: boolean
    dateEstablished?: boolean
    businessAddress?: boolean
    mailingAddress?: boolean
    businessPhone?: boolean
    businessEmail?: boolean
    website?: boolean
    description?: boolean
    isCashIntensive?: boolean
    monthlyTransactionVolume?: boolean
    monthlyTransactionCount?: boolean
    expectedBalance?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessProfile"]>

  export type BusinessProfileSelectScalar = {
    id?: boolean
    businessName?: boolean
    dbaName?: boolean
    ein?: boolean
    entityType?: boolean
    industryType?: boolean
    dateEstablished?: boolean
    businessAddress?: boolean
    mailingAddress?: boolean
    businessPhone?: boolean
    businessEmail?: boolean
    website?: boolean
    description?: boolean
    isCashIntensive?: boolean
    monthlyTransactionVolume?: boolean
    monthlyTransactionCount?: boolean
    expectedBalance?: boolean
    applicationId?: boolean
  }

  export type BusinessProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "businessName" | "dbaName" | "ein" | "entityType" | "industryType" | "dateEstablished" | "businessAddress" | "mailingAddress" | "businessPhone" | "businessEmail" | "website" | "description" | "isCashIntensive" | "monthlyTransactionVolume" | "monthlyTransactionCount" | "expectedBalance" | "applicationId", ExtArgs["result"]["businessProfile"]>
  export type BusinessProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type BusinessProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type BusinessProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $BusinessProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessProfile"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      businessName: string
      dbaName: string | null
      ein: string
      entityType: string
      industryType: string
      dateEstablished: string
      businessAddress: Prisma.JsonValue
      mailingAddress: Prisma.JsonValue | null
      businessPhone: string
      businessEmail: string
      website: string | null
      description: string
      isCashIntensive: boolean
      monthlyTransactionVolume: number
      monthlyTransactionCount: number
      expectedBalance: number
      applicationId: string
    }, ExtArgs["result"]["businessProfile"]>
    composites: {}
  }

  type BusinessProfileGetPayload<S extends boolean | null | undefined | BusinessProfileDefaultArgs> = $Result.GetResult<Prisma.$BusinessProfilePayload, S>

  type BusinessProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessProfileCountAggregateInputType | true
    }

  export interface BusinessProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessProfile'], meta: { name: 'BusinessProfile' } }
    /**
     * Find zero or one BusinessProfile that matches the filter.
     * @param {BusinessProfileFindUniqueArgs} args - Arguments to find a BusinessProfile
     * @example
     * // Get one BusinessProfile
     * const businessProfile = await prisma.businessProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessProfileFindUniqueArgs>(args: SelectSubset<T, BusinessProfileFindUniqueArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessProfileFindUniqueOrThrowArgs} args - Arguments to find a BusinessProfile
     * @example
     * // Get one BusinessProfile
     * const businessProfile = await prisma.businessProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileFindFirstArgs} args - Arguments to find a BusinessProfile
     * @example
     * // Get one BusinessProfile
     * const businessProfile = await prisma.businessProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessProfileFindFirstArgs>(args?: SelectSubset<T, BusinessProfileFindFirstArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileFindFirstOrThrowArgs} args - Arguments to find a BusinessProfile
     * @example
     * // Get one BusinessProfile
     * const businessProfile = await prisma.businessProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessProfiles
     * const businessProfiles = await prisma.businessProfile.findMany()
     * 
     * // Get first 10 BusinessProfiles
     * const businessProfiles = await prisma.businessProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessProfileWithIdOnly = await prisma.businessProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessProfileFindManyArgs>(args?: SelectSubset<T, BusinessProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessProfile.
     * @param {BusinessProfileCreateArgs} args - Arguments to create a BusinessProfile.
     * @example
     * // Create one BusinessProfile
     * const BusinessProfile = await prisma.businessProfile.create({
     *   data: {
     *     // ... data to create a BusinessProfile
     *   }
     * })
     * 
     */
    create<T extends BusinessProfileCreateArgs>(args: SelectSubset<T, BusinessProfileCreateArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessProfiles.
     * @param {BusinessProfileCreateManyArgs} args - Arguments to create many BusinessProfiles.
     * @example
     * // Create many BusinessProfiles
     * const businessProfile = await prisma.businessProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessProfileCreateManyArgs>(args?: SelectSubset<T, BusinessProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessProfiles and returns the data saved in the database.
     * @param {BusinessProfileCreateManyAndReturnArgs} args - Arguments to create many BusinessProfiles.
     * @example
     * // Create many BusinessProfiles
     * const businessProfile = await prisma.businessProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessProfiles and only return the `id`
     * const businessProfileWithIdOnly = await prisma.businessProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessProfile.
     * @param {BusinessProfileDeleteArgs} args - Arguments to delete one BusinessProfile.
     * @example
     * // Delete one BusinessProfile
     * const BusinessProfile = await prisma.businessProfile.delete({
     *   where: {
     *     // ... filter to delete one BusinessProfile
     *   }
     * })
     * 
     */
    delete<T extends BusinessProfileDeleteArgs>(args: SelectSubset<T, BusinessProfileDeleteArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessProfile.
     * @param {BusinessProfileUpdateArgs} args - Arguments to update one BusinessProfile.
     * @example
     * // Update one BusinessProfile
     * const businessProfile = await prisma.businessProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessProfileUpdateArgs>(args: SelectSubset<T, BusinessProfileUpdateArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessProfiles.
     * @param {BusinessProfileDeleteManyArgs} args - Arguments to filter BusinessProfiles to delete.
     * @example
     * // Delete a few BusinessProfiles
     * const { count } = await prisma.businessProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessProfileDeleteManyArgs>(args?: SelectSubset<T, BusinessProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessProfiles
     * const businessProfile = await prisma.businessProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessProfileUpdateManyArgs>(args: SelectSubset<T, BusinessProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessProfiles and returns the data updated in the database.
     * @param {BusinessProfileUpdateManyAndReturnArgs} args - Arguments to update many BusinessProfiles.
     * @example
     * // Update many BusinessProfiles
     * const businessProfile = await prisma.businessProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessProfiles and only return the `id`
     * const businessProfileWithIdOnly = await prisma.businessProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessProfile.
     * @param {BusinessProfileUpsertArgs} args - Arguments to update or create a BusinessProfile.
     * @example
     * // Update or create a BusinessProfile
     * const businessProfile = await prisma.businessProfile.upsert({
     *   create: {
     *     // ... data to create a BusinessProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessProfile we want to update
     *   }
     * })
     */
    upsert<T extends BusinessProfileUpsertArgs>(args: SelectSubset<T, BusinessProfileUpsertArgs<ExtArgs>>): Prisma__BusinessProfileClient<$Result.GetResult<Prisma.$BusinessProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileCountArgs} args - Arguments to filter BusinessProfiles to count.
     * @example
     * // Count the number of BusinessProfiles
     * const count = await prisma.businessProfile.count({
     *   where: {
     *     // ... the filter for the BusinessProfiles we want to count
     *   }
     * })
    **/
    count<T extends BusinessProfileCountArgs>(
      args?: Subset<T, BusinessProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessProfileAggregateArgs>(args: Subset<T, BusinessProfileAggregateArgs>): Prisma.PrismaPromise<GetBusinessProfileAggregateType<T>>

    /**
     * Group by BusinessProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessProfileGroupByArgs['orderBy'] }
        : { orderBy?: BusinessProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessProfile model
   */
  readonly fields: BusinessProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessProfile model
   */
  interface BusinessProfileFieldRefs {
    readonly id: FieldRef<"BusinessProfile", 'String'>
    readonly businessName: FieldRef<"BusinessProfile", 'String'>
    readonly dbaName: FieldRef<"BusinessProfile", 'String'>
    readonly ein: FieldRef<"BusinessProfile", 'String'>
    readonly entityType: FieldRef<"BusinessProfile", 'String'>
    readonly industryType: FieldRef<"BusinessProfile", 'String'>
    readonly dateEstablished: FieldRef<"BusinessProfile", 'String'>
    readonly businessAddress: FieldRef<"BusinessProfile", 'Json'>
    readonly mailingAddress: FieldRef<"BusinessProfile", 'Json'>
    readonly businessPhone: FieldRef<"BusinessProfile", 'String'>
    readonly businessEmail: FieldRef<"BusinessProfile", 'String'>
    readonly website: FieldRef<"BusinessProfile", 'String'>
    readonly description: FieldRef<"BusinessProfile", 'String'>
    readonly isCashIntensive: FieldRef<"BusinessProfile", 'Boolean'>
    readonly monthlyTransactionVolume: FieldRef<"BusinessProfile", 'Float'>
    readonly monthlyTransactionCount: FieldRef<"BusinessProfile", 'Int'>
    readonly expectedBalance: FieldRef<"BusinessProfile", 'Float'>
    readonly applicationId: FieldRef<"BusinessProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BusinessProfile findUnique
   */
  export type BusinessProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter, which BusinessProfile to fetch.
     */
    where: BusinessProfileWhereUniqueInput
  }

  /**
   * BusinessProfile findUniqueOrThrow
   */
  export type BusinessProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter, which BusinessProfile to fetch.
     */
    where: BusinessProfileWhereUniqueInput
  }

  /**
   * BusinessProfile findFirst
   */
  export type BusinessProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter, which BusinessProfile to fetch.
     */
    where?: BusinessProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessProfiles to fetch.
     */
    orderBy?: BusinessProfileOrderByWithRelationInput | BusinessProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessProfiles.
     */
    cursor?: BusinessProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessProfiles.
     */
    distinct?: BusinessProfileScalarFieldEnum | BusinessProfileScalarFieldEnum[]
  }

  /**
   * BusinessProfile findFirstOrThrow
   */
  export type BusinessProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter, which BusinessProfile to fetch.
     */
    where?: BusinessProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessProfiles to fetch.
     */
    orderBy?: BusinessProfileOrderByWithRelationInput | BusinessProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessProfiles.
     */
    cursor?: BusinessProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessProfiles.
     */
    distinct?: BusinessProfileScalarFieldEnum | BusinessProfileScalarFieldEnum[]
  }

  /**
   * BusinessProfile findMany
   */
  export type BusinessProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter, which BusinessProfiles to fetch.
     */
    where?: BusinessProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessProfiles to fetch.
     */
    orderBy?: BusinessProfileOrderByWithRelationInput | BusinessProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessProfiles.
     */
    cursor?: BusinessProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessProfiles.
     */
    skip?: number
    distinct?: BusinessProfileScalarFieldEnum | BusinessProfileScalarFieldEnum[]
  }

  /**
   * BusinessProfile create
   */
  export type BusinessProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessProfile.
     */
    data: XOR<BusinessProfileCreateInput, BusinessProfileUncheckedCreateInput>
  }

  /**
   * BusinessProfile createMany
   */
  export type BusinessProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessProfiles.
     */
    data: BusinessProfileCreateManyInput | BusinessProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessProfile createManyAndReturn
   */
  export type BusinessProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessProfiles.
     */
    data: BusinessProfileCreateManyInput | BusinessProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessProfile update
   */
  export type BusinessProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessProfile.
     */
    data: XOR<BusinessProfileUpdateInput, BusinessProfileUncheckedUpdateInput>
    /**
     * Choose, which BusinessProfile to update.
     */
    where: BusinessProfileWhereUniqueInput
  }

  /**
   * BusinessProfile updateMany
   */
  export type BusinessProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessProfiles.
     */
    data: XOR<BusinessProfileUpdateManyMutationInput, BusinessProfileUncheckedUpdateManyInput>
    /**
     * Filter which BusinessProfiles to update
     */
    where?: BusinessProfileWhereInput
    /**
     * Limit how many BusinessProfiles to update.
     */
    limit?: number
  }

  /**
   * BusinessProfile updateManyAndReturn
   */
  export type BusinessProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * The data used to update BusinessProfiles.
     */
    data: XOR<BusinessProfileUpdateManyMutationInput, BusinessProfileUncheckedUpdateManyInput>
    /**
     * Filter which BusinessProfiles to update
     */
    where?: BusinessProfileWhereInput
    /**
     * Limit how many BusinessProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessProfile upsert
   */
  export type BusinessProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessProfile to update in case it exists.
     */
    where: BusinessProfileWhereUniqueInput
    /**
     * In case the BusinessProfile found by the `where` argument doesn't exist, create a new BusinessProfile with this data.
     */
    create: XOR<BusinessProfileCreateInput, BusinessProfileUncheckedCreateInput>
    /**
     * In case the BusinessProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessProfileUpdateInput, BusinessProfileUncheckedUpdateInput>
  }

  /**
   * BusinessProfile delete
   */
  export type BusinessProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
    /**
     * Filter which BusinessProfile to delete.
     */
    where: BusinessProfileWhereUniqueInput
  }

  /**
   * BusinessProfile deleteMany
   */
  export type BusinessProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessProfiles to delete
     */
    where?: BusinessProfileWhereInput
    /**
     * Limit how many BusinessProfiles to delete.
     */
    limit?: number
  }

  /**
   * BusinessProfile without action
   */
  export type BusinessProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessProfile
     */
    select?: BusinessProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessProfile
     */
    omit?: BusinessProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessProfileInclude<ExtArgs> | null
  }


  /**
   * Model FinancialProfile
   */

  export type AggregateFinancialProfile = {
    _count: FinancialProfileCountAggregateOutputType | null
    _avg: FinancialProfileAvgAggregateOutputType | null
    _sum: FinancialProfileSumAggregateOutputType | null
    _min: FinancialProfileMinAggregateOutputType | null
    _max: FinancialProfileMaxAggregateOutputType | null
  }

  export type FinancialProfileAvgAggregateOutputType = {
    annualIncome: number | null
    assets: number | null
    liabilities: number | null
  }

  export type FinancialProfileSumAggregateOutputType = {
    annualIncome: number | null
    assets: number | null
    liabilities: number | null
  }

  export type FinancialProfileMinAggregateOutputType = {
    id: string | null
    annualIncome: number | null
    assets: number | null
    liabilities: number | null
    applicationId: string | null
  }

  export type FinancialProfileMaxAggregateOutputType = {
    id: string | null
    annualIncome: number | null
    assets: number | null
    liabilities: number | null
    applicationId: string | null
  }

  export type FinancialProfileCountAggregateOutputType = {
    id: number
    annualIncome: number
    incomeSource: number
    employmentInfo: number
    assets: number
    liabilities: number
    bankingRelationships: number
    accountActivities: number
    applicationId: number
    _all: number
  }


  export type FinancialProfileAvgAggregateInputType = {
    annualIncome?: true
    assets?: true
    liabilities?: true
  }

  export type FinancialProfileSumAggregateInputType = {
    annualIncome?: true
    assets?: true
    liabilities?: true
  }

  export type FinancialProfileMinAggregateInputType = {
    id?: true
    annualIncome?: true
    assets?: true
    liabilities?: true
    applicationId?: true
  }

  export type FinancialProfileMaxAggregateInputType = {
    id?: true
    annualIncome?: true
    assets?: true
    liabilities?: true
    applicationId?: true
  }

  export type FinancialProfileCountAggregateInputType = {
    id?: true
    annualIncome?: true
    incomeSource?: true
    employmentInfo?: true
    assets?: true
    liabilities?: true
    bankingRelationships?: true
    accountActivities?: true
    applicationId?: true
    _all?: true
  }

  export type FinancialProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialProfile to aggregate.
     */
    where?: FinancialProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialProfiles to fetch.
     */
    orderBy?: FinancialProfileOrderByWithRelationInput | FinancialProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialProfiles
    **/
    _count?: true | FinancialProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialProfileMaxAggregateInputType
  }

  export type GetFinancialProfileAggregateType<T extends FinancialProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialProfile[P]>
      : GetScalarType<T[P], AggregateFinancialProfile[P]>
  }




  export type FinancialProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialProfileWhereInput
    orderBy?: FinancialProfileOrderByWithAggregationInput | FinancialProfileOrderByWithAggregationInput[]
    by: FinancialProfileScalarFieldEnum[] | FinancialProfileScalarFieldEnum
    having?: FinancialProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialProfileCountAggregateInputType | true
    _avg?: FinancialProfileAvgAggregateInputType
    _sum?: FinancialProfileSumAggregateInputType
    _min?: FinancialProfileMinAggregateInputType
    _max?: FinancialProfileMaxAggregateInputType
  }

  export type FinancialProfileGroupByOutputType = {
    id: string
    annualIncome: number
    incomeSource: string[]
    employmentInfo: JsonValue | null
    assets: number
    liabilities: number
    bankingRelationships: JsonValue[]
    accountActivities: JsonValue[]
    applicationId: string
    _count: FinancialProfileCountAggregateOutputType | null
    _avg: FinancialProfileAvgAggregateOutputType | null
    _sum: FinancialProfileSumAggregateOutputType | null
    _min: FinancialProfileMinAggregateOutputType | null
    _max: FinancialProfileMaxAggregateOutputType | null
  }

  type GetFinancialProfileGroupByPayload<T extends FinancialProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialProfileGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialProfileGroupByOutputType[P]>
        }
      >
    >


  export type FinancialProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    annualIncome?: boolean
    incomeSource?: boolean
    employmentInfo?: boolean
    assets?: boolean
    liabilities?: boolean
    bankingRelationships?: boolean
    accountActivities?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialProfile"]>

  export type FinancialProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    annualIncome?: boolean
    incomeSource?: boolean
    employmentInfo?: boolean
    assets?: boolean
    liabilities?: boolean
    bankingRelationships?: boolean
    accountActivities?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialProfile"]>

  export type FinancialProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    annualIncome?: boolean
    incomeSource?: boolean
    employmentInfo?: boolean
    assets?: boolean
    liabilities?: boolean
    bankingRelationships?: boolean
    accountActivities?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialProfile"]>

  export type FinancialProfileSelectScalar = {
    id?: boolean
    annualIncome?: boolean
    incomeSource?: boolean
    employmentInfo?: boolean
    assets?: boolean
    liabilities?: boolean
    bankingRelationships?: boolean
    accountActivities?: boolean
    applicationId?: boolean
  }

  export type FinancialProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "annualIncome" | "incomeSource" | "employmentInfo" | "assets" | "liabilities" | "bankingRelationships" | "accountActivities" | "applicationId", ExtArgs["result"]["financialProfile"]>
  export type FinancialProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type FinancialProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type FinancialProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $FinancialProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialProfile"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      annualIncome: number
      incomeSource: string[]
      employmentInfo: Prisma.JsonValue | null
      assets: number
      liabilities: number
      bankingRelationships: Prisma.JsonValue[]
      accountActivities: Prisma.JsonValue[]
      applicationId: string
    }, ExtArgs["result"]["financialProfile"]>
    composites: {}
  }

  type FinancialProfileGetPayload<S extends boolean | null | undefined | FinancialProfileDefaultArgs> = $Result.GetResult<Prisma.$FinancialProfilePayload, S>

  type FinancialProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialProfileCountAggregateInputType | true
    }

  export interface FinancialProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialProfile'], meta: { name: 'FinancialProfile' } }
    /**
     * Find zero or one FinancialProfile that matches the filter.
     * @param {FinancialProfileFindUniqueArgs} args - Arguments to find a FinancialProfile
     * @example
     * // Get one FinancialProfile
     * const financialProfile = await prisma.financialProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialProfileFindUniqueArgs>(args: SelectSubset<T, FinancialProfileFindUniqueArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FinancialProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialProfileFindUniqueOrThrowArgs} args - Arguments to find a FinancialProfile
     * @example
     * // Get one FinancialProfile
     * const financialProfile = await prisma.financialProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileFindFirstArgs} args - Arguments to find a FinancialProfile
     * @example
     * // Get one FinancialProfile
     * const financialProfile = await prisma.financialProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialProfileFindFirstArgs>(args?: SelectSubset<T, FinancialProfileFindFirstArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileFindFirstOrThrowArgs} args - Arguments to find a FinancialProfile
     * @example
     * // Get one FinancialProfile
     * const financialProfile = await prisma.financialProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FinancialProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialProfiles
     * const financialProfiles = await prisma.financialProfile.findMany()
     * 
     * // Get first 10 FinancialProfiles
     * const financialProfiles = await prisma.financialProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialProfileWithIdOnly = await prisma.financialProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialProfileFindManyArgs>(args?: SelectSubset<T, FinancialProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FinancialProfile.
     * @param {FinancialProfileCreateArgs} args - Arguments to create a FinancialProfile.
     * @example
     * // Create one FinancialProfile
     * const FinancialProfile = await prisma.financialProfile.create({
     *   data: {
     *     // ... data to create a FinancialProfile
     *   }
     * })
     * 
     */
    create<T extends FinancialProfileCreateArgs>(args: SelectSubset<T, FinancialProfileCreateArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FinancialProfiles.
     * @param {FinancialProfileCreateManyArgs} args - Arguments to create many FinancialProfiles.
     * @example
     * // Create many FinancialProfiles
     * const financialProfile = await prisma.financialProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialProfileCreateManyArgs>(args?: SelectSubset<T, FinancialProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialProfiles and returns the data saved in the database.
     * @param {FinancialProfileCreateManyAndReturnArgs} args - Arguments to create many FinancialProfiles.
     * @example
     * // Create many FinancialProfiles
     * const financialProfile = await prisma.financialProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialProfiles and only return the `id`
     * const financialProfileWithIdOnly = await prisma.financialProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FinancialProfile.
     * @param {FinancialProfileDeleteArgs} args - Arguments to delete one FinancialProfile.
     * @example
     * // Delete one FinancialProfile
     * const FinancialProfile = await prisma.financialProfile.delete({
     *   where: {
     *     // ... filter to delete one FinancialProfile
     *   }
     * })
     * 
     */
    delete<T extends FinancialProfileDeleteArgs>(args: SelectSubset<T, FinancialProfileDeleteArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FinancialProfile.
     * @param {FinancialProfileUpdateArgs} args - Arguments to update one FinancialProfile.
     * @example
     * // Update one FinancialProfile
     * const financialProfile = await prisma.financialProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialProfileUpdateArgs>(args: SelectSubset<T, FinancialProfileUpdateArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FinancialProfiles.
     * @param {FinancialProfileDeleteManyArgs} args - Arguments to filter FinancialProfiles to delete.
     * @example
     * // Delete a few FinancialProfiles
     * const { count } = await prisma.financialProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialProfileDeleteManyArgs>(args?: SelectSubset<T, FinancialProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialProfiles
     * const financialProfile = await prisma.financialProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialProfileUpdateManyArgs>(args: SelectSubset<T, FinancialProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialProfiles and returns the data updated in the database.
     * @param {FinancialProfileUpdateManyAndReturnArgs} args - Arguments to update many FinancialProfiles.
     * @example
     * // Update many FinancialProfiles
     * const financialProfile = await prisma.financialProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialProfiles and only return the `id`
     * const financialProfileWithIdOnly = await prisma.financialProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FinancialProfile.
     * @param {FinancialProfileUpsertArgs} args - Arguments to update or create a FinancialProfile.
     * @example
     * // Update or create a FinancialProfile
     * const financialProfile = await prisma.financialProfile.upsert({
     *   create: {
     *     // ... data to create a FinancialProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialProfile we want to update
     *   }
     * })
     */
    upsert<T extends FinancialProfileUpsertArgs>(args: SelectSubset<T, FinancialProfileUpsertArgs<ExtArgs>>): Prisma__FinancialProfileClient<$Result.GetResult<Prisma.$FinancialProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FinancialProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileCountArgs} args - Arguments to filter FinancialProfiles to count.
     * @example
     * // Count the number of FinancialProfiles
     * const count = await prisma.financialProfile.count({
     *   where: {
     *     // ... the filter for the FinancialProfiles we want to count
     *   }
     * })
    **/
    count<T extends FinancialProfileCountArgs>(
      args?: Subset<T, FinancialProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialProfileAggregateArgs>(args: Subset<T, FinancialProfileAggregateArgs>): Prisma.PrismaPromise<GetFinancialProfileAggregateType<T>>

    /**
     * Group by FinancialProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialProfileGroupByArgs['orderBy'] }
        : { orderBy?: FinancialProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialProfile model
   */
  readonly fields: FinancialProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialProfile model
   */
  interface FinancialProfileFieldRefs {
    readonly id: FieldRef<"FinancialProfile", 'String'>
    readonly annualIncome: FieldRef<"FinancialProfile", 'Float'>
    readonly incomeSource: FieldRef<"FinancialProfile", 'String[]'>
    readonly employmentInfo: FieldRef<"FinancialProfile", 'Json'>
    readonly assets: FieldRef<"FinancialProfile", 'Float'>
    readonly liabilities: FieldRef<"FinancialProfile", 'Float'>
    readonly bankingRelationships: FieldRef<"FinancialProfile", 'Json[]'>
    readonly accountActivities: FieldRef<"FinancialProfile", 'Json[]'>
    readonly applicationId: FieldRef<"FinancialProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FinancialProfile findUnique
   */
  export type FinancialProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter, which FinancialProfile to fetch.
     */
    where: FinancialProfileWhereUniqueInput
  }

  /**
   * FinancialProfile findUniqueOrThrow
   */
  export type FinancialProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter, which FinancialProfile to fetch.
     */
    where: FinancialProfileWhereUniqueInput
  }

  /**
   * FinancialProfile findFirst
   */
  export type FinancialProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter, which FinancialProfile to fetch.
     */
    where?: FinancialProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialProfiles to fetch.
     */
    orderBy?: FinancialProfileOrderByWithRelationInput | FinancialProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialProfiles.
     */
    cursor?: FinancialProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialProfiles.
     */
    distinct?: FinancialProfileScalarFieldEnum | FinancialProfileScalarFieldEnum[]
  }

  /**
   * FinancialProfile findFirstOrThrow
   */
  export type FinancialProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter, which FinancialProfile to fetch.
     */
    where?: FinancialProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialProfiles to fetch.
     */
    orderBy?: FinancialProfileOrderByWithRelationInput | FinancialProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialProfiles.
     */
    cursor?: FinancialProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialProfiles.
     */
    distinct?: FinancialProfileScalarFieldEnum | FinancialProfileScalarFieldEnum[]
  }

  /**
   * FinancialProfile findMany
   */
  export type FinancialProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter, which FinancialProfiles to fetch.
     */
    where?: FinancialProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialProfiles to fetch.
     */
    orderBy?: FinancialProfileOrderByWithRelationInput | FinancialProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialProfiles.
     */
    cursor?: FinancialProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialProfiles.
     */
    skip?: number
    distinct?: FinancialProfileScalarFieldEnum | FinancialProfileScalarFieldEnum[]
  }

  /**
   * FinancialProfile create
   */
  export type FinancialProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialProfile.
     */
    data: XOR<FinancialProfileCreateInput, FinancialProfileUncheckedCreateInput>
  }

  /**
   * FinancialProfile createMany
   */
  export type FinancialProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialProfiles.
     */
    data: FinancialProfileCreateManyInput | FinancialProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialProfile createManyAndReturn
   */
  export type FinancialProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialProfiles.
     */
    data: FinancialProfileCreateManyInput | FinancialProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialProfile update
   */
  export type FinancialProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialProfile.
     */
    data: XOR<FinancialProfileUpdateInput, FinancialProfileUncheckedUpdateInput>
    /**
     * Choose, which FinancialProfile to update.
     */
    where: FinancialProfileWhereUniqueInput
  }

  /**
   * FinancialProfile updateMany
   */
  export type FinancialProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialProfiles.
     */
    data: XOR<FinancialProfileUpdateManyMutationInput, FinancialProfileUncheckedUpdateManyInput>
    /**
     * Filter which FinancialProfiles to update
     */
    where?: FinancialProfileWhereInput
    /**
     * Limit how many FinancialProfiles to update.
     */
    limit?: number
  }

  /**
   * FinancialProfile updateManyAndReturn
   */
  export type FinancialProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * The data used to update FinancialProfiles.
     */
    data: XOR<FinancialProfileUpdateManyMutationInput, FinancialProfileUncheckedUpdateManyInput>
    /**
     * Filter which FinancialProfiles to update
     */
    where?: FinancialProfileWhereInput
    /**
     * Limit how many FinancialProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialProfile upsert
   */
  export type FinancialProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialProfile to update in case it exists.
     */
    where: FinancialProfileWhereUniqueInput
    /**
     * In case the FinancialProfile found by the `where` argument doesn't exist, create a new FinancialProfile with this data.
     */
    create: XOR<FinancialProfileCreateInput, FinancialProfileUncheckedCreateInput>
    /**
     * In case the FinancialProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialProfileUpdateInput, FinancialProfileUncheckedUpdateInput>
  }

  /**
   * FinancialProfile delete
   */
  export type FinancialProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
    /**
     * Filter which FinancialProfile to delete.
     */
    where: FinancialProfileWhereUniqueInput
  }

  /**
   * FinancialProfile deleteMany
   */
  export type FinancialProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialProfiles to delete
     */
    where?: FinancialProfileWhereInput
    /**
     * Limit how many FinancialProfiles to delete.
     */
    limit?: number
  }

  /**
   * FinancialProfile without action
   */
  export type FinancialProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialProfile
     */
    select?: FinancialProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialProfile
     */
    omit?: FinancialProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialProfileInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    minimumBalance: number | null
    monthlyFee: number | null
    interestRate: number | null
  }

  export type ProductSumAggregateOutputType = {
    minimumBalance: number | null
    monthlyFee: number | null
    interestRate: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    description: string | null
    minimumBalance: number | null
    monthlyFee: number | null
    interestRate: number | null
    isActive: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    description: string | null
    minimumBalance: number | null
    monthlyFee: number | null
    interestRate: number | null
    isActive: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    type: number
    description: number
    features: number
    minimumBalance: number
    monthlyFee: number
    interestRate: number
    isActive: number
    eligibilityRules: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    minimumBalance?: true
    monthlyFee?: true
    interestRate?: true
  }

  export type ProductSumAggregateInputType = {
    minimumBalance?: true
    monthlyFee?: true
    interestRate?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    minimumBalance?: true
    monthlyFee?: true
    interestRate?: true
    isActive?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    minimumBalance?: true
    monthlyFee?: true
    interestRate?: true
    isActive?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    features?: true
    minimumBalance?: true
    monthlyFee?: true
    interestRate?: true
    isActive?: true
    eligibilityRules?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    type: string
    description: string
    features: string[]
    minimumBalance: number
    monthlyFee: number
    interestRate: number | null
    isActive: boolean
    eligibilityRules: JsonValue[]
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    features?: boolean
    minimumBalance?: boolean
    monthlyFee?: boolean
    interestRate?: boolean
    isActive?: boolean
    eligibilityRules?: boolean
    productSelections?: boolean | Product$productSelectionsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    features?: boolean
    minimumBalance?: boolean
    monthlyFee?: boolean
    interestRate?: boolean
    isActive?: boolean
    eligibilityRules?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    features?: boolean
    minimumBalance?: boolean
    monthlyFee?: boolean
    interestRate?: boolean
    isActive?: boolean
    eligibilityRules?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    features?: boolean
    minimumBalance?: boolean
    monthlyFee?: boolean
    interestRate?: boolean
    isActive?: boolean
    eligibilityRules?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "description" | "features" | "minimumBalance" | "monthlyFee" | "interestRate" | "isActive" | "eligibilityRules", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productSelections?: boolean | Product$productSelectionsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      productSelections: Prisma.$ProductSelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      description: string
      features: string[]
      minimumBalance: number
      monthlyFee: number
      interestRate: number | null
      isActive: boolean
      eligibilityRules: Prisma.JsonValue[]
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productSelections<T extends Product$productSelectionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$productSelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly type: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly features: FieldRef<"Product", 'String[]'>
    readonly minimumBalance: FieldRef<"Product", 'Float'>
    readonly monthlyFee: FieldRef<"Product", 'Float'>
    readonly interestRate: FieldRef<"Product", 'Float'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly eligibilityRules: FieldRef<"Product", 'Json[]'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.productSelections
   */
  export type Product$productSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    where?: ProductSelectionWhereInput
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    cursor?: ProductSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSelectionScalarFieldEnum | ProductSelectionScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductSelection
   */

  export type AggregateProductSelection = {
    _count: ProductSelectionCountAggregateOutputType | null
    _avg: ProductSelectionAvgAggregateOutputType | null
    _sum: ProductSelectionSumAggregateOutputType | null
    _min: ProductSelectionMinAggregateOutputType | null
    _max: ProductSelectionMaxAggregateOutputType | null
  }

  export type ProductSelectionAvgAggregateOutputType = {
    initialDeposit: number | null
  }

  export type ProductSelectionSumAggregateOutputType = {
    initialDeposit: number | null
  }

  export type ProductSelectionMinAggregateOutputType = {
    id: string | null
    initialDeposit: number | null
    applicationId: string | null
    productId: string | null
  }

  export type ProductSelectionMaxAggregateOutputType = {
    id: string | null
    initialDeposit: number | null
    applicationId: string | null
    productId: string | null
  }

  export type ProductSelectionCountAggregateOutputType = {
    id: number
    selectedFeatures: number
    initialDeposit: number
    applicationId: number
    productId: number
    _all: number
  }


  export type ProductSelectionAvgAggregateInputType = {
    initialDeposit?: true
  }

  export type ProductSelectionSumAggregateInputType = {
    initialDeposit?: true
  }

  export type ProductSelectionMinAggregateInputType = {
    id?: true
    initialDeposit?: true
    applicationId?: true
    productId?: true
  }

  export type ProductSelectionMaxAggregateInputType = {
    id?: true
    initialDeposit?: true
    applicationId?: true
    productId?: true
  }

  export type ProductSelectionCountAggregateInputType = {
    id?: true
    selectedFeatures?: true
    initialDeposit?: true
    applicationId?: true
    productId?: true
    _all?: true
  }

  export type ProductSelectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSelection to aggregate.
     */
    where?: ProductSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSelections to fetch.
     */
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSelections
    **/
    _count?: true | ProductSelectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductSelectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSelectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSelectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSelectionMaxAggregateInputType
  }

  export type GetProductSelectionAggregateType<T extends ProductSelectionAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSelection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSelection[P]>
      : GetScalarType<T[P], AggregateProductSelection[P]>
  }




  export type ProductSelectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSelectionWhereInput
    orderBy?: ProductSelectionOrderByWithAggregationInput | ProductSelectionOrderByWithAggregationInput[]
    by: ProductSelectionScalarFieldEnum[] | ProductSelectionScalarFieldEnum
    having?: ProductSelectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSelectionCountAggregateInputType | true
    _avg?: ProductSelectionAvgAggregateInputType
    _sum?: ProductSelectionSumAggregateInputType
    _min?: ProductSelectionMinAggregateInputType
    _max?: ProductSelectionMaxAggregateInputType
  }

  export type ProductSelectionGroupByOutputType = {
    id: string
    selectedFeatures: string[]
    initialDeposit: number | null
    applicationId: string
    productId: string
    _count: ProductSelectionCountAggregateOutputType | null
    _avg: ProductSelectionAvgAggregateOutputType | null
    _sum: ProductSelectionSumAggregateOutputType | null
    _min: ProductSelectionMinAggregateOutputType | null
    _max: ProductSelectionMaxAggregateOutputType | null
  }

  type GetProductSelectionGroupByPayload<T extends ProductSelectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductSelectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSelectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSelectionGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSelectionGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedFeatures?: boolean
    initialDeposit?: boolean
    applicationId?: boolean
    productId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSelection"]>

  export type ProductSelectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedFeatures?: boolean
    initialDeposit?: boolean
    applicationId?: boolean
    productId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSelection"]>

  export type ProductSelectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedFeatures?: boolean
    initialDeposit?: boolean
    applicationId?: boolean
    productId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSelection"]>

  export type ProductSelectionSelectScalar = {
    id?: boolean
    selectedFeatures?: boolean
    initialDeposit?: boolean
    applicationId?: boolean
    productId?: boolean
  }

  export type ProductSelectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "selectedFeatures" | "initialDeposit" | "applicationId" | "productId", ExtArgs["result"]["productSelection"]>
  export type ProductSelectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductSelectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductSelectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductSelectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductSelection"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      selectedFeatures: string[]
      initialDeposit: number | null
      applicationId: string
      productId: string
    }, ExtArgs["result"]["productSelection"]>
    composites: {}
  }

  type ProductSelectionGetPayload<S extends boolean | null | undefined | ProductSelectionDefaultArgs> = $Result.GetResult<Prisma.$ProductSelectionPayload, S>

  type ProductSelectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductSelectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductSelectionCountAggregateInputType | true
    }

  export interface ProductSelectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSelection'], meta: { name: 'ProductSelection' } }
    /**
     * Find zero or one ProductSelection that matches the filter.
     * @param {ProductSelectionFindUniqueArgs} args - Arguments to find a ProductSelection
     * @example
     * // Get one ProductSelection
     * const productSelection = await prisma.productSelection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductSelectionFindUniqueArgs>(args: SelectSubset<T, ProductSelectionFindUniqueArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductSelection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductSelectionFindUniqueOrThrowArgs} args - Arguments to find a ProductSelection
     * @example
     * // Get one ProductSelection
     * const productSelection = await prisma.productSelection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductSelectionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductSelectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSelection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionFindFirstArgs} args - Arguments to find a ProductSelection
     * @example
     * // Get one ProductSelection
     * const productSelection = await prisma.productSelection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductSelectionFindFirstArgs>(args?: SelectSubset<T, ProductSelectionFindFirstArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSelection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionFindFirstOrThrowArgs} args - Arguments to find a ProductSelection
     * @example
     * // Get one ProductSelection
     * const productSelection = await prisma.productSelection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductSelectionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductSelectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductSelections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSelections
     * const productSelections = await prisma.productSelection.findMany()
     * 
     * // Get first 10 ProductSelections
     * const productSelections = await prisma.productSelection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSelectionWithIdOnly = await prisma.productSelection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductSelectionFindManyArgs>(args?: SelectSubset<T, ProductSelectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductSelection.
     * @param {ProductSelectionCreateArgs} args - Arguments to create a ProductSelection.
     * @example
     * // Create one ProductSelection
     * const ProductSelection = await prisma.productSelection.create({
     *   data: {
     *     // ... data to create a ProductSelection
     *   }
     * })
     * 
     */
    create<T extends ProductSelectionCreateArgs>(args: SelectSubset<T, ProductSelectionCreateArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductSelections.
     * @param {ProductSelectionCreateManyArgs} args - Arguments to create many ProductSelections.
     * @example
     * // Create many ProductSelections
     * const productSelection = await prisma.productSelection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductSelectionCreateManyArgs>(args?: SelectSubset<T, ProductSelectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductSelections and returns the data saved in the database.
     * @param {ProductSelectionCreateManyAndReturnArgs} args - Arguments to create many ProductSelections.
     * @example
     * // Create many ProductSelections
     * const productSelection = await prisma.productSelection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductSelections and only return the `id`
     * const productSelectionWithIdOnly = await prisma.productSelection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductSelectionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductSelectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductSelection.
     * @param {ProductSelectionDeleteArgs} args - Arguments to delete one ProductSelection.
     * @example
     * // Delete one ProductSelection
     * const ProductSelection = await prisma.productSelection.delete({
     *   where: {
     *     // ... filter to delete one ProductSelection
     *   }
     * })
     * 
     */
    delete<T extends ProductSelectionDeleteArgs>(args: SelectSubset<T, ProductSelectionDeleteArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductSelection.
     * @param {ProductSelectionUpdateArgs} args - Arguments to update one ProductSelection.
     * @example
     * // Update one ProductSelection
     * const productSelection = await prisma.productSelection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductSelectionUpdateArgs>(args: SelectSubset<T, ProductSelectionUpdateArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductSelections.
     * @param {ProductSelectionDeleteManyArgs} args - Arguments to filter ProductSelections to delete.
     * @example
     * // Delete a few ProductSelections
     * const { count } = await prisma.productSelection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductSelectionDeleteManyArgs>(args?: SelectSubset<T, ProductSelectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSelections
     * const productSelection = await prisma.productSelection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductSelectionUpdateManyArgs>(args: SelectSubset<T, ProductSelectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSelections and returns the data updated in the database.
     * @param {ProductSelectionUpdateManyAndReturnArgs} args - Arguments to update many ProductSelections.
     * @example
     * // Update many ProductSelections
     * const productSelection = await prisma.productSelection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductSelections and only return the `id`
     * const productSelectionWithIdOnly = await prisma.productSelection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductSelectionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductSelectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductSelection.
     * @param {ProductSelectionUpsertArgs} args - Arguments to update or create a ProductSelection.
     * @example
     * // Update or create a ProductSelection
     * const productSelection = await prisma.productSelection.upsert({
     *   create: {
     *     // ... data to create a ProductSelection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSelection we want to update
     *   }
     * })
     */
    upsert<T extends ProductSelectionUpsertArgs>(args: SelectSubset<T, ProductSelectionUpsertArgs<ExtArgs>>): Prisma__ProductSelectionClient<$Result.GetResult<Prisma.$ProductSelectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionCountArgs} args - Arguments to filter ProductSelections to count.
     * @example
     * // Count the number of ProductSelections
     * const count = await prisma.productSelection.count({
     *   where: {
     *     // ... the filter for the ProductSelections we want to count
     *   }
     * })
    **/
    count<T extends ProductSelectionCountArgs>(
      args?: Subset<T, ProductSelectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSelectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSelectionAggregateArgs>(args: Subset<T, ProductSelectionAggregateArgs>): Prisma.PrismaPromise<GetProductSelectionAggregateType<T>>

    /**
     * Group by ProductSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSelectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSelectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSelectionGroupByArgs['orderBy'] }
        : { orderBy?: ProductSelectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSelectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSelectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductSelection model
   */
  readonly fields: ProductSelectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSelection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductSelectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductSelection model
   */
  interface ProductSelectionFieldRefs {
    readonly id: FieldRef<"ProductSelection", 'String'>
    readonly selectedFeatures: FieldRef<"ProductSelection", 'String[]'>
    readonly initialDeposit: FieldRef<"ProductSelection", 'Float'>
    readonly applicationId: FieldRef<"ProductSelection", 'String'>
    readonly productId: FieldRef<"ProductSelection", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductSelection findUnique
   */
  export type ProductSelectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSelection to fetch.
     */
    where: ProductSelectionWhereUniqueInput
  }

  /**
   * ProductSelection findUniqueOrThrow
   */
  export type ProductSelectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSelection to fetch.
     */
    where: ProductSelectionWhereUniqueInput
  }

  /**
   * ProductSelection findFirst
   */
  export type ProductSelectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSelection to fetch.
     */
    where?: ProductSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSelections to fetch.
     */
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSelections.
     */
    cursor?: ProductSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSelections.
     */
    distinct?: ProductSelectionScalarFieldEnum | ProductSelectionScalarFieldEnum[]
  }

  /**
   * ProductSelection findFirstOrThrow
   */
  export type ProductSelectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSelection to fetch.
     */
    where?: ProductSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSelections to fetch.
     */
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSelections.
     */
    cursor?: ProductSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSelections.
     */
    distinct?: ProductSelectionScalarFieldEnum | ProductSelectionScalarFieldEnum[]
  }

  /**
   * ProductSelection findMany
   */
  export type ProductSelectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSelections to fetch.
     */
    where?: ProductSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSelections to fetch.
     */
    orderBy?: ProductSelectionOrderByWithRelationInput | ProductSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSelections.
     */
    cursor?: ProductSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSelections.
     */
    skip?: number
    distinct?: ProductSelectionScalarFieldEnum | ProductSelectionScalarFieldEnum[]
  }

  /**
   * ProductSelection create
   */
  export type ProductSelectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductSelection.
     */
    data: XOR<ProductSelectionCreateInput, ProductSelectionUncheckedCreateInput>
  }

  /**
   * ProductSelection createMany
   */
  export type ProductSelectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductSelections.
     */
    data: ProductSelectionCreateManyInput | ProductSelectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductSelection createManyAndReturn
   */
  export type ProductSelectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * The data used to create many ProductSelections.
     */
    data: ProductSelectionCreateManyInput | ProductSelectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductSelection update
   */
  export type ProductSelectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductSelection.
     */
    data: XOR<ProductSelectionUpdateInput, ProductSelectionUncheckedUpdateInput>
    /**
     * Choose, which ProductSelection to update.
     */
    where: ProductSelectionWhereUniqueInput
  }

  /**
   * ProductSelection updateMany
   */
  export type ProductSelectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductSelections.
     */
    data: XOR<ProductSelectionUpdateManyMutationInput, ProductSelectionUncheckedUpdateManyInput>
    /**
     * Filter which ProductSelections to update
     */
    where?: ProductSelectionWhereInput
    /**
     * Limit how many ProductSelections to update.
     */
    limit?: number
  }

  /**
   * ProductSelection updateManyAndReturn
   */
  export type ProductSelectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * The data used to update ProductSelections.
     */
    data: XOR<ProductSelectionUpdateManyMutationInput, ProductSelectionUncheckedUpdateManyInput>
    /**
     * Filter which ProductSelections to update
     */
    where?: ProductSelectionWhereInput
    /**
     * Limit how many ProductSelections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductSelection upsert
   */
  export type ProductSelectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductSelection to update in case it exists.
     */
    where: ProductSelectionWhereUniqueInput
    /**
     * In case the ProductSelection found by the `where` argument doesn't exist, create a new ProductSelection with this data.
     */
    create: XOR<ProductSelectionCreateInput, ProductSelectionUncheckedCreateInput>
    /**
     * In case the ProductSelection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSelectionUpdateInput, ProductSelectionUncheckedUpdateInput>
  }

  /**
   * ProductSelection delete
   */
  export type ProductSelectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
    /**
     * Filter which ProductSelection to delete.
     */
    where: ProductSelectionWhereUniqueInput
  }

  /**
   * ProductSelection deleteMany
   */
  export type ProductSelectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSelections to delete
     */
    where?: ProductSelectionWhereInput
    /**
     * Limit how many ProductSelections to delete.
     */
    limit?: number
  }

  /**
   * ProductSelection without action
   */
  export type ProductSelectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSelection
     */
    select?: ProductSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSelection
     */
    omit?: ProductSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSelectionInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    type: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
    verificationStatus: string | null
    applicationId: string | null
    signerId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    type: string | null
    fileName: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
    verificationStatus: string | null
    applicationId: string | null
    signerId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    type: number
    fileName: number
    fileSize: number
    mimeType: number
    uploadedAt: number
    verificationStatus: number
    verificationDetails: number
    applicationId: number
    signerId: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    fileSize?: true
  }

  export type DocumentSumAggregateInputType = {
    fileSize?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    verificationStatus?: true
    applicationId?: true
    signerId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    verificationStatus?: true
    applicationId?: true
    signerId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    type?: true
    fileName?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    verificationStatus?: true
    verificationDetails?: true
    applicationId?: true
    signerId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt: Date
    verificationStatus: string
    verificationDetails: JsonValue | null
    applicationId: string
    signerId: string | null
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    verificationStatus?: boolean
    verificationDetails?: boolean
    applicationId?: boolean
    signerId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    verificationStatus?: boolean
    verificationDetails?: boolean
    applicationId?: boolean
    signerId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    verificationStatus?: boolean
    verificationDetails?: boolean
    applicationId?: boolean
    signerId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    type?: boolean
    fileName?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    verificationStatus?: boolean
    verificationDetails?: boolean
    applicationId?: boolean
    signerId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "fileName" | "fileSize" | "mimeType" | "uploadedAt" | "verificationStatus" | "verificationDetails" | "applicationId" | "signerId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    signer?: boolean | Document$signerArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      signer: Prisma.$AdditionalSignerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      fileName: string
      fileSize: number
      mimeType: string
      uploadedAt: Date
      verificationStatus: string
      verificationDetails: Prisma.JsonValue | null
      applicationId: string
      signerId: string | null
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    signer<T extends Document$signerArgs<ExtArgs> = {}>(args?: Subset<T, Document$signerArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'String'>
    readonly fileName: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly mimeType: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
    readonly verificationStatus: FieldRef<"Document", 'String'>
    readonly verificationDetails: FieldRef<"Document", 'Json'>
    readonly applicationId: FieldRef<"Document", 'String'>
    readonly signerId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.signer
   */
  export type Document$signerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    where?: AdditionalSignerWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model KYCVerification
   */

  export type AggregateKYCVerification = {
    _count: KYCVerificationCountAggregateOutputType | null
    _avg: KYCVerificationAvgAggregateOutputType | null
    _sum: KYCVerificationSumAggregateOutputType | null
    _min: KYCVerificationMinAggregateOutputType | null
    _max: KYCVerificationMaxAggregateOutputType | null
  }

  export type KYCVerificationAvgAggregateOutputType = {
    confidence: number | null
  }

  export type KYCVerificationSumAggregateOutputType = {
    confidence: number | null
  }

  export type KYCVerificationMinAggregateOutputType = {
    id: string | null
    status: string | null
    provider: string | null
    verificationId: string | null
    confidence: number | null
    verifiedAt: Date | null
    applicationId: string | null
  }

  export type KYCVerificationMaxAggregateOutputType = {
    id: string | null
    status: string | null
    provider: string | null
    verificationId: string | null
    confidence: number | null
    verifiedAt: Date | null
    applicationId: string | null
  }

  export type KYCVerificationCountAggregateOutputType = {
    id: number
    status: number
    provider: number
    verificationId: number
    confidence: number
    verifiedAt: number
    results: number
    applicationId: number
    _all: number
  }


  export type KYCVerificationAvgAggregateInputType = {
    confidence?: true
  }

  export type KYCVerificationSumAggregateInputType = {
    confidence?: true
  }

  export type KYCVerificationMinAggregateInputType = {
    id?: true
    status?: true
    provider?: true
    verificationId?: true
    confidence?: true
    verifiedAt?: true
    applicationId?: true
  }

  export type KYCVerificationMaxAggregateInputType = {
    id?: true
    status?: true
    provider?: true
    verificationId?: true
    confidence?: true
    verifiedAt?: true
    applicationId?: true
  }

  export type KYCVerificationCountAggregateInputType = {
    id?: true
    status?: true
    provider?: true
    verificationId?: true
    confidence?: true
    verifiedAt?: true
    results?: true
    applicationId?: true
    _all?: true
  }

  export type KYCVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCVerification to aggregate.
     */
    where?: KYCVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCVerifications to fetch.
     */
    orderBy?: KYCVerificationOrderByWithRelationInput | KYCVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KYCVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KYCVerifications
    **/
    _count?: true | KYCVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KYCVerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KYCVerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KYCVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KYCVerificationMaxAggregateInputType
  }

  export type GetKYCVerificationAggregateType<T extends KYCVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateKYCVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKYCVerification[P]>
      : GetScalarType<T[P], AggregateKYCVerification[P]>
  }




  export type KYCVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KYCVerificationWhereInput
    orderBy?: KYCVerificationOrderByWithAggregationInput | KYCVerificationOrderByWithAggregationInput[]
    by: KYCVerificationScalarFieldEnum[] | KYCVerificationScalarFieldEnum
    having?: KYCVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KYCVerificationCountAggregateInputType | true
    _avg?: KYCVerificationAvgAggregateInputType
    _sum?: KYCVerificationSumAggregateInputType
    _min?: KYCVerificationMinAggregateInputType
    _max?: KYCVerificationMaxAggregateInputType
  }

  export type KYCVerificationGroupByOutputType = {
    id: string
    status: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt: Date | null
    results: JsonValue
    applicationId: string
    _count: KYCVerificationCountAggregateOutputType | null
    _avg: KYCVerificationAvgAggregateOutputType | null
    _sum: KYCVerificationSumAggregateOutputType | null
    _min: KYCVerificationMinAggregateOutputType | null
    _max: KYCVerificationMaxAggregateOutputType | null
  }

  type GetKYCVerificationGroupByPayload<T extends KYCVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KYCVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KYCVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KYCVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], KYCVerificationGroupByOutputType[P]>
        }
      >
    >


  export type KYCVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    provider?: boolean
    verificationId?: boolean
    confidence?: boolean
    verifiedAt?: boolean
    results?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCVerification"]>

  export type KYCVerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    provider?: boolean
    verificationId?: boolean
    confidence?: boolean
    verifiedAt?: boolean
    results?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCVerification"]>

  export type KYCVerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    provider?: boolean
    verificationId?: boolean
    confidence?: boolean
    verifiedAt?: boolean
    results?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCVerification"]>

  export type KYCVerificationSelectScalar = {
    id?: boolean
    status?: boolean
    provider?: boolean
    verificationId?: boolean
    confidence?: boolean
    verifiedAt?: boolean
    results?: boolean
    applicationId?: boolean
  }

  export type KYCVerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "provider" | "verificationId" | "confidence" | "verifiedAt" | "results" | "applicationId", ExtArgs["result"]["kYCVerification"]>
  export type KYCVerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type KYCVerificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type KYCVerificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $KYCVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KYCVerification"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      provider: string
      verificationId: string
      confidence: number
      verifiedAt: Date | null
      results: Prisma.JsonValue
      applicationId: string
    }, ExtArgs["result"]["kYCVerification"]>
    composites: {}
  }

  type KYCVerificationGetPayload<S extends boolean | null | undefined | KYCVerificationDefaultArgs> = $Result.GetResult<Prisma.$KYCVerificationPayload, S>

  type KYCVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KYCVerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KYCVerificationCountAggregateInputType | true
    }

  export interface KYCVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KYCVerification'], meta: { name: 'KYCVerification' } }
    /**
     * Find zero or one KYCVerification that matches the filter.
     * @param {KYCVerificationFindUniqueArgs} args - Arguments to find a KYCVerification
     * @example
     * // Get one KYCVerification
     * const kYCVerification = await prisma.kYCVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KYCVerificationFindUniqueArgs>(args: SelectSubset<T, KYCVerificationFindUniqueArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KYCVerification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KYCVerificationFindUniqueOrThrowArgs} args - Arguments to find a KYCVerification
     * @example
     * // Get one KYCVerification
     * const kYCVerification = await prisma.kYCVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KYCVerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, KYCVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KYCVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationFindFirstArgs} args - Arguments to find a KYCVerification
     * @example
     * // Get one KYCVerification
     * const kYCVerification = await prisma.kYCVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KYCVerificationFindFirstArgs>(args?: SelectSubset<T, KYCVerificationFindFirstArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KYCVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationFindFirstOrThrowArgs} args - Arguments to find a KYCVerification
     * @example
     * // Get one KYCVerification
     * const kYCVerification = await prisma.kYCVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KYCVerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, KYCVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KYCVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KYCVerifications
     * const kYCVerifications = await prisma.kYCVerification.findMany()
     * 
     * // Get first 10 KYCVerifications
     * const kYCVerifications = await prisma.kYCVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kYCVerificationWithIdOnly = await prisma.kYCVerification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KYCVerificationFindManyArgs>(args?: SelectSubset<T, KYCVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KYCVerification.
     * @param {KYCVerificationCreateArgs} args - Arguments to create a KYCVerification.
     * @example
     * // Create one KYCVerification
     * const KYCVerification = await prisma.kYCVerification.create({
     *   data: {
     *     // ... data to create a KYCVerification
     *   }
     * })
     * 
     */
    create<T extends KYCVerificationCreateArgs>(args: SelectSubset<T, KYCVerificationCreateArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KYCVerifications.
     * @param {KYCVerificationCreateManyArgs} args - Arguments to create many KYCVerifications.
     * @example
     * // Create many KYCVerifications
     * const kYCVerification = await prisma.kYCVerification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KYCVerificationCreateManyArgs>(args?: SelectSubset<T, KYCVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KYCVerifications and returns the data saved in the database.
     * @param {KYCVerificationCreateManyAndReturnArgs} args - Arguments to create many KYCVerifications.
     * @example
     * // Create many KYCVerifications
     * const kYCVerification = await prisma.kYCVerification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KYCVerifications and only return the `id`
     * const kYCVerificationWithIdOnly = await prisma.kYCVerification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KYCVerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, KYCVerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KYCVerification.
     * @param {KYCVerificationDeleteArgs} args - Arguments to delete one KYCVerification.
     * @example
     * // Delete one KYCVerification
     * const KYCVerification = await prisma.kYCVerification.delete({
     *   where: {
     *     // ... filter to delete one KYCVerification
     *   }
     * })
     * 
     */
    delete<T extends KYCVerificationDeleteArgs>(args: SelectSubset<T, KYCVerificationDeleteArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KYCVerification.
     * @param {KYCVerificationUpdateArgs} args - Arguments to update one KYCVerification.
     * @example
     * // Update one KYCVerification
     * const kYCVerification = await prisma.kYCVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KYCVerificationUpdateArgs>(args: SelectSubset<T, KYCVerificationUpdateArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KYCVerifications.
     * @param {KYCVerificationDeleteManyArgs} args - Arguments to filter KYCVerifications to delete.
     * @example
     * // Delete a few KYCVerifications
     * const { count } = await prisma.kYCVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KYCVerificationDeleteManyArgs>(args?: SelectSubset<T, KYCVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KYCVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KYCVerifications
     * const kYCVerification = await prisma.kYCVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KYCVerificationUpdateManyArgs>(args: SelectSubset<T, KYCVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KYCVerifications and returns the data updated in the database.
     * @param {KYCVerificationUpdateManyAndReturnArgs} args - Arguments to update many KYCVerifications.
     * @example
     * // Update many KYCVerifications
     * const kYCVerification = await prisma.kYCVerification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KYCVerifications and only return the `id`
     * const kYCVerificationWithIdOnly = await prisma.kYCVerification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KYCVerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, KYCVerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KYCVerification.
     * @param {KYCVerificationUpsertArgs} args - Arguments to update or create a KYCVerification.
     * @example
     * // Update or create a KYCVerification
     * const kYCVerification = await prisma.kYCVerification.upsert({
     *   create: {
     *     // ... data to create a KYCVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KYCVerification we want to update
     *   }
     * })
     */
    upsert<T extends KYCVerificationUpsertArgs>(args: SelectSubset<T, KYCVerificationUpsertArgs<ExtArgs>>): Prisma__KYCVerificationClient<$Result.GetResult<Prisma.$KYCVerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KYCVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationCountArgs} args - Arguments to filter KYCVerifications to count.
     * @example
     * // Count the number of KYCVerifications
     * const count = await prisma.kYCVerification.count({
     *   where: {
     *     // ... the filter for the KYCVerifications we want to count
     *   }
     * })
    **/
    count<T extends KYCVerificationCountArgs>(
      args?: Subset<T, KYCVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KYCVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KYCVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KYCVerificationAggregateArgs>(args: Subset<T, KYCVerificationAggregateArgs>): Prisma.PrismaPromise<GetKYCVerificationAggregateType<T>>

    /**
     * Group by KYCVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KYCVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KYCVerificationGroupByArgs['orderBy'] }
        : { orderBy?: KYCVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KYCVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKYCVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KYCVerification model
   */
  readonly fields: KYCVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KYCVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KYCVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KYCVerification model
   */
  interface KYCVerificationFieldRefs {
    readonly id: FieldRef<"KYCVerification", 'String'>
    readonly status: FieldRef<"KYCVerification", 'String'>
    readonly provider: FieldRef<"KYCVerification", 'String'>
    readonly verificationId: FieldRef<"KYCVerification", 'String'>
    readonly confidence: FieldRef<"KYCVerification", 'Float'>
    readonly verifiedAt: FieldRef<"KYCVerification", 'DateTime'>
    readonly results: FieldRef<"KYCVerification", 'Json'>
    readonly applicationId: FieldRef<"KYCVerification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KYCVerification findUnique
   */
  export type KYCVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter, which KYCVerification to fetch.
     */
    where: KYCVerificationWhereUniqueInput
  }

  /**
   * KYCVerification findUniqueOrThrow
   */
  export type KYCVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter, which KYCVerification to fetch.
     */
    where: KYCVerificationWhereUniqueInput
  }

  /**
   * KYCVerification findFirst
   */
  export type KYCVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter, which KYCVerification to fetch.
     */
    where?: KYCVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCVerifications to fetch.
     */
    orderBy?: KYCVerificationOrderByWithRelationInput | KYCVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCVerifications.
     */
    cursor?: KYCVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCVerifications.
     */
    distinct?: KYCVerificationScalarFieldEnum | KYCVerificationScalarFieldEnum[]
  }

  /**
   * KYCVerification findFirstOrThrow
   */
  export type KYCVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter, which KYCVerification to fetch.
     */
    where?: KYCVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCVerifications to fetch.
     */
    orderBy?: KYCVerificationOrderByWithRelationInput | KYCVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCVerifications.
     */
    cursor?: KYCVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCVerifications.
     */
    distinct?: KYCVerificationScalarFieldEnum | KYCVerificationScalarFieldEnum[]
  }

  /**
   * KYCVerification findMany
   */
  export type KYCVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter, which KYCVerifications to fetch.
     */
    where?: KYCVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCVerifications to fetch.
     */
    orderBy?: KYCVerificationOrderByWithRelationInput | KYCVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KYCVerifications.
     */
    cursor?: KYCVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCVerifications.
     */
    skip?: number
    distinct?: KYCVerificationScalarFieldEnum | KYCVerificationScalarFieldEnum[]
  }

  /**
   * KYCVerification create
   */
  export type KYCVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a KYCVerification.
     */
    data: XOR<KYCVerificationCreateInput, KYCVerificationUncheckedCreateInput>
  }

  /**
   * KYCVerification createMany
   */
  export type KYCVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KYCVerifications.
     */
    data: KYCVerificationCreateManyInput | KYCVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KYCVerification createManyAndReturn
   */
  export type KYCVerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * The data used to create many KYCVerifications.
     */
    data: KYCVerificationCreateManyInput | KYCVerificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KYCVerification update
   */
  export type KYCVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a KYCVerification.
     */
    data: XOR<KYCVerificationUpdateInput, KYCVerificationUncheckedUpdateInput>
    /**
     * Choose, which KYCVerification to update.
     */
    where: KYCVerificationWhereUniqueInput
  }

  /**
   * KYCVerification updateMany
   */
  export type KYCVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KYCVerifications.
     */
    data: XOR<KYCVerificationUpdateManyMutationInput, KYCVerificationUncheckedUpdateManyInput>
    /**
     * Filter which KYCVerifications to update
     */
    where?: KYCVerificationWhereInput
    /**
     * Limit how many KYCVerifications to update.
     */
    limit?: number
  }

  /**
   * KYCVerification updateManyAndReturn
   */
  export type KYCVerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * The data used to update KYCVerifications.
     */
    data: XOR<KYCVerificationUpdateManyMutationInput, KYCVerificationUncheckedUpdateManyInput>
    /**
     * Filter which KYCVerifications to update
     */
    where?: KYCVerificationWhereInput
    /**
     * Limit how many KYCVerifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KYCVerification upsert
   */
  export type KYCVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the KYCVerification to update in case it exists.
     */
    where: KYCVerificationWhereUniqueInput
    /**
     * In case the KYCVerification found by the `where` argument doesn't exist, create a new KYCVerification with this data.
     */
    create: XOR<KYCVerificationCreateInput, KYCVerificationUncheckedCreateInput>
    /**
     * In case the KYCVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KYCVerificationUpdateInput, KYCVerificationUncheckedUpdateInput>
  }

  /**
   * KYCVerification delete
   */
  export type KYCVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
    /**
     * Filter which KYCVerification to delete.
     */
    where: KYCVerificationWhereUniqueInput
  }

  /**
   * KYCVerification deleteMany
   */
  export type KYCVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCVerifications to delete
     */
    where?: KYCVerificationWhereInput
    /**
     * Limit how many KYCVerifications to delete.
     */
    limit?: number
  }

  /**
   * KYCVerification without action
   */
  export type KYCVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCVerification
     */
    select?: KYCVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KYCVerification
     */
    omit?: KYCVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCVerificationInclude<ExtArgs> | null
  }


  /**
   * Model AdditionalSigner
   */

  export type AggregateAdditionalSigner = {
    _count: AdditionalSignerCountAggregateOutputType | null
    _avg: AdditionalSignerAvgAggregateOutputType | null
    _sum: AdditionalSignerSumAggregateOutputType | null
    _min: AdditionalSignerMinAggregateOutputType | null
    _max: AdditionalSignerMaxAggregateOutputType | null
  }

  export type AdditionalSignerAvgAggregateOutputType = {
    beneficialOwnershipPercentage: number | null
  }

  export type AdditionalSignerSumAggregateOutputType = {
    beneficialOwnershipPercentage: number | null
  }

  export type AdditionalSignerMinAggregateOutputType = {
    id: string | null
    role: string | null
    relationshipToBusiness: string | null
    beneficialOwnershipPercentage: number | null
    hasSigningAuthority: boolean | null
    kycStatus: string | null
    applicationId: string | null
  }

  export type AdditionalSignerMaxAggregateOutputType = {
    id: string | null
    role: string | null
    relationshipToBusiness: string | null
    beneficialOwnershipPercentage: number | null
    hasSigningAuthority: boolean | null
    kycStatus: string | null
    applicationId: string | null
  }

  export type AdditionalSignerCountAggregateOutputType = {
    id: number
    personalInfo: number
    role: number
    relationshipToBusiness: number
    beneficialOwnershipPercentage: number
    hasSigningAuthority: number
    kycStatus: number
    applicationId: number
    _all: number
  }


  export type AdditionalSignerAvgAggregateInputType = {
    beneficialOwnershipPercentage?: true
  }

  export type AdditionalSignerSumAggregateInputType = {
    beneficialOwnershipPercentage?: true
  }

  export type AdditionalSignerMinAggregateInputType = {
    id?: true
    role?: true
    relationshipToBusiness?: true
    beneficialOwnershipPercentage?: true
    hasSigningAuthority?: true
    kycStatus?: true
    applicationId?: true
  }

  export type AdditionalSignerMaxAggregateInputType = {
    id?: true
    role?: true
    relationshipToBusiness?: true
    beneficialOwnershipPercentage?: true
    hasSigningAuthority?: true
    kycStatus?: true
    applicationId?: true
  }

  export type AdditionalSignerCountAggregateInputType = {
    id?: true
    personalInfo?: true
    role?: true
    relationshipToBusiness?: true
    beneficialOwnershipPercentage?: true
    hasSigningAuthority?: true
    kycStatus?: true
    applicationId?: true
    _all?: true
  }

  export type AdditionalSignerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdditionalSigner to aggregate.
     */
    where?: AdditionalSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalSigners to fetch.
     */
    orderBy?: AdditionalSignerOrderByWithRelationInput | AdditionalSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdditionalSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdditionalSigners
    **/
    _count?: true | AdditionalSignerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdditionalSignerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdditionalSignerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdditionalSignerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdditionalSignerMaxAggregateInputType
  }

  export type GetAdditionalSignerAggregateType<T extends AdditionalSignerAggregateArgs> = {
        [P in keyof T & keyof AggregateAdditionalSigner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdditionalSigner[P]>
      : GetScalarType<T[P], AggregateAdditionalSigner[P]>
  }




  export type AdditionalSignerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdditionalSignerWhereInput
    orderBy?: AdditionalSignerOrderByWithAggregationInput | AdditionalSignerOrderByWithAggregationInput[]
    by: AdditionalSignerScalarFieldEnum[] | AdditionalSignerScalarFieldEnum
    having?: AdditionalSignerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdditionalSignerCountAggregateInputType | true
    _avg?: AdditionalSignerAvgAggregateInputType
    _sum?: AdditionalSignerSumAggregateInputType
    _min?: AdditionalSignerMinAggregateInputType
    _max?: AdditionalSignerMaxAggregateInputType
  }

  export type AdditionalSignerGroupByOutputType = {
    id: string
    personalInfo: JsonValue
    role: string
    relationshipToBusiness: string | null
    beneficialOwnershipPercentage: number | null
    hasSigningAuthority: boolean
    kycStatus: string
    applicationId: string
    _count: AdditionalSignerCountAggregateOutputType | null
    _avg: AdditionalSignerAvgAggregateOutputType | null
    _sum: AdditionalSignerSumAggregateOutputType | null
    _min: AdditionalSignerMinAggregateOutputType | null
    _max: AdditionalSignerMaxAggregateOutputType | null
  }

  type GetAdditionalSignerGroupByPayload<T extends AdditionalSignerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdditionalSignerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdditionalSignerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdditionalSignerGroupByOutputType[P]>
            : GetScalarType<T[P], AdditionalSignerGroupByOutputType[P]>
        }
      >
    >


  export type AdditionalSignerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personalInfo?: boolean
    role?: boolean
    relationshipToBusiness?: boolean
    beneficialOwnershipPercentage?: boolean
    hasSigningAuthority?: boolean
    kycStatus?: boolean
    applicationId?: boolean
    documents?: boolean | AdditionalSigner$documentsArgs<ExtArgs>
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    _count?: boolean | AdditionalSignerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["additionalSigner"]>

  export type AdditionalSignerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personalInfo?: boolean
    role?: boolean
    relationshipToBusiness?: boolean
    beneficialOwnershipPercentage?: boolean
    hasSigningAuthority?: boolean
    kycStatus?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["additionalSigner"]>

  export type AdditionalSignerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personalInfo?: boolean
    role?: boolean
    relationshipToBusiness?: boolean
    beneficialOwnershipPercentage?: boolean
    hasSigningAuthority?: boolean
    kycStatus?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["additionalSigner"]>

  export type AdditionalSignerSelectScalar = {
    id?: boolean
    personalInfo?: boolean
    role?: boolean
    relationshipToBusiness?: boolean
    beneficialOwnershipPercentage?: boolean
    hasSigningAuthority?: boolean
    kycStatus?: boolean
    applicationId?: boolean
  }

  export type AdditionalSignerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personalInfo" | "role" | "relationshipToBusiness" | "beneficialOwnershipPercentage" | "hasSigningAuthority" | "kycStatus" | "applicationId", ExtArgs["result"]["additionalSigner"]>
  export type AdditionalSignerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | AdditionalSigner$documentsArgs<ExtArgs>
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    _count?: boolean | AdditionalSignerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdditionalSignerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type AdditionalSignerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $AdditionalSignerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdditionalSigner"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      personalInfo: Prisma.JsonValue
      role: string
      relationshipToBusiness: string | null
      beneficialOwnershipPercentage: number | null
      hasSigningAuthority: boolean
      kycStatus: string
      applicationId: string
    }, ExtArgs["result"]["additionalSigner"]>
    composites: {}
  }

  type AdditionalSignerGetPayload<S extends boolean | null | undefined | AdditionalSignerDefaultArgs> = $Result.GetResult<Prisma.$AdditionalSignerPayload, S>

  type AdditionalSignerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdditionalSignerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdditionalSignerCountAggregateInputType | true
    }

  export interface AdditionalSignerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdditionalSigner'], meta: { name: 'AdditionalSigner' } }
    /**
     * Find zero or one AdditionalSigner that matches the filter.
     * @param {AdditionalSignerFindUniqueArgs} args - Arguments to find a AdditionalSigner
     * @example
     * // Get one AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdditionalSignerFindUniqueArgs>(args: SelectSubset<T, AdditionalSignerFindUniqueArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdditionalSigner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdditionalSignerFindUniqueOrThrowArgs} args - Arguments to find a AdditionalSigner
     * @example
     * // Get one AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdditionalSignerFindUniqueOrThrowArgs>(args: SelectSubset<T, AdditionalSignerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdditionalSigner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerFindFirstArgs} args - Arguments to find a AdditionalSigner
     * @example
     * // Get one AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdditionalSignerFindFirstArgs>(args?: SelectSubset<T, AdditionalSignerFindFirstArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdditionalSigner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerFindFirstOrThrowArgs} args - Arguments to find a AdditionalSigner
     * @example
     * // Get one AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdditionalSignerFindFirstOrThrowArgs>(args?: SelectSubset<T, AdditionalSignerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdditionalSigners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdditionalSigners
     * const additionalSigners = await prisma.additionalSigner.findMany()
     * 
     * // Get first 10 AdditionalSigners
     * const additionalSigners = await prisma.additionalSigner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const additionalSignerWithIdOnly = await prisma.additionalSigner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdditionalSignerFindManyArgs>(args?: SelectSubset<T, AdditionalSignerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdditionalSigner.
     * @param {AdditionalSignerCreateArgs} args - Arguments to create a AdditionalSigner.
     * @example
     * // Create one AdditionalSigner
     * const AdditionalSigner = await prisma.additionalSigner.create({
     *   data: {
     *     // ... data to create a AdditionalSigner
     *   }
     * })
     * 
     */
    create<T extends AdditionalSignerCreateArgs>(args: SelectSubset<T, AdditionalSignerCreateArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdditionalSigners.
     * @param {AdditionalSignerCreateManyArgs} args - Arguments to create many AdditionalSigners.
     * @example
     * // Create many AdditionalSigners
     * const additionalSigner = await prisma.additionalSigner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdditionalSignerCreateManyArgs>(args?: SelectSubset<T, AdditionalSignerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdditionalSigners and returns the data saved in the database.
     * @param {AdditionalSignerCreateManyAndReturnArgs} args - Arguments to create many AdditionalSigners.
     * @example
     * // Create many AdditionalSigners
     * const additionalSigner = await prisma.additionalSigner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdditionalSigners and only return the `id`
     * const additionalSignerWithIdOnly = await prisma.additionalSigner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdditionalSignerCreateManyAndReturnArgs>(args?: SelectSubset<T, AdditionalSignerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdditionalSigner.
     * @param {AdditionalSignerDeleteArgs} args - Arguments to delete one AdditionalSigner.
     * @example
     * // Delete one AdditionalSigner
     * const AdditionalSigner = await prisma.additionalSigner.delete({
     *   where: {
     *     // ... filter to delete one AdditionalSigner
     *   }
     * })
     * 
     */
    delete<T extends AdditionalSignerDeleteArgs>(args: SelectSubset<T, AdditionalSignerDeleteArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdditionalSigner.
     * @param {AdditionalSignerUpdateArgs} args - Arguments to update one AdditionalSigner.
     * @example
     * // Update one AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdditionalSignerUpdateArgs>(args: SelectSubset<T, AdditionalSignerUpdateArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdditionalSigners.
     * @param {AdditionalSignerDeleteManyArgs} args - Arguments to filter AdditionalSigners to delete.
     * @example
     * // Delete a few AdditionalSigners
     * const { count } = await prisma.additionalSigner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdditionalSignerDeleteManyArgs>(args?: SelectSubset<T, AdditionalSignerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdditionalSigners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdditionalSigners
     * const additionalSigner = await prisma.additionalSigner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdditionalSignerUpdateManyArgs>(args: SelectSubset<T, AdditionalSignerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdditionalSigners and returns the data updated in the database.
     * @param {AdditionalSignerUpdateManyAndReturnArgs} args - Arguments to update many AdditionalSigners.
     * @example
     * // Update many AdditionalSigners
     * const additionalSigner = await prisma.additionalSigner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdditionalSigners and only return the `id`
     * const additionalSignerWithIdOnly = await prisma.additionalSigner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdditionalSignerUpdateManyAndReturnArgs>(args: SelectSubset<T, AdditionalSignerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdditionalSigner.
     * @param {AdditionalSignerUpsertArgs} args - Arguments to update or create a AdditionalSigner.
     * @example
     * // Update or create a AdditionalSigner
     * const additionalSigner = await prisma.additionalSigner.upsert({
     *   create: {
     *     // ... data to create a AdditionalSigner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdditionalSigner we want to update
     *   }
     * })
     */
    upsert<T extends AdditionalSignerUpsertArgs>(args: SelectSubset<T, AdditionalSignerUpsertArgs<ExtArgs>>): Prisma__AdditionalSignerClient<$Result.GetResult<Prisma.$AdditionalSignerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdditionalSigners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerCountArgs} args - Arguments to filter AdditionalSigners to count.
     * @example
     * // Count the number of AdditionalSigners
     * const count = await prisma.additionalSigner.count({
     *   where: {
     *     // ... the filter for the AdditionalSigners we want to count
     *   }
     * })
    **/
    count<T extends AdditionalSignerCountArgs>(
      args?: Subset<T, AdditionalSignerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdditionalSignerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdditionalSigner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdditionalSignerAggregateArgs>(args: Subset<T, AdditionalSignerAggregateArgs>): Prisma.PrismaPromise<GetAdditionalSignerAggregateType<T>>

    /**
     * Group by AdditionalSigner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalSignerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdditionalSignerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdditionalSignerGroupByArgs['orderBy'] }
        : { orderBy?: AdditionalSignerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdditionalSignerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdditionalSignerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdditionalSigner model
   */
  readonly fields: AdditionalSignerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdditionalSigner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdditionalSignerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends AdditionalSigner$documentsArgs<ExtArgs> = {}>(args?: Subset<T, AdditionalSigner$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdditionalSigner model
   */
  interface AdditionalSignerFieldRefs {
    readonly id: FieldRef<"AdditionalSigner", 'String'>
    readonly personalInfo: FieldRef<"AdditionalSigner", 'Json'>
    readonly role: FieldRef<"AdditionalSigner", 'String'>
    readonly relationshipToBusiness: FieldRef<"AdditionalSigner", 'String'>
    readonly beneficialOwnershipPercentage: FieldRef<"AdditionalSigner", 'Float'>
    readonly hasSigningAuthority: FieldRef<"AdditionalSigner", 'Boolean'>
    readonly kycStatus: FieldRef<"AdditionalSigner", 'String'>
    readonly applicationId: FieldRef<"AdditionalSigner", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdditionalSigner findUnique
   */
  export type AdditionalSignerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalSigner to fetch.
     */
    where: AdditionalSignerWhereUniqueInput
  }

  /**
   * AdditionalSigner findUniqueOrThrow
   */
  export type AdditionalSignerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalSigner to fetch.
     */
    where: AdditionalSignerWhereUniqueInput
  }

  /**
   * AdditionalSigner findFirst
   */
  export type AdditionalSignerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalSigner to fetch.
     */
    where?: AdditionalSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalSigners to fetch.
     */
    orderBy?: AdditionalSignerOrderByWithRelationInput | AdditionalSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdditionalSigners.
     */
    cursor?: AdditionalSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdditionalSigners.
     */
    distinct?: AdditionalSignerScalarFieldEnum | AdditionalSignerScalarFieldEnum[]
  }

  /**
   * AdditionalSigner findFirstOrThrow
   */
  export type AdditionalSignerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalSigner to fetch.
     */
    where?: AdditionalSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalSigners to fetch.
     */
    orderBy?: AdditionalSignerOrderByWithRelationInput | AdditionalSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdditionalSigners.
     */
    cursor?: AdditionalSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalSigners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdditionalSigners.
     */
    distinct?: AdditionalSignerScalarFieldEnum | AdditionalSignerScalarFieldEnum[]
  }

  /**
   * AdditionalSigner findMany
   */
  export type AdditionalSignerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalSigners to fetch.
     */
    where?: AdditionalSignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalSigners to fetch.
     */
    orderBy?: AdditionalSignerOrderByWithRelationInput | AdditionalSignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdditionalSigners.
     */
    cursor?: AdditionalSignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalSigners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalSigners.
     */
    skip?: number
    distinct?: AdditionalSignerScalarFieldEnum | AdditionalSignerScalarFieldEnum[]
  }

  /**
   * AdditionalSigner create
   */
  export type AdditionalSignerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * The data needed to create a AdditionalSigner.
     */
    data: XOR<AdditionalSignerCreateInput, AdditionalSignerUncheckedCreateInput>
  }

  /**
   * AdditionalSigner createMany
   */
  export type AdditionalSignerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdditionalSigners.
     */
    data: AdditionalSignerCreateManyInput | AdditionalSignerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdditionalSigner createManyAndReturn
   */
  export type AdditionalSignerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * The data used to create many AdditionalSigners.
     */
    data: AdditionalSignerCreateManyInput | AdditionalSignerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdditionalSigner update
   */
  export type AdditionalSignerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * The data needed to update a AdditionalSigner.
     */
    data: XOR<AdditionalSignerUpdateInput, AdditionalSignerUncheckedUpdateInput>
    /**
     * Choose, which AdditionalSigner to update.
     */
    where: AdditionalSignerWhereUniqueInput
  }

  /**
   * AdditionalSigner updateMany
   */
  export type AdditionalSignerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdditionalSigners.
     */
    data: XOR<AdditionalSignerUpdateManyMutationInput, AdditionalSignerUncheckedUpdateManyInput>
    /**
     * Filter which AdditionalSigners to update
     */
    where?: AdditionalSignerWhereInput
    /**
     * Limit how many AdditionalSigners to update.
     */
    limit?: number
  }

  /**
   * AdditionalSigner updateManyAndReturn
   */
  export type AdditionalSignerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * The data used to update AdditionalSigners.
     */
    data: XOR<AdditionalSignerUpdateManyMutationInput, AdditionalSignerUncheckedUpdateManyInput>
    /**
     * Filter which AdditionalSigners to update
     */
    where?: AdditionalSignerWhereInput
    /**
     * Limit how many AdditionalSigners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdditionalSigner upsert
   */
  export type AdditionalSignerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * The filter to search for the AdditionalSigner to update in case it exists.
     */
    where: AdditionalSignerWhereUniqueInput
    /**
     * In case the AdditionalSigner found by the `where` argument doesn't exist, create a new AdditionalSigner with this data.
     */
    create: XOR<AdditionalSignerCreateInput, AdditionalSignerUncheckedCreateInput>
    /**
     * In case the AdditionalSigner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdditionalSignerUpdateInput, AdditionalSignerUncheckedUpdateInput>
  }

  /**
   * AdditionalSigner delete
   */
  export type AdditionalSignerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
    /**
     * Filter which AdditionalSigner to delete.
     */
    where: AdditionalSignerWhereUniqueInput
  }

  /**
   * AdditionalSigner deleteMany
   */
  export type AdditionalSignerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdditionalSigners to delete
     */
    where?: AdditionalSignerWhereInput
    /**
     * Limit how many AdditionalSigners to delete.
     */
    limit?: number
  }

  /**
   * AdditionalSigner.documents
   */
  export type AdditionalSigner$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * AdditionalSigner without action
   */
  export type AdditionalSignerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalSigner
     */
    select?: AdditionalSignerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalSigner
     */
    omit?: AdditionalSignerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalSignerInclude<ExtArgs> | null
  }


  /**
   * Model RiskAssessment
   */

  export type AggregateRiskAssessment = {
    _count: RiskAssessmentCountAggregateOutputType | null
    _avg: RiskAssessmentAvgAggregateOutputType | null
    _sum: RiskAssessmentSumAggregateOutputType | null
    _min: RiskAssessmentMinAggregateOutputType | null
    _max: RiskAssessmentMaxAggregateOutputType | null
  }

  export type RiskAssessmentAvgAggregateOutputType = {
    riskScore: number | null
  }

  export type RiskAssessmentSumAggregateOutputType = {
    riskScore: number | null
  }

  export type RiskAssessmentMinAggregateOutputType = {
    id: string | null
    overallRisk: string | null
    riskScore: number | null
    requiresManualReview: boolean | null
    assessedAt: Date | null
    assessedBy: string | null
    applicationId: string | null
  }

  export type RiskAssessmentMaxAggregateOutputType = {
    id: string | null
    overallRisk: string | null
    riskScore: number | null
    requiresManualReview: boolean | null
    assessedAt: Date | null
    assessedBy: string | null
    applicationId: string | null
  }

  export type RiskAssessmentCountAggregateOutputType = {
    id: number
    overallRisk: number
    riskScore: number
    factors: number
    recommendations: number
    requiresManualReview: number
    assessedAt: number
    assessedBy: number
    applicationId: number
    _all: number
  }


  export type RiskAssessmentAvgAggregateInputType = {
    riskScore?: true
  }

  export type RiskAssessmentSumAggregateInputType = {
    riskScore?: true
  }

  export type RiskAssessmentMinAggregateInputType = {
    id?: true
    overallRisk?: true
    riskScore?: true
    requiresManualReview?: true
    assessedAt?: true
    assessedBy?: true
    applicationId?: true
  }

  export type RiskAssessmentMaxAggregateInputType = {
    id?: true
    overallRisk?: true
    riskScore?: true
    requiresManualReview?: true
    assessedAt?: true
    assessedBy?: true
    applicationId?: true
  }

  export type RiskAssessmentCountAggregateInputType = {
    id?: true
    overallRisk?: true
    riskScore?: true
    factors?: true
    recommendations?: true
    requiresManualReview?: true
    assessedAt?: true
    assessedBy?: true
    applicationId?: true
    _all?: true
  }

  export type RiskAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAssessment to aggregate.
     */
    where?: RiskAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAssessments to fetch.
     */
    orderBy?: RiskAssessmentOrderByWithRelationInput | RiskAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RiskAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RiskAssessments
    **/
    _count?: true | RiskAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RiskAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RiskAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RiskAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RiskAssessmentMaxAggregateInputType
  }

  export type GetRiskAssessmentAggregateType<T extends RiskAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateRiskAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRiskAssessment[P]>
      : GetScalarType<T[P], AggregateRiskAssessment[P]>
  }




  export type RiskAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskAssessmentWhereInput
    orderBy?: RiskAssessmentOrderByWithAggregationInput | RiskAssessmentOrderByWithAggregationInput[]
    by: RiskAssessmentScalarFieldEnum[] | RiskAssessmentScalarFieldEnum
    having?: RiskAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RiskAssessmentCountAggregateInputType | true
    _avg?: RiskAssessmentAvgAggregateInputType
    _sum?: RiskAssessmentSumAggregateInputType
    _min?: RiskAssessmentMinAggregateInputType
    _max?: RiskAssessmentMaxAggregateInputType
  }

  export type RiskAssessmentGroupByOutputType = {
    id: string
    overallRisk: string
    riskScore: number
    factors: JsonValue[]
    recommendations: string[]
    requiresManualReview: boolean
    assessedAt: Date
    assessedBy: string
    applicationId: string
    _count: RiskAssessmentCountAggregateOutputType | null
    _avg: RiskAssessmentAvgAggregateOutputType | null
    _sum: RiskAssessmentSumAggregateOutputType | null
    _min: RiskAssessmentMinAggregateOutputType | null
    _max: RiskAssessmentMaxAggregateOutputType | null
  }

  type GetRiskAssessmentGroupByPayload<T extends RiskAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RiskAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RiskAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RiskAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], RiskAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type RiskAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    overallRisk?: boolean
    riskScore?: boolean
    factors?: boolean
    recommendations?: boolean
    requiresManualReview?: boolean
    assessedAt?: boolean
    assessedBy?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAssessment"]>

  export type RiskAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    overallRisk?: boolean
    riskScore?: boolean
    factors?: boolean
    recommendations?: boolean
    requiresManualReview?: boolean
    assessedAt?: boolean
    assessedBy?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAssessment"]>

  export type RiskAssessmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    overallRisk?: boolean
    riskScore?: boolean
    factors?: boolean
    recommendations?: boolean
    requiresManualReview?: boolean
    assessedAt?: boolean
    assessedBy?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAssessment"]>

  export type RiskAssessmentSelectScalar = {
    id?: boolean
    overallRisk?: boolean
    riskScore?: boolean
    factors?: boolean
    recommendations?: boolean
    requiresManualReview?: boolean
    assessedAt?: boolean
    assessedBy?: boolean
    applicationId?: boolean
  }

  export type RiskAssessmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "overallRisk" | "riskScore" | "factors" | "recommendations" | "requiresManualReview" | "assessedAt" | "assessedBy" | "applicationId", ExtArgs["result"]["riskAssessment"]>
  export type RiskAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type RiskAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type RiskAssessmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $RiskAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RiskAssessment"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      overallRisk: string
      riskScore: number
      factors: Prisma.JsonValue[]
      recommendations: string[]
      requiresManualReview: boolean
      assessedAt: Date
      assessedBy: string
      applicationId: string
    }, ExtArgs["result"]["riskAssessment"]>
    composites: {}
  }

  type RiskAssessmentGetPayload<S extends boolean | null | undefined | RiskAssessmentDefaultArgs> = $Result.GetResult<Prisma.$RiskAssessmentPayload, S>

  type RiskAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RiskAssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RiskAssessmentCountAggregateInputType | true
    }

  export interface RiskAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RiskAssessment'], meta: { name: 'RiskAssessment' } }
    /**
     * Find zero or one RiskAssessment that matches the filter.
     * @param {RiskAssessmentFindUniqueArgs} args - Arguments to find a RiskAssessment
     * @example
     * // Get one RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RiskAssessmentFindUniqueArgs>(args: SelectSubset<T, RiskAssessmentFindUniqueArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RiskAssessment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RiskAssessmentFindUniqueOrThrowArgs} args - Arguments to find a RiskAssessment
     * @example
     * // Get one RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RiskAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, RiskAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RiskAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentFindFirstArgs} args - Arguments to find a RiskAssessment
     * @example
     * // Get one RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RiskAssessmentFindFirstArgs>(args?: SelectSubset<T, RiskAssessmentFindFirstArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RiskAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentFindFirstOrThrowArgs} args - Arguments to find a RiskAssessment
     * @example
     * // Get one RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RiskAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, RiskAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RiskAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RiskAssessments
     * const riskAssessments = await prisma.riskAssessment.findMany()
     * 
     * // Get first 10 RiskAssessments
     * const riskAssessments = await prisma.riskAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const riskAssessmentWithIdOnly = await prisma.riskAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RiskAssessmentFindManyArgs>(args?: SelectSubset<T, RiskAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RiskAssessment.
     * @param {RiskAssessmentCreateArgs} args - Arguments to create a RiskAssessment.
     * @example
     * // Create one RiskAssessment
     * const RiskAssessment = await prisma.riskAssessment.create({
     *   data: {
     *     // ... data to create a RiskAssessment
     *   }
     * })
     * 
     */
    create<T extends RiskAssessmentCreateArgs>(args: SelectSubset<T, RiskAssessmentCreateArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RiskAssessments.
     * @param {RiskAssessmentCreateManyArgs} args - Arguments to create many RiskAssessments.
     * @example
     * // Create many RiskAssessments
     * const riskAssessment = await prisma.riskAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RiskAssessmentCreateManyArgs>(args?: SelectSubset<T, RiskAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RiskAssessments and returns the data saved in the database.
     * @param {RiskAssessmentCreateManyAndReturnArgs} args - Arguments to create many RiskAssessments.
     * @example
     * // Create many RiskAssessments
     * const riskAssessment = await prisma.riskAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RiskAssessments and only return the `id`
     * const riskAssessmentWithIdOnly = await prisma.riskAssessment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RiskAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, RiskAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RiskAssessment.
     * @param {RiskAssessmentDeleteArgs} args - Arguments to delete one RiskAssessment.
     * @example
     * // Delete one RiskAssessment
     * const RiskAssessment = await prisma.riskAssessment.delete({
     *   where: {
     *     // ... filter to delete one RiskAssessment
     *   }
     * })
     * 
     */
    delete<T extends RiskAssessmentDeleteArgs>(args: SelectSubset<T, RiskAssessmentDeleteArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RiskAssessment.
     * @param {RiskAssessmentUpdateArgs} args - Arguments to update one RiskAssessment.
     * @example
     * // Update one RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RiskAssessmentUpdateArgs>(args: SelectSubset<T, RiskAssessmentUpdateArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RiskAssessments.
     * @param {RiskAssessmentDeleteManyArgs} args - Arguments to filter RiskAssessments to delete.
     * @example
     * // Delete a few RiskAssessments
     * const { count } = await prisma.riskAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RiskAssessmentDeleteManyArgs>(args?: SelectSubset<T, RiskAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RiskAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RiskAssessments
     * const riskAssessment = await prisma.riskAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RiskAssessmentUpdateManyArgs>(args: SelectSubset<T, RiskAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RiskAssessments and returns the data updated in the database.
     * @param {RiskAssessmentUpdateManyAndReturnArgs} args - Arguments to update many RiskAssessments.
     * @example
     * // Update many RiskAssessments
     * const riskAssessment = await prisma.riskAssessment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RiskAssessments and only return the `id`
     * const riskAssessmentWithIdOnly = await prisma.riskAssessment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RiskAssessmentUpdateManyAndReturnArgs>(args: SelectSubset<T, RiskAssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RiskAssessment.
     * @param {RiskAssessmentUpsertArgs} args - Arguments to update or create a RiskAssessment.
     * @example
     * // Update or create a RiskAssessment
     * const riskAssessment = await prisma.riskAssessment.upsert({
     *   create: {
     *     // ... data to create a RiskAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RiskAssessment we want to update
     *   }
     * })
     */
    upsert<T extends RiskAssessmentUpsertArgs>(args: SelectSubset<T, RiskAssessmentUpsertArgs<ExtArgs>>): Prisma__RiskAssessmentClient<$Result.GetResult<Prisma.$RiskAssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RiskAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentCountArgs} args - Arguments to filter RiskAssessments to count.
     * @example
     * // Count the number of RiskAssessments
     * const count = await prisma.riskAssessment.count({
     *   where: {
     *     // ... the filter for the RiskAssessments we want to count
     *   }
     * })
    **/
    count<T extends RiskAssessmentCountArgs>(
      args?: Subset<T, RiskAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RiskAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RiskAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RiskAssessmentAggregateArgs>(args: Subset<T, RiskAssessmentAggregateArgs>): Prisma.PrismaPromise<GetRiskAssessmentAggregateType<T>>

    /**
     * Group by RiskAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RiskAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RiskAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: RiskAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RiskAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRiskAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RiskAssessment model
   */
  readonly fields: RiskAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RiskAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RiskAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RiskAssessment model
   */
  interface RiskAssessmentFieldRefs {
    readonly id: FieldRef<"RiskAssessment", 'String'>
    readonly overallRisk: FieldRef<"RiskAssessment", 'String'>
    readonly riskScore: FieldRef<"RiskAssessment", 'Int'>
    readonly factors: FieldRef<"RiskAssessment", 'Json[]'>
    readonly recommendations: FieldRef<"RiskAssessment", 'String[]'>
    readonly requiresManualReview: FieldRef<"RiskAssessment", 'Boolean'>
    readonly assessedAt: FieldRef<"RiskAssessment", 'DateTime'>
    readonly assessedBy: FieldRef<"RiskAssessment", 'String'>
    readonly applicationId: FieldRef<"RiskAssessment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RiskAssessment findUnique
   */
  export type RiskAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which RiskAssessment to fetch.
     */
    where: RiskAssessmentWhereUniqueInput
  }

  /**
   * RiskAssessment findUniqueOrThrow
   */
  export type RiskAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which RiskAssessment to fetch.
     */
    where: RiskAssessmentWhereUniqueInput
  }

  /**
   * RiskAssessment findFirst
   */
  export type RiskAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which RiskAssessment to fetch.
     */
    where?: RiskAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAssessments to fetch.
     */
    orderBy?: RiskAssessmentOrderByWithRelationInput | RiskAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAssessments.
     */
    cursor?: RiskAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAssessments.
     */
    distinct?: RiskAssessmentScalarFieldEnum | RiskAssessmentScalarFieldEnum[]
  }

  /**
   * RiskAssessment findFirstOrThrow
   */
  export type RiskAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which RiskAssessment to fetch.
     */
    where?: RiskAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAssessments to fetch.
     */
    orderBy?: RiskAssessmentOrderByWithRelationInput | RiskAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAssessments.
     */
    cursor?: RiskAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAssessments.
     */
    distinct?: RiskAssessmentScalarFieldEnum | RiskAssessmentScalarFieldEnum[]
  }

  /**
   * RiskAssessment findMany
   */
  export type RiskAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which RiskAssessments to fetch.
     */
    where?: RiskAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAssessments to fetch.
     */
    orderBy?: RiskAssessmentOrderByWithRelationInput | RiskAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RiskAssessments.
     */
    cursor?: RiskAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAssessments.
     */
    skip?: number
    distinct?: RiskAssessmentScalarFieldEnum | RiskAssessmentScalarFieldEnum[]
  }

  /**
   * RiskAssessment create
   */
  export type RiskAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a RiskAssessment.
     */
    data: XOR<RiskAssessmentCreateInput, RiskAssessmentUncheckedCreateInput>
  }

  /**
   * RiskAssessment createMany
   */
  export type RiskAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RiskAssessments.
     */
    data: RiskAssessmentCreateManyInput | RiskAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RiskAssessment createManyAndReturn
   */
  export type RiskAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * The data used to create many RiskAssessments.
     */
    data: RiskAssessmentCreateManyInput | RiskAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RiskAssessment update
   */
  export type RiskAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a RiskAssessment.
     */
    data: XOR<RiskAssessmentUpdateInput, RiskAssessmentUncheckedUpdateInput>
    /**
     * Choose, which RiskAssessment to update.
     */
    where: RiskAssessmentWhereUniqueInput
  }

  /**
   * RiskAssessment updateMany
   */
  export type RiskAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RiskAssessments.
     */
    data: XOR<RiskAssessmentUpdateManyMutationInput, RiskAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which RiskAssessments to update
     */
    where?: RiskAssessmentWhereInput
    /**
     * Limit how many RiskAssessments to update.
     */
    limit?: number
  }

  /**
   * RiskAssessment updateManyAndReturn
   */
  export type RiskAssessmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * The data used to update RiskAssessments.
     */
    data: XOR<RiskAssessmentUpdateManyMutationInput, RiskAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which RiskAssessments to update
     */
    where?: RiskAssessmentWhereInput
    /**
     * Limit how many RiskAssessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RiskAssessment upsert
   */
  export type RiskAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the RiskAssessment to update in case it exists.
     */
    where: RiskAssessmentWhereUniqueInput
    /**
     * In case the RiskAssessment found by the `where` argument doesn't exist, create a new RiskAssessment with this data.
     */
    create: XOR<RiskAssessmentCreateInput, RiskAssessmentUncheckedCreateInput>
    /**
     * In case the RiskAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RiskAssessmentUpdateInput, RiskAssessmentUncheckedUpdateInput>
  }

  /**
   * RiskAssessment delete
   */
  export type RiskAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
    /**
     * Filter which RiskAssessment to delete.
     */
    where: RiskAssessmentWhereUniqueInput
  }

  /**
   * RiskAssessment deleteMany
   */
  export type RiskAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAssessments to delete
     */
    where?: RiskAssessmentWhereInput
    /**
     * Limit how many RiskAssessments to delete.
     */
    limit?: number
  }

  /**
   * RiskAssessment without action
   */
  export type RiskAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAssessment
     */
    select?: RiskAssessmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAssessment
     */
    omit?: RiskAssessmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model Disclosure
   */

  export type AggregateDisclosure = {
    _count: DisclosureCountAggregateOutputType | null
    _min: DisclosureMinAggregateOutputType | null
    _max: DisclosureMaxAggregateOutputType | null
  }

  export type DisclosureMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    version: string | null
    effectiveDate: string | null
    required: boolean | null
  }

  export type DisclosureMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    content: string | null
    version: string | null
    effectiveDate: string | null
    required: boolean | null
  }

  export type DisclosureCountAggregateOutputType = {
    id: number
    type: number
    title: number
    content: number
    version: number
    effectiveDate: number
    required: number
    applicableFor: number
    _all: number
  }


  export type DisclosureMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    version?: true
    effectiveDate?: true
    required?: true
  }

  export type DisclosureMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    version?: true
    effectiveDate?: true
    required?: true
  }

  export type DisclosureCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    content?: true
    version?: true
    effectiveDate?: true
    required?: true
    applicableFor?: true
    _all?: true
  }

  export type DisclosureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disclosure to aggregate.
     */
    where?: DisclosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disclosures to fetch.
     */
    orderBy?: DisclosureOrderByWithRelationInput | DisclosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisclosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disclosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disclosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disclosures
    **/
    _count?: true | DisclosureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisclosureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisclosureMaxAggregateInputType
  }

  export type GetDisclosureAggregateType<T extends DisclosureAggregateArgs> = {
        [P in keyof T & keyof AggregateDisclosure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisclosure[P]>
      : GetScalarType<T[P], AggregateDisclosure[P]>
  }




  export type DisclosureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisclosureWhereInput
    orderBy?: DisclosureOrderByWithAggregationInput | DisclosureOrderByWithAggregationInput[]
    by: DisclosureScalarFieldEnum[] | DisclosureScalarFieldEnum
    having?: DisclosureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisclosureCountAggregateInputType | true
    _min?: DisclosureMinAggregateInputType
    _max?: DisclosureMaxAggregateInputType
  }

  export type DisclosureGroupByOutputType = {
    id: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required: boolean
    applicableFor: string[]
    _count: DisclosureCountAggregateOutputType | null
    _min: DisclosureMinAggregateOutputType | null
    _max: DisclosureMaxAggregateOutputType | null
  }

  type GetDisclosureGroupByPayload<T extends DisclosureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisclosureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisclosureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisclosureGroupByOutputType[P]>
            : GetScalarType<T[P], DisclosureGroupByOutputType[P]>
        }
      >
    >


  export type DisclosureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    version?: boolean
    effectiveDate?: boolean
    required?: boolean
    applicableFor?: boolean
    agreements?: boolean | Disclosure$agreementsArgs<ExtArgs>
    _count?: boolean | DisclosureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disclosure"]>

  export type DisclosureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    version?: boolean
    effectiveDate?: boolean
    required?: boolean
    applicableFor?: boolean
  }, ExtArgs["result"]["disclosure"]>

  export type DisclosureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    version?: boolean
    effectiveDate?: boolean
    required?: boolean
    applicableFor?: boolean
  }, ExtArgs["result"]["disclosure"]>

  export type DisclosureSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    version?: boolean
    effectiveDate?: boolean
    required?: boolean
    applicableFor?: boolean
  }

  export type DisclosureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "content" | "version" | "effectiveDate" | "required" | "applicableFor", ExtArgs["result"]["disclosure"]>
  export type DisclosureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agreements?: boolean | Disclosure$agreementsArgs<ExtArgs>
    _count?: boolean | DisclosureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DisclosureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DisclosureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DisclosurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Disclosure"
    objects: {
      agreements: Prisma.$AgreementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      content: string
      version: string
      effectiveDate: string
      required: boolean
      applicableFor: string[]
    }, ExtArgs["result"]["disclosure"]>
    composites: {}
  }

  type DisclosureGetPayload<S extends boolean | null | undefined | DisclosureDefaultArgs> = $Result.GetResult<Prisma.$DisclosurePayload, S>

  type DisclosureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DisclosureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DisclosureCountAggregateInputType | true
    }

  export interface DisclosureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Disclosure'], meta: { name: 'Disclosure' } }
    /**
     * Find zero or one Disclosure that matches the filter.
     * @param {DisclosureFindUniqueArgs} args - Arguments to find a Disclosure
     * @example
     * // Get one Disclosure
     * const disclosure = await prisma.disclosure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisclosureFindUniqueArgs>(args: SelectSubset<T, DisclosureFindUniqueArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Disclosure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DisclosureFindUniqueOrThrowArgs} args - Arguments to find a Disclosure
     * @example
     * // Get one Disclosure
     * const disclosure = await prisma.disclosure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisclosureFindUniqueOrThrowArgs>(args: SelectSubset<T, DisclosureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Disclosure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureFindFirstArgs} args - Arguments to find a Disclosure
     * @example
     * // Get one Disclosure
     * const disclosure = await prisma.disclosure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisclosureFindFirstArgs>(args?: SelectSubset<T, DisclosureFindFirstArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Disclosure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureFindFirstOrThrowArgs} args - Arguments to find a Disclosure
     * @example
     * // Get one Disclosure
     * const disclosure = await prisma.disclosure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisclosureFindFirstOrThrowArgs>(args?: SelectSubset<T, DisclosureFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Disclosures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disclosures
     * const disclosures = await prisma.disclosure.findMany()
     * 
     * // Get first 10 Disclosures
     * const disclosures = await prisma.disclosure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disclosureWithIdOnly = await prisma.disclosure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DisclosureFindManyArgs>(args?: SelectSubset<T, DisclosureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Disclosure.
     * @param {DisclosureCreateArgs} args - Arguments to create a Disclosure.
     * @example
     * // Create one Disclosure
     * const Disclosure = await prisma.disclosure.create({
     *   data: {
     *     // ... data to create a Disclosure
     *   }
     * })
     * 
     */
    create<T extends DisclosureCreateArgs>(args: SelectSubset<T, DisclosureCreateArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Disclosures.
     * @param {DisclosureCreateManyArgs} args - Arguments to create many Disclosures.
     * @example
     * // Create many Disclosures
     * const disclosure = await prisma.disclosure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisclosureCreateManyArgs>(args?: SelectSubset<T, DisclosureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Disclosures and returns the data saved in the database.
     * @param {DisclosureCreateManyAndReturnArgs} args - Arguments to create many Disclosures.
     * @example
     * // Create many Disclosures
     * const disclosure = await prisma.disclosure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Disclosures and only return the `id`
     * const disclosureWithIdOnly = await prisma.disclosure.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisclosureCreateManyAndReturnArgs>(args?: SelectSubset<T, DisclosureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Disclosure.
     * @param {DisclosureDeleteArgs} args - Arguments to delete one Disclosure.
     * @example
     * // Delete one Disclosure
     * const Disclosure = await prisma.disclosure.delete({
     *   where: {
     *     // ... filter to delete one Disclosure
     *   }
     * })
     * 
     */
    delete<T extends DisclosureDeleteArgs>(args: SelectSubset<T, DisclosureDeleteArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Disclosure.
     * @param {DisclosureUpdateArgs} args - Arguments to update one Disclosure.
     * @example
     * // Update one Disclosure
     * const disclosure = await prisma.disclosure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisclosureUpdateArgs>(args: SelectSubset<T, DisclosureUpdateArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Disclosures.
     * @param {DisclosureDeleteManyArgs} args - Arguments to filter Disclosures to delete.
     * @example
     * // Delete a few Disclosures
     * const { count } = await prisma.disclosure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisclosureDeleteManyArgs>(args?: SelectSubset<T, DisclosureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disclosures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disclosures
     * const disclosure = await prisma.disclosure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisclosureUpdateManyArgs>(args: SelectSubset<T, DisclosureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disclosures and returns the data updated in the database.
     * @param {DisclosureUpdateManyAndReturnArgs} args - Arguments to update many Disclosures.
     * @example
     * // Update many Disclosures
     * const disclosure = await prisma.disclosure.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Disclosures and only return the `id`
     * const disclosureWithIdOnly = await prisma.disclosure.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DisclosureUpdateManyAndReturnArgs>(args: SelectSubset<T, DisclosureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Disclosure.
     * @param {DisclosureUpsertArgs} args - Arguments to update or create a Disclosure.
     * @example
     * // Update or create a Disclosure
     * const disclosure = await prisma.disclosure.upsert({
     *   create: {
     *     // ... data to create a Disclosure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disclosure we want to update
     *   }
     * })
     */
    upsert<T extends DisclosureUpsertArgs>(args: SelectSubset<T, DisclosureUpsertArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Disclosures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureCountArgs} args - Arguments to filter Disclosures to count.
     * @example
     * // Count the number of Disclosures
     * const count = await prisma.disclosure.count({
     *   where: {
     *     // ... the filter for the Disclosures we want to count
     *   }
     * })
    **/
    count<T extends DisclosureCountArgs>(
      args?: Subset<T, DisclosureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisclosureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disclosure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisclosureAggregateArgs>(args: Subset<T, DisclosureAggregateArgs>): Prisma.PrismaPromise<GetDisclosureAggregateType<T>>

    /**
     * Group by Disclosure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisclosureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisclosureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisclosureGroupByArgs['orderBy'] }
        : { orderBy?: DisclosureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisclosureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisclosureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Disclosure model
   */
  readonly fields: DisclosureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Disclosure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisclosureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agreements<T extends Disclosure$agreementsArgs<ExtArgs> = {}>(args?: Subset<T, Disclosure$agreementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Disclosure model
   */
  interface DisclosureFieldRefs {
    readonly id: FieldRef<"Disclosure", 'String'>
    readonly type: FieldRef<"Disclosure", 'String'>
    readonly title: FieldRef<"Disclosure", 'String'>
    readonly content: FieldRef<"Disclosure", 'String'>
    readonly version: FieldRef<"Disclosure", 'String'>
    readonly effectiveDate: FieldRef<"Disclosure", 'String'>
    readonly required: FieldRef<"Disclosure", 'Boolean'>
    readonly applicableFor: FieldRef<"Disclosure", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Disclosure findUnique
   */
  export type DisclosureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter, which Disclosure to fetch.
     */
    where: DisclosureWhereUniqueInput
  }

  /**
   * Disclosure findUniqueOrThrow
   */
  export type DisclosureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter, which Disclosure to fetch.
     */
    where: DisclosureWhereUniqueInput
  }

  /**
   * Disclosure findFirst
   */
  export type DisclosureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter, which Disclosure to fetch.
     */
    where?: DisclosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disclosures to fetch.
     */
    orderBy?: DisclosureOrderByWithRelationInput | DisclosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disclosures.
     */
    cursor?: DisclosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disclosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disclosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disclosures.
     */
    distinct?: DisclosureScalarFieldEnum | DisclosureScalarFieldEnum[]
  }

  /**
   * Disclosure findFirstOrThrow
   */
  export type DisclosureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter, which Disclosure to fetch.
     */
    where?: DisclosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disclosures to fetch.
     */
    orderBy?: DisclosureOrderByWithRelationInput | DisclosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disclosures.
     */
    cursor?: DisclosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disclosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disclosures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disclosures.
     */
    distinct?: DisclosureScalarFieldEnum | DisclosureScalarFieldEnum[]
  }

  /**
   * Disclosure findMany
   */
  export type DisclosureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter, which Disclosures to fetch.
     */
    where?: DisclosureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disclosures to fetch.
     */
    orderBy?: DisclosureOrderByWithRelationInput | DisclosureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disclosures.
     */
    cursor?: DisclosureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disclosures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disclosures.
     */
    skip?: number
    distinct?: DisclosureScalarFieldEnum | DisclosureScalarFieldEnum[]
  }

  /**
   * Disclosure create
   */
  export type DisclosureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * The data needed to create a Disclosure.
     */
    data: XOR<DisclosureCreateInput, DisclosureUncheckedCreateInput>
  }

  /**
   * Disclosure createMany
   */
  export type DisclosureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Disclosures.
     */
    data: DisclosureCreateManyInput | DisclosureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Disclosure createManyAndReturn
   */
  export type DisclosureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * The data used to create many Disclosures.
     */
    data: DisclosureCreateManyInput | DisclosureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Disclosure update
   */
  export type DisclosureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * The data needed to update a Disclosure.
     */
    data: XOR<DisclosureUpdateInput, DisclosureUncheckedUpdateInput>
    /**
     * Choose, which Disclosure to update.
     */
    where: DisclosureWhereUniqueInput
  }

  /**
   * Disclosure updateMany
   */
  export type DisclosureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Disclosures.
     */
    data: XOR<DisclosureUpdateManyMutationInput, DisclosureUncheckedUpdateManyInput>
    /**
     * Filter which Disclosures to update
     */
    where?: DisclosureWhereInput
    /**
     * Limit how many Disclosures to update.
     */
    limit?: number
  }

  /**
   * Disclosure updateManyAndReturn
   */
  export type DisclosureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * The data used to update Disclosures.
     */
    data: XOR<DisclosureUpdateManyMutationInput, DisclosureUncheckedUpdateManyInput>
    /**
     * Filter which Disclosures to update
     */
    where?: DisclosureWhereInput
    /**
     * Limit how many Disclosures to update.
     */
    limit?: number
  }

  /**
   * Disclosure upsert
   */
  export type DisclosureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * The filter to search for the Disclosure to update in case it exists.
     */
    where: DisclosureWhereUniqueInput
    /**
     * In case the Disclosure found by the `where` argument doesn't exist, create a new Disclosure with this data.
     */
    create: XOR<DisclosureCreateInput, DisclosureUncheckedCreateInput>
    /**
     * In case the Disclosure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisclosureUpdateInput, DisclosureUncheckedUpdateInput>
  }

  /**
   * Disclosure delete
   */
  export type DisclosureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
    /**
     * Filter which Disclosure to delete.
     */
    where: DisclosureWhereUniqueInput
  }

  /**
   * Disclosure deleteMany
   */
  export type DisclosureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disclosures to delete
     */
    where?: DisclosureWhereInput
    /**
     * Limit how many Disclosures to delete.
     */
    limit?: number
  }

  /**
   * Disclosure.agreements
   */
  export type Disclosure$agreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    where?: AgreementWhereInput
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    cursor?: AgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Disclosure without action
   */
  export type DisclosureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disclosure
     */
    select?: DisclosureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Disclosure
     */
    omit?: DisclosureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisclosureInclude<ExtArgs> | null
  }


  /**
   * Model Agreement
   */

  export type AggregateAgreement = {
    _count: AgreementCountAggregateOutputType | null
    _min: AgreementMinAggregateOutputType | null
    _max: AgreementMaxAggregateOutputType | null
  }

  export type AgreementMinAggregateOutputType = {
    id: string | null
    acknowledged: boolean | null
    acknowledgedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
    disclosureId: string | null
  }

  export type AgreementMaxAggregateOutputType = {
    id: string | null
    acknowledged: boolean | null
    acknowledgedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
    disclosureId: string | null
  }

  export type AgreementCountAggregateOutputType = {
    id: number
    acknowledged: number
    acknowledgedAt: number
    ipAddress: number
    userAgent: number
    applicationId: number
    disclosureId: number
    _all: number
  }


  export type AgreementMinAggregateInputType = {
    id?: true
    acknowledged?: true
    acknowledgedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
    disclosureId?: true
  }

  export type AgreementMaxAggregateInputType = {
    id?: true
    acknowledged?: true
    acknowledgedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
    disclosureId?: true
  }

  export type AgreementCountAggregateInputType = {
    id?: true
    acknowledged?: true
    acknowledgedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
    disclosureId?: true
    _all?: true
  }

  export type AgreementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agreement to aggregate.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agreements
    **/
    _count?: true | AgreementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgreementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgreementMaxAggregateInputType
  }

  export type GetAgreementAggregateType<T extends AgreementAggregateArgs> = {
        [P in keyof T & keyof AggregateAgreement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgreement[P]>
      : GetScalarType<T[P], AggregateAgreement[P]>
  }




  export type AgreementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgreementWhereInput
    orderBy?: AgreementOrderByWithAggregationInput | AgreementOrderByWithAggregationInput[]
    by: AgreementScalarFieldEnum[] | AgreementScalarFieldEnum
    having?: AgreementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgreementCountAggregateInputType | true
    _min?: AgreementMinAggregateInputType
    _max?: AgreementMaxAggregateInputType
  }

  export type AgreementGroupByOutputType = {
    id: string
    acknowledged: boolean
    acknowledgedAt: Date | null
    ipAddress: string
    userAgent: string
    applicationId: string
    disclosureId: string
    _count: AgreementCountAggregateOutputType | null
    _min: AgreementMinAggregateOutputType | null
    _max: AgreementMaxAggregateOutputType | null
  }

  type GetAgreementGroupByPayload<T extends AgreementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgreementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgreementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgreementGroupByOutputType[P]>
            : GetScalarType<T[P], AgreementGroupByOutputType[P]>
        }
      >
    >


  export type AgreementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    acknowledged?: boolean
    acknowledgedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    applicationId?: boolean
    disclosureId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    acknowledged?: boolean
    acknowledgedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    applicationId?: boolean
    disclosureId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    acknowledged?: boolean
    acknowledgedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    applicationId?: boolean
    disclosureId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agreement"]>

  export type AgreementSelectScalar = {
    id?: boolean
    acknowledged?: boolean
    acknowledgedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    applicationId?: boolean
    disclosureId?: boolean
  }

  export type AgreementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "acknowledged" | "acknowledgedAt" | "ipAddress" | "userAgent" | "applicationId" | "disclosureId", ExtArgs["result"]["agreement"]>
  export type AgreementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }
  export type AgreementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }
  export type AgreementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    disclosure?: boolean | DisclosureDefaultArgs<ExtArgs>
  }

  export type $AgreementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agreement"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      disclosure: Prisma.$DisclosurePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      acknowledged: boolean
      acknowledgedAt: Date | null
      ipAddress: string
      userAgent: string
      applicationId: string
      disclosureId: string
    }, ExtArgs["result"]["agreement"]>
    composites: {}
  }

  type AgreementGetPayload<S extends boolean | null | undefined | AgreementDefaultArgs> = $Result.GetResult<Prisma.$AgreementPayload, S>

  type AgreementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgreementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgreementCountAggregateInputType | true
    }

  export interface AgreementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agreement'], meta: { name: 'Agreement' } }
    /**
     * Find zero or one Agreement that matches the filter.
     * @param {AgreementFindUniqueArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgreementFindUniqueArgs>(args: SelectSubset<T, AgreementFindUniqueArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agreement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgreementFindUniqueOrThrowArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgreementFindUniqueOrThrowArgs>(args: SelectSubset<T, AgreementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agreement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindFirstArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgreementFindFirstArgs>(args?: SelectSubset<T, AgreementFindFirstArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agreement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindFirstOrThrowArgs} args - Arguments to find a Agreement
     * @example
     * // Get one Agreement
     * const agreement = await prisma.agreement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgreementFindFirstOrThrowArgs>(args?: SelectSubset<T, AgreementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agreements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agreements
     * const agreements = await prisma.agreement.findMany()
     * 
     * // Get first 10 Agreements
     * const agreements = await prisma.agreement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agreementWithIdOnly = await prisma.agreement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgreementFindManyArgs>(args?: SelectSubset<T, AgreementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agreement.
     * @param {AgreementCreateArgs} args - Arguments to create a Agreement.
     * @example
     * // Create one Agreement
     * const Agreement = await prisma.agreement.create({
     *   data: {
     *     // ... data to create a Agreement
     *   }
     * })
     * 
     */
    create<T extends AgreementCreateArgs>(args: SelectSubset<T, AgreementCreateArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agreements.
     * @param {AgreementCreateManyArgs} args - Arguments to create many Agreements.
     * @example
     * // Create many Agreements
     * const agreement = await prisma.agreement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgreementCreateManyArgs>(args?: SelectSubset<T, AgreementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agreements and returns the data saved in the database.
     * @param {AgreementCreateManyAndReturnArgs} args - Arguments to create many Agreements.
     * @example
     * // Create many Agreements
     * const agreement = await prisma.agreement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agreements and only return the `id`
     * const agreementWithIdOnly = await prisma.agreement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgreementCreateManyAndReturnArgs>(args?: SelectSubset<T, AgreementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agreement.
     * @param {AgreementDeleteArgs} args - Arguments to delete one Agreement.
     * @example
     * // Delete one Agreement
     * const Agreement = await prisma.agreement.delete({
     *   where: {
     *     // ... filter to delete one Agreement
     *   }
     * })
     * 
     */
    delete<T extends AgreementDeleteArgs>(args: SelectSubset<T, AgreementDeleteArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agreement.
     * @param {AgreementUpdateArgs} args - Arguments to update one Agreement.
     * @example
     * // Update one Agreement
     * const agreement = await prisma.agreement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgreementUpdateArgs>(args: SelectSubset<T, AgreementUpdateArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agreements.
     * @param {AgreementDeleteManyArgs} args - Arguments to filter Agreements to delete.
     * @example
     * // Delete a few Agreements
     * const { count } = await prisma.agreement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgreementDeleteManyArgs>(args?: SelectSubset<T, AgreementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agreements
     * const agreement = await prisma.agreement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgreementUpdateManyArgs>(args: SelectSubset<T, AgreementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agreements and returns the data updated in the database.
     * @param {AgreementUpdateManyAndReturnArgs} args - Arguments to update many Agreements.
     * @example
     * // Update many Agreements
     * const agreement = await prisma.agreement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agreements and only return the `id`
     * const agreementWithIdOnly = await prisma.agreement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgreementUpdateManyAndReturnArgs>(args: SelectSubset<T, AgreementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Agreement.
     * @param {AgreementUpsertArgs} args - Arguments to update or create a Agreement.
     * @example
     * // Update or create a Agreement
     * const agreement = await prisma.agreement.upsert({
     *   create: {
     *     // ... data to create a Agreement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agreement we want to update
     *   }
     * })
     */
    upsert<T extends AgreementUpsertArgs>(args: SelectSubset<T, AgreementUpsertArgs<ExtArgs>>): Prisma__AgreementClient<$Result.GetResult<Prisma.$AgreementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementCountArgs} args - Arguments to filter Agreements to count.
     * @example
     * // Count the number of Agreements
     * const count = await prisma.agreement.count({
     *   where: {
     *     // ... the filter for the Agreements we want to count
     *   }
     * })
    **/
    count<T extends AgreementCountArgs>(
      args?: Subset<T, AgreementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgreementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgreementAggregateArgs>(args: Subset<T, AgreementAggregateArgs>): Prisma.PrismaPromise<GetAgreementAggregateType<T>>

    /**
     * Group by Agreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgreementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgreementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgreementGroupByArgs['orderBy'] }
        : { orderBy?: AgreementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgreementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgreementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agreement model
   */
  readonly fields: AgreementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agreement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgreementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    disclosure<T extends DisclosureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisclosureDefaultArgs<ExtArgs>>): Prisma__DisclosureClient<$Result.GetResult<Prisma.$DisclosurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agreement model
   */
  interface AgreementFieldRefs {
    readonly id: FieldRef<"Agreement", 'String'>
    readonly acknowledged: FieldRef<"Agreement", 'Boolean'>
    readonly acknowledgedAt: FieldRef<"Agreement", 'DateTime'>
    readonly ipAddress: FieldRef<"Agreement", 'String'>
    readonly userAgent: FieldRef<"Agreement", 'String'>
    readonly applicationId: FieldRef<"Agreement", 'String'>
    readonly disclosureId: FieldRef<"Agreement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Agreement findUnique
   */
  export type AgreementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement findUniqueOrThrow
   */
  export type AgreementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement findFirst
   */
  export type AgreementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agreements.
     */
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement findFirstOrThrow
   */
  export type AgreementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreement to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agreements.
     */
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement findMany
   */
  export type AgreementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter, which Agreements to fetch.
     */
    where?: AgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agreements to fetch.
     */
    orderBy?: AgreementOrderByWithRelationInput | AgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agreements.
     */
    cursor?: AgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agreements.
     */
    skip?: number
    distinct?: AgreementScalarFieldEnum | AgreementScalarFieldEnum[]
  }

  /**
   * Agreement create
   */
  export type AgreementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The data needed to create a Agreement.
     */
    data: XOR<AgreementCreateInput, AgreementUncheckedCreateInput>
  }

  /**
   * Agreement createMany
   */
  export type AgreementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agreements.
     */
    data: AgreementCreateManyInput | AgreementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agreement createManyAndReturn
   */
  export type AgreementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * The data used to create many Agreements.
     */
    data: AgreementCreateManyInput | AgreementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agreement update
   */
  export type AgreementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The data needed to update a Agreement.
     */
    data: XOR<AgreementUpdateInput, AgreementUncheckedUpdateInput>
    /**
     * Choose, which Agreement to update.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement updateMany
   */
  export type AgreementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agreements.
     */
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyInput>
    /**
     * Filter which Agreements to update
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to update.
     */
    limit?: number
  }

  /**
   * Agreement updateManyAndReturn
   */
  export type AgreementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * The data used to update Agreements.
     */
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyInput>
    /**
     * Filter which Agreements to update
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agreement upsert
   */
  export type AgreementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * The filter to search for the Agreement to update in case it exists.
     */
    where: AgreementWhereUniqueInput
    /**
     * In case the Agreement found by the `where` argument doesn't exist, create a new Agreement with this data.
     */
    create: XOR<AgreementCreateInput, AgreementUncheckedCreateInput>
    /**
     * In case the Agreement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgreementUpdateInput, AgreementUncheckedUpdateInput>
  }

  /**
   * Agreement delete
   */
  export type AgreementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
    /**
     * Filter which Agreement to delete.
     */
    where: AgreementWhereUniqueInput
  }

  /**
   * Agreement deleteMany
   */
  export type AgreementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agreements to delete
     */
    where?: AgreementWhereInput
    /**
     * Limit how many Agreements to delete.
     */
    limit?: number
  }

  /**
   * Agreement without action
   */
  export type AgreementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agreement
     */
    select?: AgreementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agreement
     */
    omit?: AgreementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgreementInclude<ExtArgs> | null
  }


  /**
   * Model ElectronicSignature
   */

  export type AggregateElectronicSignature = {
    _count: ElectronicSignatureCountAggregateOutputType | null
    _min: ElectronicSignatureMinAggregateOutputType | null
    _max: ElectronicSignatureMaxAggregateOutputType | null
  }

  export type ElectronicSignatureMinAggregateOutputType = {
    id: string | null
    signerId: string | null
    documentType: string | null
    signatureData: string | null
    signedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
  }

  export type ElectronicSignatureMaxAggregateOutputType = {
    id: string | null
    signerId: string | null
    documentType: string | null
    signatureData: string | null
    signedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
  }

  export type ElectronicSignatureCountAggregateOutputType = {
    id: number
    signerId: number
    documentType: number
    signatureData: number
    signedAt: number
    ipAddress: number
    userAgent: number
    biometric: number
    applicationId: number
    _all: number
  }


  export type ElectronicSignatureMinAggregateInputType = {
    id?: true
    signerId?: true
    documentType?: true
    signatureData?: true
    signedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
  }

  export type ElectronicSignatureMaxAggregateInputType = {
    id?: true
    signerId?: true
    documentType?: true
    signatureData?: true
    signedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
  }

  export type ElectronicSignatureCountAggregateInputType = {
    id?: true
    signerId?: true
    documentType?: true
    signatureData?: true
    signedAt?: true
    ipAddress?: true
    userAgent?: true
    biometric?: true
    applicationId?: true
    _all?: true
  }

  export type ElectronicSignatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectronicSignature to aggregate.
     */
    where?: ElectronicSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectronicSignatures to fetch.
     */
    orderBy?: ElectronicSignatureOrderByWithRelationInput | ElectronicSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ElectronicSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectronicSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectronicSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ElectronicSignatures
    **/
    _count?: true | ElectronicSignatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ElectronicSignatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ElectronicSignatureMaxAggregateInputType
  }

  export type GetElectronicSignatureAggregateType<T extends ElectronicSignatureAggregateArgs> = {
        [P in keyof T & keyof AggregateElectronicSignature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateElectronicSignature[P]>
      : GetScalarType<T[P], AggregateElectronicSignature[P]>
  }




  export type ElectronicSignatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ElectronicSignatureWhereInput
    orderBy?: ElectronicSignatureOrderByWithAggregationInput | ElectronicSignatureOrderByWithAggregationInput[]
    by: ElectronicSignatureScalarFieldEnum[] | ElectronicSignatureScalarFieldEnum
    having?: ElectronicSignatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ElectronicSignatureCountAggregateInputType | true
    _min?: ElectronicSignatureMinAggregateInputType
    _max?: ElectronicSignatureMaxAggregateInputType
  }

  export type ElectronicSignatureGroupByOutputType = {
    id: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt: Date
    ipAddress: string
    userAgent: string
    biometric: JsonValue | null
    applicationId: string
    _count: ElectronicSignatureCountAggregateOutputType | null
    _min: ElectronicSignatureMinAggregateOutputType | null
    _max: ElectronicSignatureMaxAggregateOutputType | null
  }

  type GetElectronicSignatureGroupByPayload<T extends ElectronicSignatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ElectronicSignatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ElectronicSignatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ElectronicSignatureGroupByOutputType[P]>
            : GetScalarType<T[P], ElectronicSignatureGroupByOutputType[P]>
        }
      >
    >


  export type ElectronicSignatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signerId?: boolean
    documentType?: boolean
    signatureData?: boolean
    signedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    biometric?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["electronicSignature"]>

  export type ElectronicSignatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signerId?: boolean
    documentType?: boolean
    signatureData?: boolean
    signedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    biometric?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["electronicSignature"]>

  export type ElectronicSignatureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signerId?: boolean
    documentType?: boolean
    signatureData?: boolean
    signedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    biometric?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["electronicSignature"]>

  export type ElectronicSignatureSelectScalar = {
    id?: boolean
    signerId?: boolean
    documentType?: boolean
    signatureData?: boolean
    signedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    biometric?: boolean
    applicationId?: boolean
  }

  export type ElectronicSignatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signerId" | "documentType" | "signatureData" | "signedAt" | "ipAddress" | "userAgent" | "biometric" | "applicationId", ExtArgs["result"]["electronicSignature"]>
  export type ElectronicSignatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type ElectronicSignatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type ElectronicSignatureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $ElectronicSignaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ElectronicSignature"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      signerId: string
      documentType: string
      signatureData: string
      signedAt: Date
      ipAddress: string
      userAgent: string
      biometric: Prisma.JsonValue | null
      applicationId: string
    }, ExtArgs["result"]["electronicSignature"]>
    composites: {}
  }

  type ElectronicSignatureGetPayload<S extends boolean | null | undefined | ElectronicSignatureDefaultArgs> = $Result.GetResult<Prisma.$ElectronicSignaturePayload, S>

  type ElectronicSignatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ElectronicSignatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ElectronicSignatureCountAggregateInputType | true
    }

  export interface ElectronicSignatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ElectronicSignature'], meta: { name: 'ElectronicSignature' } }
    /**
     * Find zero or one ElectronicSignature that matches the filter.
     * @param {ElectronicSignatureFindUniqueArgs} args - Arguments to find a ElectronicSignature
     * @example
     * // Get one ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ElectronicSignatureFindUniqueArgs>(args: SelectSubset<T, ElectronicSignatureFindUniqueArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ElectronicSignature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ElectronicSignatureFindUniqueOrThrowArgs} args - Arguments to find a ElectronicSignature
     * @example
     * // Get one ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ElectronicSignatureFindUniqueOrThrowArgs>(args: SelectSubset<T, ElectronicSignatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ElectronicSignature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureFindFirstArgs} args - Arguments to find a ElectronicSignature
     * @example
     * // Get one ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ElectronicSignatureFindFirstArgs>(args?: SelectSubset<T, ElectronicSignatureFindFirstArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ElectronicSignature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureFindFirstOrThrowArgs} args - Arguments to find a ElectronicSignature
     * @example
     * // Get one ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ElectronicSignatureFindFirstOrThrowArgs>(args?: SelectSubset<T, ElectronicSignatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ElectronicSignatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ElectronicSignatures
     * const electronicSignatures = await prisma.electronicSignature.findMany()
     * 
     * // Get first 10 ElectronicSignatures
     * const electronicSignatures = await prisma.electronicSignature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const electronicSignatureWithIdOnly = await prisma.electronicSignature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ElectronicSignatureFindManyArgs>(args?: SelectSubset<T, ElectronicSignatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ElectronicSignature.
     * @param {ElectronicSignatureCreateArgs} args - Arguments to create a ElectronicSignature.
     * @example
     * // Create one ElectronicSignature
     * const ElectronicSignature = await prisma.electronicSignature.create({
     *   data: {
     *     // ... data to create a ElectronicSignature
     *   }
     * })
     * 
     */
    create<T extends ElectronicSignatureCreateArgs>(args: SelectSubset<T, ElectronicSignatureCreateArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ElectronicSignatures.
     * @param {ElectronicSignatureCreateManyArgs} args - Arguments to create many ElectronicSignatures.
     * @example
     * // Create many ElectronicSignatures
     * const electronicSignature = await prisma.electronicSignature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ElectronicSignatureCreateManyArgs>(args?: SelectSubset<T, ElectronicSignatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ElectronicSignatures and returns the data saved in the database.
     * @param {ElectronicSignatureCreateManyAndReturnArgs} args - Arguments to create many ElectronicSignatures.
     * @example
     * // Create many ElectronicSignatures
     * const electronicSignature = await prisma.electronicSignature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ElectronicSignatures and only return the `id`
     * const electronicSignatureWithIdOnly = await prisma.electronicSignature.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ElectronicSignatureCreateManyAndReturnArgs>(args?: SelectSubset<T, ElectronicSignatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ElectronicSignature.
     * @param {ElectronicSignatureDeleteArgs} args - Arguments to delete one ElectronicSignature.
     * @example
     * // Delete one ElectronicSignature
     * const ElectronicSignature = await prisma.electronicSignature.delete({
     *   where: {
     *     // ... filter to delete one ElectronicSignature
     *   }
     * })
     * 
     */
    delete<T extends ElectronicSignatureDeleteArgs>(args: SelectSubset<T, ElectronicSignatureDeleteArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ElectronicSignature.
     * @param {ElectronicSignatureUpdateArgs} args - Arguments to update one ElectronicSignature.
     * @example
     * // Update one ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ElectronicSignatureUpdateArgs>(args: SelectSubset<T, ElectronicSignatureUpdateArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ElectronicSignatures.
     * @param {ElectronicSignatureDeleteManyArgs} args - Arguments to filter ElectronicSignatures to delete.
     * @example
     * // Delete a few ElectronicSignatures
     * const { count } = await prisma.electronicSignature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ElectronicSignatureDeleteManyArgs>(args?: SelectSubset<T, ElectronicSignatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ElectronicSignatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ElectronicSignatures
     * const electronicSignature = await prisma.electronicSignature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ElectronicSignatureUpdateManyArgs>(args: SelectSubset<T, ElectronicSignatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ElectronicSignatures and returns the data updated in the database.
     * @param {ElectronicSignatureUpdateManyAndReturnArgs} args - Arguments to update many ElectronicSignatures.
     * @example
     * // Update many ElectronicSignatures
     * const electronicSignature = await prisma.electronicSignature.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ElectronicSignatures and only return the `id`
     * const electronicSignatureWithIdOnly = await prisma.electronicSignature.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ElectronicSignatureUpdateManyAndReturnArgs>(args: SelectSubset<T, ElectronicSignatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ElectronicSignature.
     * @param {ElectronicSignatureUpsertArgs} args - Arguments to update or create a ElectronicSignature.
     * @example
     * // Update or create a ElectronicSignature
     * const electronicSignature = await prisma.electronicSignature.upsert({
     *   create: {
     *     // ... data to create a ElectronicSignature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ElectronicSignature we want to update
     *   }
     * })
     */
    upsert<T extends ElectronicSignatureUpsertArgs>(args: SelectSubset<T, ElectronicSignatureUpsertArgs<ExtArgs>>): Prisma__ElectronicSignatureClient<$Result.GetResult<Prisma.$ElectronicSignaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ElectronicSignatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureCountArgs} args - Arguments to filter ElectronicSignatures to count.
     * @example
     * // Count the number of ElectronicSignatures
     * const count = await prisma.electronicSignature.count({
     *   where: {
     *     // ... the filter for the ElectronicSignatures we want to count
     *   }
     * })
    **/
    count<T extends ElectronicSignatureCountArgs>(
      args?: Subset<T, ElectronicSignatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ElectronicSignatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ElectronicSignature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ElectronicSignatureAggregateArgs>(args: Subset<T, ElectronicSignatureAggregateArgs>): Prisma.PrismaPromise<GetElectronicSignatureAggregateType<T>>

    /**
     * Group by ElectronicSignature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ElectronicSignatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ElectronicSignatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ElectronicSignatureGroupByArgs['orderBy'] }
        : { orderBy?: ElectronicSignatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ElectronicSignatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetElectronicSignatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ElectronicSignature model
   */
  readonly fields: ElectronicSignatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ElectronicSignature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ElectronicSignatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ElectronicSignature model
   */
  interface ElectronicSignatureFieldRefs {
    readonly id: FieldRef<"ElectronicSignature", 'String'>
    readonly signerId: FieldRef<"ElectronicSignature", 'String'>
    readonly documentType: FieldRef<"ElectronicSignature", 'String'>
    readonly signatureData: FieldRef<"ElectronicSignature", 'String'>
    readonly signedAt: FieldRef<"ElectronicSignature", 'DateTime'>
    readonly ipAddress: FieldRef<"ElectronicSignature", 'String'>
    readonly userAgent: FieldRef<"ElectronicSignature", 'String'>
    readonly biometric: FieldRef<"ElectronicSignature", 'Json'>
    readonly applicationId: FieldRef<"ElectronicSignature", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ElectronicSignature findUnique
   */
  export type ElectronicSignatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ElectronicSignature to fetch.
     */
    where: ElectronicSignatureWhereUniqueInput
  }

  /**
   * ElectronicSignature findUniqueOrThrow
   */
  export type ElectronicSignatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ElectronicSignature to fetch.
     */
    where: ElectronicSignatureWhereUniqueInput
  }

  /**
   * ElectronicSignature findFirst
   */
  export type ElectronicSignatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ElectronicSignature to fetch.
     */
    where?: ElectronicSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectronicSignatures to fetch.
     */
    orderBy?: ElectronicSignatureOrderByWithRelationInput | ElectronicSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectronicSignatures.
     */
    cursor?: ElectronicSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectronicSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectronicSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectronicSignatures.
     */
    distinct?: ElectronicSignatureScalarFieldEnum | ElectronicSignatureScalarFieldEnum[]
  }

  /**
   * ElectronicSignature findFirstOrThrow
   */
  export type ElectronicSignatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ElectronicSignature to fetch.
     */
    where?: ElectronicSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectronicSignatures to fetch.
     */
    orderBy?: ElectronicSignatureOrderByWithRelationInput | ElectronicSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ElectronicSignatures.
     */
    cursor?: ElectronicSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectronicSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectronicSignatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ElectronicSignatures.
     */
    distinct?: ElectronicSignatureScalarFieldEnum | ElectronicSignatureScalarFieldEnum[]
  }

  /**
   * ElectronicSignature findMany
   */
  export type ElectronicSignatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter, which ElectronicSignatures to fetch.
     */
    where?: ElectronicSignatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ElectronicSignatures to fetch.
     */
    orderBy?: ElectronicSignatureOrderByWithRelationInput | ElectronicSignatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ElectronicSignatures.
     */
    cursor?: ElectronicSignatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ElectronicSignatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ElectronicSignatures.
     */
    skip?: number
    distinct?: ElectronicSignatureScalarFieldEnum | ElectronicSignatureScalarFieldEnum[]
  }

  /**
   * ElectronicSignature create
   */
  export type ElectronicSignatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * The data needed to create a ElectronicSignature.
     */
    data: XOR<ElectronicSignatureCreateInput, ElectronicSignatureUncheckedCreateInput>
  }

  /**
   * ElectronicSignature createMany
   */
  export type ElectronicSignatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ElectronicSignatures.
     */
    data: ElectronicSignatureCreateManyInput | ElectronicSignatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ElectronicSignature createManyAndReturn
   */
  export type ElectronicSignatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * The data used to create many ElectronicSignatures.
     */
    data: ElectronicSignatureCreateManyInput | ElectronicSignatureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ElectronicSignature update
   */
  export type ElectronicSignatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * The data needed to update a ElectronicSignature.
     */
    data: XOR<ElectronicSignatureUpdateInput, ElectronicSignatureUncheckedUpdateInput>
    /**
     * Choose, which ElectronicSignature to update.
     */
    where: ElectronicSignatureWhereUniqueInput
  }

  /**
   * ElectronicSignature updateMany
   */
  export type ElectronicSignatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ElectronicSignatures.
     */
    data: XOR<ElectronicSignatureUpdateManyMutationInput, ElectronicSignatureUncheckedUpdateManyInput>
    /**
     * Filter which ElectronicSignatures to update
     */
    where?: ElectronicSignatureWhereInput
    /**
     * Limit how many ElectronicSignatures to update.
     */
    limit?: number
  }

  /**
   * ElectronicSignature updateManyAndReturn
   */
  export type ElectronicSignatureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * The data used to update ElectronicSignatures.
     */
    data: XOR<ElectronicSignatureUpdateManyMutationInput, ElectronicSignatureUncheckedUpdateManyInput>
    /**
     * Filter which ElectronicSignatures to update
     */
    where?: ElectronicSignatureWhereInput
    /**
     * Limit how many ElectronicSignatures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ElectronicSignature upsert
   */
  export type ElectronicSignatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * The filter to search for the ElectronicSignature to update in case it exists.
     */
    where: ElectronicSignatureWhereUniqueInput
    /**
     * In case the ElectronicSignature found by the `where` argument doesn't exist, create a new ElectronicSignature with this data.
     */
    create: XOR<ElectronicSignatureCreateInput, ElectronicSignatureUncheckedCreateInput>
    /**
     * In case the ElectronicSignature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ElectronicSignatureUpdateInput, ElectronicSignatureUncheckedUpdateInput>
  }

  /**
   * ElectronicSignature delete
   */
  export type ElectronicSignatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
    /**
     * Filter which ElectronicSignature to delete.
     */
    where: ElectronicSignatureWhereUniqueInput
  }

  /**
   * ElectronicSignature deleteMany
   */
  export type ElectronicSignatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ElectronicSignatures to delete
     */
    where?: ElectronicSignatureWhereInput
    /**
     * Limit how many ElectronicSignatures to delete.
     */
    limit?: number
  }

  /**
   * ElectronicSignature without action
   */
  export type ElectronicSignatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ElectronicSignature
     */
    select?: ElectronicSignatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ElectronicSignature
     */
    omit?: ElectronicSignatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ElectronicSignatureInclude<ExtArgs> | null
  }


  /**
   * Model FundingSetup
   */

  export type AggregateFundingSetup = {
    _count: FundingSetupCountAggregateOutputType | null
    _avg: FundingSetupAvgAggregateOutputType | null
    _sum: FundingSetupSumAggregateOutputType | null
    _min: FundingSetupMinAggregateOutputType | null
    _max: FundingSetupMaxAggregateOutputType | null
  }

  export type FundingSetupAvgAggregateOutputType = {
    amount: number | null
  }

  export type FundingSetupSumAggregateOutputType = {
    amount: number | null
  }

  export type FundingSetupMinAggregateOutputType = {
    id: string | null
    method: string | null
    amount: number | null
    status: string | null
    createdAt: Date | null
    processedAt: Date | null
    applicationId: string | null
  }

  export type FundingSetupMaxAggregateOutputType = {
    id: string | null
    method: string | null
    amount: number | null
    status: string | null
    createdAt: Date | null
    processedAt: Date | null
    applicationId: string | null
  }

  export type FundingSetupCountAggregateOutputType = {
    id: number
    method: number
    amount: number
    status: number
    details: number
    createdAt: number
    processedAt: number
    applicationId: number
    _all: number
  }


  export type FundingSetupAvgAggregateInputType = {
    amount?: true
  }

  export type FundingSetupSumAggregateInputType = {
    amount?: true
  }

  export type FundingSetupMinAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    status?: true
    createdAt?: true
    processedAt?: true
    applicationId?: true
  }

  export type FundingSetupMaxAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    status?: true
    createdAt?: true
    processedAt?: true
    applicationId?: true
  }

  export type FundingSetupCountAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    status?: true
    details?: true
    createdAt?: true
    processedAt?: true
    applicationId?: true
    _all?: true
  }

  export type FundingSetupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundingSetup to aggregate.
     */
    where?: FundingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundingSetups to fetch.
     */
    orderBy?: FundingSetupOrderByWithRelationInput | FundingSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FundingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundingSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundingSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FundingSetups
    **/
    _count?: true | FundingSetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FundingSetupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FundingSetupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FundingSetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FundingSetupMaxAggregateInputType
  }

  export type GetFundingSetupAggregateType<T extends FundingSetupAggregateArgs> = {
        [P in keyof T & keyof AggregateFundingSetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFundingSetup[P]>
      : GetScalarType<T[P], AggregateFundingSetup[P]>
  }




  export type FundingSetupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundingSetupWhereInput
    orderBy?: FundingSetupOrderByWithAggregationInput | FundingSetupOrderByWithAggregationInput[]
    by: FundingSetupScalarFieldEnum[] | FundingSetupScalarFieldEnum
    having?: FundingSetupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FundingSetupCountAggregateInputType | true
    _avg?: FundingSetupAvgAggregateInputType
    _sum?: FundingSetupSumAggregateInputType
    _min?: FundingSetupMinAggregateInputType
    _max?: FundingSetupMaxAggregateInputType
  }

  export type FundingSetupGroupByOutputType = {
    id: string
    method: string
    amount: number
    status: string
    details: JsonValue
    createdAt: Date
    processedAt: Date | null
    applicationId: string
    _count: FundingSetupCountAggregateOutputType | null
    _avg: FundingSetupAvgAggregateOutputType | null
    _sum: FundingSetupSumAggregateOutputType | null
    _min: FundingSetupMinAggregateOutputType | null
    _max: FundingSetupMaxAggregateOutputType | null
  }

  type GetFundingSetupGroupByPayload<T extends FundingSetupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FundingSetupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FundingSetupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FundingSetupGroupByOutputType[P]>
            : GetScalarType<T[P], FundingSetupGroupByOutputType[P]>
        }
      >
    >


  export type FundingSetupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
    processedAt?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundingSetup"]>

  export type FundingSetupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
    processedAt?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundingSetup"]>

  export type FundingSetupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
    processedAt?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundingSetup"]>

  export type FundingSetupSelectScalar = {
    id?: boolean
    method?: boolean
    amount?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
    processedAt?: boolean
    applicationId?: boolean
  }

  export type FundingSetupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "method" | "amount" | "status" | "details" | "createdAt" | "processedAt" | "applicationId", ExtArgs["result"]["fundingSetup"]>
  export type FundingSetupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type FundingSetupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type FundingSetupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $FundingSetupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FundingSetup"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      method: string
      amount: number
      status: string
      details: Prisma.JsonValue
      createdAt: Date
      processedAt: Date | null
      applicationId: string
    }, ExtArgs["result"]["fundingSetup"]>
    composites: {}
  }

  type FundingSetupGetPayload<S extends boolean | null | undefined | FundingSetupDefaultArgs> = $Result.GetResult<Prisma.$FundingSetupPayload, S>

  type FundingSetupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FundingSetupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FundingSetupCountAggregateInputType | true
    }

  export interface FundingSetupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FundingSetup'], meta: { name: 'FundingSetup' } }
    /**
     * Find zero or one FundingSetup that matches the filter.
     * @param {FundingSetupFindUniqueArgs} args - Arguments to find a FundingSetup
     * @example
     * // Get one FundingSetup
     * const fundingSetup = await prisma.fundingSetup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FundingSetupFindUniqueArgs>(args: SelectSubset<T, FundingSetupFindUniqueArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FundingSetup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FundingSetupFindUniqueOrThrowArgs} args - Arguments to find a FundingSetup
     * @example
     * // Get one FundingSetup
     * const fundingSetup = await prisma.fundingSetup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FundingSetupFindUniqueOrThrowArgs>(args: SelectSubset<T, FundingSetupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FundingSetup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupFindFirstArgs} args - Arguments to find a FundingSetup
     * @example
     * // Get one FundingSetup
     * const fundingSetup = await prisma.fundingSetup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FundingSetupFindFirstArgs>(args?: SelectSubset<T, FundingSetupFindFirstArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FundingSetup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupFindFirstOrThrowArgs} args - Arguments to find a FundingSetup
     * @example
     * // Get one FundingSetup
     * const fundingSetup = await prisma.fundingSetup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FundingSetupFindFirstOrThrowArgs>(args?: SelectSubset<T, FundingSetupFindFirstOrThrowArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FundingSetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FundingSetups
     * const fundingSetups = await prisma.fundingSetup.findMany()
     * 
     * // Get first 10 FundingSetups
     * const fundingSetups = await prisma.fundingSetup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fundingSetupWithIdOnly = await prisma.fundingSetup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FundingSetupFindManyArgs>(args?: SelectSubset<T, FundingSetupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FundingSetup.
     * @param {FundingSetupCreateArgs} args - Arguments to create a FundingSetup.
     * @example
     * // Create one FundingSetup
     * const FundingSetup = await prisma.fundingSetup.create({
     *   data: {
     *     // ... data to create a FundingSetup
     *   }
     * })
     * 
     */
    create<T extends FundingSetupCreateArgs>(args: SelectSubset<T, FundingSetupCreateArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FundingSetups.
     * @param {FundingSetupCreateManyArgs} args - Arguments to create many FundingSetups.
     * @example
     * // Create many FundingSetups
     * const fundingSetup = await prisma.fundingSetup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FundingSetupCreateManyArgs>(args?: SelectSubset<T, FundingSetupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FundingSetups and returns the data saved in the database.
     * @param {FundingSetupCreateManyAndReturnArgs} args - Arguments to create many FundingSetups.
     * @example
     * // Create many FundingSetups
     * const fundingSetup = await prisma.fundingSetup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FundingSetups and only return the `id`
     * const fundingSetupWithIdOnly = await prisma.fundingSetup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FundingSetupCreateManyAndReturnArgs>(args?: SelectSubset<T, FundingSetupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FundingSetup.
     * @param {FundingSetupDeleteArgs} args - Arguments to delete one FundingSetup.
     * @example
     * // Delete one FundingSetup
     * const FundingSetup = await prisma.fundingSetup.delete({
     *   where: {
     *     // ... filter to delete one FundingSetup
     *   }
     * })
     * 
     */
    delete<T extends FundingSetupDeleteArgs>(args: SelectSubset<T, FundingSetupDeleteArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FundingSetup.
     * @param {FundingSetupUpdateArgs} args - Arguments to update one FundingSetup.
     * @example
     * // Update one FundingSetup
     * const fundingSetup = await prisma.fundingSetup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FundingSetupUpdateArgs>(args: SelectSubset<T, FundingSetupUpdateArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FundingSetups.
     * @param {FundingSetupDeleteManyArgs} args - Arguments to filter FundingSetups to delete.
     * @example
     * // Delete a few FundingSetups
     * const { count } = await prisma.fundingSetup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FundingSetupDeleteManyArgs>(args?: SelectSubset<T, FundingSetupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FundingSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FundingSetups
     * const fundingSetup = await prisma.fundingSetup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FundingSetupUpdateManyArgs>(args: SelectSubset<T, FundingSetupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FundingSetups and returns the data updated in the database.
     * @param {FundingSetupUpdateManyAndReturnArgs} args - Arguments to update many FundingSetups.
     * @example
     * // Update many FundingSetups
     * const fundingSetup = await prisma.fundingSetup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FundingSetups and only return the `id`
     * const fundingSetupWithIdOnly = await prisma.fundingSetup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FundingSetupUpdateManyAndReturnArgs>(args: SelectSubset<T, FundingSetupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FundingSetup.
     * @param {FundingSetupUpsertArgs} args - Arguments to update or create a FundingSetup.
     * @example
     * // Update or create a FundingSetup
     * const fundingSetup = await prisma.fundingSetup.upsert({
     *   create: {
     *     // ... data to create a FundingSetup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FundingSetup we want to update
     *   }
     * })
     */
    upsert<T extends FundingSetupUpsertArgs>(args: SelectSubset<T, FundingSetupUpsertArgs<ExtArgs>>): Prisma__FundingSetupClient<$Result.GetResult<Prisma.$FundingSetupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FundingSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupCountArgs} args - Arguments to filter FundingSetups to count.
     * @example
     * // Count the number of FundingSetups
     * const count = await prisma.fundingSetup.count({
     *   where: {
     *     // ... the filter for the FundingSetups we want to count
     *   }
     * })
    **/
    count<T extends FundingSetupCountArgs>(
      args?: Subset<T, FundingSetupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FundingSetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FundingSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FundingSetupAggregateArgs>(args: Subset<T, FundingSetupAggregateArgs>): Prisma.PrismaPromise<GetFundingSetupAggregateType<T>>

    /**
     * Group by FundingSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundingSetupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FundingSetupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FundingSetupGroupByArgs['orderBy'] }
        : { orderBy?: FundingSetupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FundingSetupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFundingSetupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FundingSetup model
   */
  readonly fields: FundingSetupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FundingSetup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FundingSetupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FundingSetup model
   */
  interface FundingSetupFieldRefs {
    readonly id: FieldRef<"FundingSetup", 'String'>
    readonly method: FieldRef<"FundingSetup", 'String'>
    readonly amount: FieldRef<"FundingSetup", 'Float'>
    readonly status: FieldRef<"FundingSetup", 'String'>
    readonly details: FieldRef<"FundingSetup", 'Json'>
    readonly createdAt: FieldRef<"FundingSetup", 'DateTime'>
    readonly processedAt: FieldRef<"FundingSetup", 'DateTime'>
    readonly applicationId: FieldRef<"FundingSetup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FundingSetup findUnique
   */
  export type FundingSetupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter, which FundingSetup to fetch.
     */
    where: FundingSetupWhereUniqueInput
  }

  /**
   * FundingSetup findUniqueOrThrow
   */
  export type FundingSetupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter, which FundingSetup to fetch.
     */
    where: FundingSetupWhereUniqueInput
  }

  /**
   * FundingSetup findFirst
   */
  export type FundingSetupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter, which FundingSetup to fetch.
     */
    where?: FundingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundingSetups to fetch.
     */
    orderBy?: FundingSetupOrderByWithRelationInput | FundingSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundingSetups.
     */
    cursor?: FundingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundingSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundingSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundingSetups.
     */
    distinct?: FundingSetupScalarFieldEnum | FundingSetupScalarFieldEnum[]
  }

  /**
   * FundingSetup findFirstOrThrow
   */
  export type FundingSetupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter, which FundingSetup to fetch.
     */
    where?: FundingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundingSetups to fetch.
     */
    orderBy?: FundingSetupOrderByWithRelationInput | FundingSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundingSetups.
     */
    cursor?: FundingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundingSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundingSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundingSetups.
     */
    distinct?: FundingSetupScalarFieldEnum | FundingSetupScalarFieldEnum[]
  }

  /**
   * FundingSetup findMany
   */
  export type FundingSetupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter, which FundingSetups to fetch.
     */
    where?: FundingSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundingSetups to fetch.
     */
    orderBy?: FundingSetupOrderByWithRelationInput | FundingSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FundingSetups.
     */
    cursor?: FundingSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundingSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundingSetups.
     */
    skip?: number
    distinct?: FundingSetupScalarFieldEnum | FundingSetupScalarFieldEnum[]
  }

  /**
   * FundingSetup create
   */
  export type FundingSetupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * The data needed to create a FundingSetup.
     */
    data: XOR<FundingSetupCreateInput, FundingSetupUncheckedCreateInput>
  }

  /**
   * FundingSetup createMany
   */
  export type FundingSetupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FundingSetups.
     */
    data: FundingSetupCreateManyInput | FundingSetupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FundingSetup createManyAndReturn
   */
  export type FundingSetupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * The data used to create many FundingSetups.
     */
    data: FundingSetupCreateManyInput | FundingSetupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FundingSetup update
   */
  export type FundingSetupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * The data needed to update a FundingSetup.
     */
    data: XOR<FundingSetupUpdateInput, FundingSetupUncheckedUpdateInput>
    /**
     * Choose, which FundingSetup to update.
     */
    where: FundingSetupWhereUniqueInput
  }

  /**
   * FundingSetup updateMany
   */
  export type FundingSetupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FundingSetups.
     */
    data: XOR<FundingSetupUpdateManyMutationInput, FundingSetupUncheckedUpdateManyInput>
    /**
     * Filter which FundingSetups to update
     */
    where?: FundingSetupWhereInput
    /**
     * Limit how many FundingSetups to update.
     */
    limit?: number
  }

  /**
   * FundingSetup updateManyAndReturn
   */
  export type FundingSetupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * The data used to update FundingSetups.
     */
    data: XOR<FundingSetupUpdateManyMutationInput, FundingSetupUncheckedUpdateManyInput>
    /**
     * Filter which FundingSetups to update
     */
    where?: FundingSetupWhereInput
    /**
     * Limit how many FundingSetups to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FundingSetup upsert
   */
  export type FundingSetupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * The filter to search for the FundingSetup to update in case it exists.
     */
    where: FundingSetupWhereUniqueInput
    /**
     * In case the FundingSetup found by the `where` argument doesn't exist, create a new FundingSetup with this data.
     */
    create: XOR<FundingSetupCreateInput, FundingSetupUncheckedCreateInput>
    /**
     * In case the FundingSetup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FundingSetupUpdateInput, FundingSetupUncheckedUpdateInput>
  }

  /**
   * FundingSetup delete
   */
  export type FundingSetupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
    /**
     * Filter which FundingSetup to delete.
     */
    where: FundingSetupWhereUniqueInput
  }

  /**
   * FundingSetup deleteMany
   */
  export type FundingSetupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundingSetups to delete
     */
    where?: FundingSetupWhereInput
    /**
     * Limit how many FundingSetups to delete.
     */
    limit?: number
  }

  /**
   * FundingSetup without action
   */
  export type FundingSetupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundingSetup
     */
    select?: FundingSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundingSetup
     */
    omit?: FundingSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundingSetupInclude<ExtArgs> | null
  }


  /**
   * Model AuditTrailEntry
   */

  export type AggregateAuditTrailEntry = {
    _count: AuditTrailEntryCountAggregateOutputType | null
    _min: AuditTrailEntryMinAggregateOutputType | null
    _max: AuditTrailEntryMaxAggregateOutputType | null
  }

  export type AuditTrailEntryMinAggregateOutputType = {
    id: string | null
    action: string | null
    description: string | null
    performedBy: string | null
    performedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
  }

  export type AuditTrailEntryMaxAggregateOutputType = {
    id: string | null
    action: string | null
    description: string | null
    performedBy: string | null
    performedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    applicationId: string | null
  }

  export type AuditTrailEntryCountAggregateOutputType = {
    id: number
    action: number
    description: number
    performedBy: number
    performedAt: number
    ipAddress: number
    userAgent: number
    changes: number
    applicationId: number
    _all: number
  }


  export type AuditTrailEntryMinAggregateInputType = {
    id?: true
    action?: true
    description?: true
    performedBy?: true
    performedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
  }

  export type AuditTrailEntryMaxAggregateInputType = {
    id?: true
    action?: true
    description?: true
    performedBy?: true
    performedAt?: true
    ipAddress?: true
    userAgent?: true
    applicationId?: true
  }

  export type AuditTrailEntryCountAggregateInputType = {
    id?: true
    action?: true
    description?: true
    performedBy?: true
    performedAt?: true
    ipAddress?: true
    userAgent?: true
    changes?: true
    applicationId?: true
    _all?: true
  }

  export type AuditTrailEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditTrailEntry to aggregate.
     */
    where?: AuditTrailEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrailEntries to fetch.
     */
    orderBy?: AuditTrailEntryOrderByWithRelationInput | AuditTrailEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditTrailEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrailEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrailEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditTrailEntries
    **/
    _count?: true | AuditTrailEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditTrailEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditTrailEntryMaxAggregateInputType
  }

  export type GetAuditTrailEntryAggregateType<T extends AuditTrailEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditTrailEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditTrailEntry[P]>
      : GetScalarType<T[P], AggregateAuditTrailEntry[P]>
  }




  export type AuditTrailEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditTrailEntryWhereInput
    orderBy?: AuditTrailEntryOrderByWithAggregationInput | AuditTrailEntryOrderByWithAggregationInput[]
    by: AuditTrailEntryScalarFieldEnum[] | AuditTrailEntryScalarFieldEnum
    having?: AuditTrailEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditTrailEntryCountAggregateInputType | true
    _min?: AuditTrailEntryMinAggregateInputType
    _max?: AuditTrailEntryMaxAggregateInputType
  }

  export type AuditTrailEntryGroupByOutputType = {
    id: string
    action: string
    description: string
    performedBy: string
    performedAt: Date
    ipAddress: string
    userAgent: string
    changes: JsonValue | null
    applicationId: string
    _count: AuditTrailEntryCountAggregateOutputType | null
    _min: AuditTrailEntryMinAggregateOutputType | null
    _max: AuditTrailEntryMaxAggregateOutputType | null
  }

  type GetAuditTrailEntryGroupByPayload<T extends AuditTrailEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditTrailEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditTrailEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditTrailEntryGroupByOutputType[P]>
            : GetScalarType<T[P], AuditTrailEntryGroupByOutputType[P]>
        }
      >
    >


  export type AuditTrailEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    description?: boolean
    performedBy?: boolean
    performedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    changes?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditTrailEntry"]>

  export type AuditTrailEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    description?: boolean
    performedBy?: boolean
    performedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    changes?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditTrailEntry"]>

  export type AuditTrailEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    description?: boolean
    performedBy?: boolean
    performedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    changes?: boolean
    applicationId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditTrailEntry"]>

  export type AuditTrailEntrySelectScalar = {
    id?: boolean
    action?: boolean
    description?: boolean
    performedBy?: boolean
    performedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    changes?: boolean
    applicationId?: boolean
  }

  export type AuditTrailEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "description" | "performedBy" | "performedAt" | "ipAddress" | "userAgent" | "changes" | "applicationId", ExtArgs["result"]["auditTrailEntry"]>
  export type AuditTrailEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type AuditTrailEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type AuditTrailEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $AuditTrailEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditTrailEntry"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      description: string
      performedBy: string
      performedAt: Date
      ipAddress: string
      userAgent: string
      changes: Prisma.JsonValue | null
      applicationId: string
    }, ExtArgs["result"]["auditTrailEntry"]>
    composites: {}
  }

  type AuditTrailEntryGetPayload<S extends boolean | null | undefined | AuditTrailEntryDefaultArgs> = $Result.GetResult<Prisma.$AuditTrailEntryPayload, S>

  type AuditTrailEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditTrailEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditTrailEntryCountAggregateInputType | true
    }

  export interface AuditTrailEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditTrailEntry'], meta: { name: 'AuditTrailEntry' } }
    /**
     * Find zero or one AuditTrailEntry that matches the filter.
     * @param {AuditTrailEntryFindUniqueArgs} args - Arguments to find a AuditTrailEntry
     * @example
     * // Get one AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditTrailEntryFindUniqueArgs>(args: SelectSubset<T, AuditTrailEntryFindUniqueArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditTrailEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditTrailEntryFindUniqueOrThrowArgs} args - Arguments to find a AuditTrailEntry
     * @example
     * // Get one AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditTrailEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditTrailEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditTrailEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryFindFirstArgs} args - Arguments to find a AuditTrailEntry
     * @example
     * // Get one AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditTrailEntryFindFirstArgs>(args?: SelectSubset<T, AuditTrailEntryFindFirstArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditTrailEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryFindFirstOrThrowArgs} args - Arguments to find a AuditTrailEntry
     * @example
     * // Get one AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditTrailEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditTrailEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditTrailEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditTrailEntries
     * const auditTrailEntries = await prisma.auditTrailEntry.findMany()
     * 
     * // Get first 10 AuditTrailEntries
     * const auditTrailEntries = await prisma.auditTrailEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditTrailEntryWithIdOnly = await prisma.auditTrailEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditTrailEntryFindManyArgs>(args?: SelectSubset<T, AuditTrailEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditTrailEntry.
     * @param {AuditTrailEntryCreateArgs} args - Arguments to create a AuditTrailEntry.
     * @example
     * // Create one AuditTrailEntry
     * const AuditTrailEntry = await prisma.auditTrailEntry.create({
     *   data: {
     *     // ... data to create a AuditTrailEntry
     *   }
     * })
     * 
     */
    create<T extends AuditTrailEntryCreateArgs>(args: SelectSubset<T, AuditTrailEntryCreateArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditTrailEntries.
     * @param {AuditTrailEntryCreateManyArgs} args - Arguments to create many AuditTrailEntries.
     * @example
     * // Create many AuditTrailEntries
     * const auditTrailEntry = await prisma.auditTrailEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditTrailEntryCreateManyArgs>(args?: SelectSubset<T, AuditTrailEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditTrailEntries and returns the data saved in the database.
     * @param {AuditTrailEntryCreateManyAndReturnArgs} args - Arguments to create many AuditTrailEntries.
     * @example
     * // Create many AuditTrailEntries
     * const auditTrailEntry = await prisma.auditTrailEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditTrailEntries and only return the `id`
     * const auditTrailEntryWithIdOnly = await prisma.auditTrailEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditTrailEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditTrailEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditTrailEntry.
     * @param {AuditTrailEntryDeleteArgs} args - Arguments to delete one AuditTrailEntry.
     * @example
     * // Delete one AuditTrailEntry
     * const AuditTrailEntry = await prisma.auditTrailEntry.delete({
     *   where: {
     *     // ... filter to delete one AuditTrailEntry
     *   }
     * })
     * 
     */
    delete<T extends AuditTrailEntryDeleteArgs>(args: SelectSubset<T, AuditTrailEntryDeleteArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditTrailEntry.
     * @param {AuditTrailEntryUpdateArgs} args - Arguments to update one AuditTrailEntry.
     * @example
     * // Update one AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditTrailEntryUpdateArgs>(args: SelectSubset<T, AuditTrailEntryUpdateArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditTrailEntries.
     * @param {AuditTrailEntryDeleteManyArgs} args - Arguments to filter AuditTrailEntries to delete.
     * @example
     * // Delete a few AuditTrailEntries
     * const { count } = await prisma.auditTrailEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditTrailEntryDeleteManyArgs>(args?: SelectSubset<T, AuditTrailEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditTrailEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditTrailEntries
     * const auditTrailEntry = await prisma.auditTrailEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditTrailEntryUpdateManyArgs>(args: SelectSubset<T, AuditTrailEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditTrailEntries and returns the data updated in the database.
     * @param {AuditTrailEntryUpdateManyAndReturnArgs} args - Arguments to update many AuditTrailEntries.
     * @example
     * // Update many AuditTrailEntries
     * const auditTrailEntry = await prisma.auditTrailEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditTrailEntries and only return the `id`
     * const auditTrailEntryWithIdOnly = await prisma.auditTrailEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditTrailEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditTrailEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditTrailEntry.
     * @param {AuditTrailEntryUpsertArgs} args - Arguments to update or create a AuditTrailEntry.
     * @example
     * // Update or create a AuditTrailEntry
     * const auditTrailEntry = await prisma.auditTrailEntry.upsert({
     *   create: {
     *     // ... data to create a AuditTrailEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditTrailEntry we want to update
     *   }
     * })
     */
    upsert<T extends AuditTrailEntryUpsertArgs>(args: SelectSubset<T, AuditTrailEntryUpsertArgs<ExtArgs>>): Prisma__AuditTrailEntryClient<$Result.GetResult<Prisma.$AuditTrailEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditTrailEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryCountArgs} args - Arguments to filter AuditTrailEntries to count.
     * @example
     * // Count the number of AuditTrailEntries
     * const count = await prisma.auditTrailEntry.count({
     *   where: {
     *     // ... the filter for the AuditTrailEntries we want to count
     *   }
     * })
    **/
    count<T extends AuditTrailEntryCountArgs>(
      args?: Subset<T, AuditTrailEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditTrailEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditTrailEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditTrailEntryAggregateArgs>(args: Subset<T, AuditTrailEntryAggregateArgs>): Prisma.PrismaPromise<GetAuditTrailEntryAggregateType<T>>

    /**
     * Group by AuditTrailEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditTrailEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditTrailEntryGroupByArgs['orderBy'] }
        : { orderBy?: AuditTrailEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditTrailEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditTrailEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditTrailEntry model
   */
  readonly fields: AuditTrailEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditTrailEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditTrailEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditTrailEntry model
   */
  interface AuditTrailEntryFieldRefs {
    readonly id: FieldRef<"AuditTrailEntry", 'String'>
    readonly action: FieldRef<"AuditTrailEntry", 'String'>
    readonly description: FieldRef<"AuditTrailEntry", 'String'>
    readonly performedBy: FieldRef<"AuditTrailEntry", 'String'>
    readonly performedAt: FieldRef<"AuditTrailEntry", 'DateTime'>
    readonly ipAddress: FieldRef<"AuditTrailEntry", 'String'>
    readonly userAgent: FieldRef<"AuditTrailEntry", 'String'>
    readonly changes: FieldRef<"AuditTrailEntry", 'Json'>
    readonly applicationId: FieldRef<"AuditTrailEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditTrailEntry findUnique
   */
  export type AuditTrailEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrailEntry to fetch.
     */
    where: AuditTrailEntryWhereUniqueInput
  }

  /**
   * AuditTrailEntry findUniqueOrThrow
   */
  export type AuditTrailEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrailEntry to fetch.
     */
    where: AuditTrailEntryWhereUniqueInput
  }

  /**
   * AuditTrailEntry findFirst
   */
  export type AuditTrailEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrailEntry to fetch.
     */
    where?: AuditTrailEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrailEntries to fetch.
     */
    orderBy?: AuditTrailEntryOrderByWithRelationInput | AuditTrailEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditTrailEntries.
     */
    cursor?: AuditTrailEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrailEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrailEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditTrailEntries.
     */
    distinct?: AuditTrailEntryScalarFieldEnum | AuditTrailEntryScalarFieldEnum[]
  }

  /**
   * AuditTrailEntry findFirstOrThrow
   */
  export type AuditTrailEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrailEntry to fetch.
     */
    where?: AuditTrailEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrailEntries to fetch.
     */
    orderBy?: AuditTrailEntryOrderByWithRelationInput | AuditTrailEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditTrailEntries.
     */
    cursor?: AuditTrailEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrailEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrailEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditTrailEntries.
     */
    distinct?: AuditTrailEntryScalarFieldEnum | AuditTrailEntryScalarFieldEnum[]
  }

  /**
   * AuditTrailEntry findMany
   */
  export type AuditTrailEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrailEntries to fetch.
     */
    where?: AuditTrailEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrailEntries to fetch.
     */
    orderBy?: AuditTrailEntryOrderByWithRelationInput | AuditTrailEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditTrailEntries.
     */
    cursor?: AuditTrailEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrailEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrailEntries.
     */
    skip?: number
    distinct?: AuditTrailEntryScalarFieldEnum | AuditTrailEntryScalarFieldEnum[]
  }

  /**
   * AuditTrailEntry create
   */
  export type AuditTrailEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditTrailEntry.
     */
    data: XOR<AuditTrailEntryCreateInput, AuditTrailEntryUncheckedCreateInput>
  }

  /**
   * AuditTrailEntry createMany
   */
  export type AuditTrailEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditTrailEntries.
     */
    data: AuditTrailEntryCreateManyInput | AuditTrailEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditTrailEntry createManyAndReturn
   */
  export type AuditTrailEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * The data used to create many AuditTrailEntries.
     */
    data: AuditTrailEntryCreateManyInput | AuditTrailEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditTrailEntry update
   */
  export type AuditTrailEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditTrailEntry.
     */
    data: XOR<AuditTrailEntryUpdateInput, AuditTrailEntryUncheckedUpdateInput>
    /**
     * Choose, which AuditTrailEntry to update.
     */
    where: AuditTrailEntryWhereUniqueInput
  }

  /**
   * AuditTrailEntry updateMany
   */
  export type AuditTrailEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditTrailEntries.
     */
    data: XOR<AuditTrailEntryUpdateManyMutationInput, AuditTrailEntryUncheckedUpdateManyInput>
    /**
     * Filter which AuditTrailEntries to update
     */
    where?: AuditTrailEntryWhereInput
    /**
     * Limit how many AuditTrailEntries to update.
     */
    limit?: number
  }

  /**
   * AuditTrailEntry updateManyAndReturn
   */
  export type AuditTrailEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * The data used to update AuditTrailEntries.
     */
    data: XOR<AuditTrailEntryUpdateManyMutationInput, AuditTrailEntryUncheckedUpdateManyInput>
    /**
     * Filter which AuditTrailEntries to update
     */
    where?: AuditTrailEntryWhereInput
    /**
     * Limit how many AuditTrailEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditTrailEntry upsert
   */
  export type AuditTrailEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditTrailEntry to update in case it exists.
     */
    where: AuditTrailEntryWhereUniqueInput
    /**
     * In case the AuditTrailEntry found by the `where` argument doesn't exist, create a new AuditTrailEntry with this data.
     */
    create: XOR<AuditTrailEntryCreateInput, AuditTrailEntryUncheckedCreateInput>
    /**
     * In case the AuditTrailEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditTrailEntryUpdateInput, AuditTrailEntryUncheckedUpdateInput>
  }

  /**
   * AuditTrailEntry delete
   */
  export type AuditTrailEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
    /**
     * Filter which AuditTrailEntry to delete.
     */
    where: AuditTrailEntryWhereUniqueInput
  }

  /**
   * AuditTrailEntry deleteMany
   */
  export type AuditTrailEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditTrailEntries to delete
     */
    where?: AuditTrailEntryWhereInput
    /**
     * Limit how many AuditTrailEntries to delete.
     */
    limit?: number
  }

  /**
   * AuditTrailEntry without action
   */
  export type AuditTrailEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrailEntry
     */
    select?: AuditTrailEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditTrailEntry
     */
    omit?: AuditTrailEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailEntryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    isEmailVerified: 'isEmailVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    type: 'type',
    expires: 'expires',
    blacklisted: 'blacklisted',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    currentStep: 'currentStep',
    accountType: 'accountType',
    customerType: 'customerType',
    applicantId: 'applicantId',
    submittedAt: 'submittedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    metadata: 'metadata',
    userId: 'userId'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const PersonalInfoScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    suffix: 'suffix',
    dateOfBirth: 'dateOfBirth',
    ssn: 'ssn',
    phone: 'phone',
    email: 'email',
    mailingAddress: 'mailingAddress',
    physicalAddress: 'physicalAddress',
    employmentStatus: 'employmentStatus',
    occupation: 'occupation',
    employer: 'employer',
    workPhone: 'workPhone',
    applicationId: 'applicationId'
  };

  export type PersonalInfoScalarFieldEnum = (typeof PersonalInfoScalarFieldEnum)[keyof typeof PersonalInfoScalarFieldEnum]


  export const BusinessProfileScalarFieldEnum: {
    id: 'id',
    businessName: 'businessName',
    dbaName: 'dbaName',
    ein: 'ein',
    entityType: 'entityType',
    industryType: 'industryType',
    dateEstablished: 'dateEstablished',
    businessAddress: 'businessAddress',
    mailingAddress: 'mailingAddress',
    businessPhone: 'businessPhone',
    businessEmail: 'businessEmail',
    website: 'website',
    description: 'description',
    isCashIntensive: 'isCashIntensive',
    monthlyTransactionVolume: 'monthlyTransactionVolume',
    monthlyTransactionCount: 'monthlyTransactionCount',
    expectedBalance: 'expectedBalance',
    applicationId: 'applicationId'
  };

  export type BusinessProfileScalarFieldEnum = (typeof BusinessProfileScalarFieldEnum)[keyof typeof BusinessProfileScalarFieldEnum]


  export const FinancialProfileScalarFieldEnum: {
    id: 'id',
    annualIncome: 'annualIncome',
    incomeSource: 'incomeSource',
    employmentInfo: 'employmentInfo',
    assets: 'assets',
    liabilities: 'liabilities',
    bankingRelationships: 'bankingRelationships',
    accountActivities: 'accountActivities',
    applicationId: 'applicationId'
  };

  export type FinancialProfileScalarFieldEnum = (typeof FinancialProfileScalarFieldEnum)[keyof typeof FinancialProfileScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    description: 'description',
    features: 'features',
    minimumBalance: 'minimumBalance',
    monthlyFee: 'monthlyFee',
    interestRate: 'interestRate',
    isActive: 'isActive',
    eligibilityRules: 'eligibilityRules'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductSelectionScalarFieldEnum: {
    id: 'id',
    selectedFeatures: 'selectedFeatures',
    initialDeposit: 'initialDeposit',
    applicationId: 'applicationId',
    productId: 'productId'
  };

  export type ProductSelectionScalarFieldEnum = (typeof ProductSelectionScalarFieldEnum)[keyof typeof ProductSelectionScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    type: 'type',
    fileName: 'fileName',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    uploadedAt: 'uploadedAt',
    verificationStatus: 'verificationStatus',
    verificationDetails: 'verificationDetails',
    applicationId: 'applicationId',
    signerId: 'signerId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const KYCVerificationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    provider: 'provider',
    verificationId: 'verificationId',
    confidence: 'confidence',
    verifiedAt: 'verifiedAt',
    results: 'results',
    applicationId: 'applicationId'
  };

  export type KYCVerificationScalarFieldEnum = (typeof KYCVerificationScalarFieldEnum)[keyof typeof KYCVerificationScalarFieldEnum]


  export const AdditionalSignerScalarFieldEnum: {
    id: 'id',
    personalInfo: 'personalInfo',
    role: 'role',
    relationshipToBusiness: 'relationshipToBusiness',
    beneficialOwnershipPercentage: 'beneficialOwnershipPercentage',
    hasSigningAuthority: 'hasSigningAuthority',
    kycStatus: 'kycStatus',
    applicationId: 'applicationId'
  };

  export type AdditionalSignerScalarFieldEnum = (typeof AdditionalSignerScalarFieldEnum)[keyof typeof AdditionalSignerScalarFieldEnum]


  export const RiskAssessmentScalarFieldEnum: {
    id: 'id',
    overallRisk: 'overallRisk',
    riskScore: 'riskScore',
    factors: 'factors',
    recommendations: 'recommendations',
    requiresManualReview: 'requiresManualReview',
    assessedAt: 'assessedAt',
    assessedBy: 'assessedBy',
    applicationId: 'applicationId'
  };

  export type RiskAssessmentScalarFieldEnum = (typeof RiskAssessmentScalarFieldEnum)[keyof typeof RiskAssessmentScalarFieldEnum]


  export const DisclosureScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    content: 'content',
    version: 'version',
    effectiveDate: 'effectiveDate',
    required: 'required',
    applicableFor: 'applicableFor'
  };

  export type DisclosureScalarFieldEnum = (typeof DisclosureScalarFieldEnum)[keyof typeof DisclosureScalarFieldEnum]


  export const AgreementScalarFieldEnum: {
    id: 'id',
    acknowledged: 'acknowledged',
    acknowledgedAt: 'acknowledgedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    applicationId: 'applicationId',
    disclosureId: 'disclosureId'
  };

  export type AgreementScalarFieldEnum = (typeof AgreementScalarFieldEnum)[keyof typeof AgreementScalarFieldEnum]


  export const ElectronicSignatureScalarFieldEnum: {
    id: 'id',
    signerId: 'signerId',
    documentType: 'documentType',
    signatureData: 'signatureData',
    signedAt: 'signedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    biometric: 'biometric',
    applicationId: 'applicationId'
  };

  export type ElectronicSignatureScalarFieldEnum = (typeof ElectronicSignatureScalarFieldEnum)[keyof typeof ElectronicSignatureScalarFieldEnum]


  export const FundingSetupScalarFieldEnum: {
    id: 'id',
    method: 'method',
    amount: 'amount',
    status: 'status',
    details: 'details',
    createdAt: 'createdAt',
    processedAt: 'processedAt',
    applicationId: 'applicationId'
  };

  export type FundingSetupScalarFieldEnum = (typeof FundingSetupScalarFieldEnum)[keyof typeof FundingSetupScalarFieldEnum]


  export const AuditTrailEntryScalarFieldEnum: {
    id: 'id',
    action: 'action',
    description: 'description',
    performedBy: 'performedBy',
    performedAt: 'performedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    changes: 'changes',
    applicationId: 'applicationId'
  };

  export type AuditTrailEntryScalarFieldEnum = (typeof AuditTrailEntryScalarFieldEnum)[keyof typeof AuditTrailEntryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isEmailVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tokens?: TokenListRelationFilter
    applications?: ApplicationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    isEmailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tokens?: TokenOrderByRelationAggregateInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isEmailVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    tokens?: TokenListRelationFilter
    applications?: ApplicationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    isEmailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: IntFilter<"Token"> | number
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expires?: DateTimeFilter<"Token"> | Date | string
    blacklisted?: BoolFilter<"Token"> | boolean
    createdAt?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expires?: SortOrder
    blacklisted?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expires?: DateTimeFilter<"Token"> | Date | string
    blacklisted?: BoolFilter<"Token"> | boolean
    createdAt?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expires?: SortOrder
    blacklisted?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Token"> | number
    token?: StringWithAggregatesFilter<"Token"> | string
    type?: EnumTokenTypeWithAggregatesFilter<"Token"> | $Enums.TokenType
    expires?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    blacklisted?: BoolWithAggregatesFilter<"Token"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    userId?: IntWithAggregatesFilter<"Token"> | number
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: StringFilter<"Application"> | string
    status?: StringFilter<"Application"> | string
    currentStep?: StringFilter<"Application"> | string
    accountType?: StringFilter<"Application"> | string
    customerType?: StringFilter<"Application"> | string
    applicantId?: StringFilter<"Application"> | string
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    metadata?: JsonFilter<"Application">
    userId?: IntFilter<"Application"> | number
    personalInfo?: XOR<PersonalInfoNullableScalarRelationFilter, PersonalInfoWhereInput> | null
    businessProfile?: XOR<BusinessProfileNullableScalarRelationFilter, BusinessProfileWhereInput> | null
    financialProfile?: XOR<FinancialProfileNullableScalarRelationFilter, FinancialProfileWhereInput> | null
    productSelections?: ProductSelectionListRelationFilter
    documents?: DocumentListRelationFilter
    additionalSigners?: AdditionalSignerListRelationFilter
    kycVerification?: XOR<KYCVerificationNullableScalarRelationFilter, KYCVerificationWhereInput> | null
    riskAssessment?: XOR<RiskAssessmentNullableScalarRelationFilter, RiskAssessmentWhereInput> | null
    agreements?: AgreementListRelationFilter
    signatures?: ElectronicSignatureListRelationFilter
    fundingSetup?: XOR<FundingSetupNullableScalarRelationFilter, FundingSetupWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    auditTrail?: AuditTrailEntryListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    currentStep?: SortOrder
    accountType?: SortOrder
    customerType?: SortOrder
    applicantId?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    personalInfo?: PersonalInfoOrderByWithRelationInput
    businessProfile?: BusinessProfileOrderByWithRelationInput
    financialProfile?: FinancialProfileOrderByWithRelationInput
    productSelections?: ProductSelectionOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    additionalSigners?: AdditionalSignerOrderByRelationAggregateInput
    kycVerification?: KYCVerificationOrderByWithRelationInput
    riskAssessment?: RiskAssessmentOrderByWithRelationInput
    agreements?: AgreementOrderByRelationAggregateInput
    signatures?: ElectronicSignatureOrderByRelationAggregateInput
    fundingSetup?: FundingSetupOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    auditTrail?: AuditTrailEntryOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    status?: StringFilter<"Application"> | string
    currentStep?: StringFilter<"Application"> | string
    accountType?: StringFilter<"Application"> | string
    customerType?: StringFilter<"Application"> | string
    applicantId?: StringFilter<"Application"> | string
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    metadata?: JsonFilter<"Application">
    userId?: IntFilter<"Application"> | number
    personalInfo?: XOR<PersonalInfoNullableScalarRelationFilter, PersonalInfoWhereInput> | null
    businessProfile?: XOR<BusinessProfileNullableScalarRelationFilter, BusinessProfileWhereInput> | null
    financialProfile?: XOR<FinancialProfileNullableScalarRelationFilter, FinancialProfileWhereInput> | null
    productSelections?: ProductSelectionListRelationFilter
    documents?: DocumentListRelationFilter
    additionalSigners?: AdditionalSignerListRelationFilter
    kycVerification?: XOR<KYCVerificationNullableScalarRelationFilter, KYCVerificationWhereInput> | null
    riskAssessment?: XOR<RiskAssessmentNullableScalarRelationFilter, RiskAssessmentWhereInput> | null
    agreements?: AgreementListRelationFilter
    signatures?: ElectronicSignatureListRelationFilter
    fundingSetup?: XOR<FundingSetupNullableScalarRelationFilter, FundingSetupWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    auditTrail?: AuditTrailEntryListRelationFilter
  }, "id">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    currentStep?: SortOrder
    accountType?: SortOrder
    customerType?: SortOrder
    applicantId?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Application"> | string
    status?: StringWithAggregatesFilter<"Application"> | string
    currentStep?: StringWithAggregatesFilter<"Application"> | string
    accountType?: StringWithAggregatesFilter<"Application"> | string
    customerType?: StringWithAggregatesFilter<"Application"> | string
    applicantId?: StringWithAggregatesFilter<"Application"> | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    metadata?: JsonWithAggregatesFilter<"Application">
    userId?: IntWithAggregatesFilter<"Application"> | number
  }

  export type PersonalInfoWhereInput = {
    AND?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    OR?: PersonalInfoWhereInput[]
    NOT?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    id?: StringFilter<"PersonalInfo"> | string
    firstName?: StringFilter<"PersonalInfo"> | string
    middleName?: StringNullableFilter<"PersonalInfo"> | string | null
    lastName?: StringFilter<"PersonalInfo"> | string
    suffix?: StringNullableFilter<"PersonalInfo"> | string | null
    dateOfBirth?: StringFilter<"PersonalInfo"> | string
    ssn?: StringFilter<"PersonalInfo"> | string
    phone?: StringFilter<"PersonalInfo"> | string
    email?: StringFilter<"PersonalInfo"> | string
    mailingAddress?: JsonFilter<"PersonalInfo">
    physicalAddress?: JsonNullableFilter<"PersonalInfo">
    employmentStatus?: StringFilter<"PersonalInfo"> | string
    occupation?: StringNullableFilter<"PersonalInfo"> | string | null
    employer?: StringNullableFilter<"PersonalInfo"> | string | null
    workPhone?: StringNullableFilter<"PersonalInfo"> | string | null
    applicationId?: StringFilter<"PersonalInfo"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type PersonalInfoOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    suffix?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    ssn?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    mailingAddress?: SortOrder
    physicalAddress?: SortOrderInput | SortOrder
    employmentStatus?: SortOrder
    occupation?: SortOrderInput | SortOrder
    employer?: SortOrderInput | SortOrder
    workPhone?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type PersonalInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    OR?: PersonalInfoWhereInput[]
    NOT?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    firstName?: StringFilter<"PersonalInfo"> | string
    middleName?: StringNullableFilter<"PersonalInfo"> | string | null
    lastName?: StringFilter<"PersonalInfo"> | string
    suffix?: StringNullableFilter<"PersonalInfo"> | string | null
    dateOfBirth?: StringFilter<"PersonalInfo"> | string
    ssn?: StringFilter<"PersonalInfo"> | string
    phone?: StringFilter<"PersonalInfo"> | string
    email?: StringFilter<"PersonalInfo"> | string
    mailingAddress?: JsonFilter<"PersonalInfo">
    physicalAddress?: JsonNullableFilter<"PersonalInfo">
    employmentStatus?: StringFilter<"PersonalInfo"> | string
    occupation?: StringNullableFilter<"PersonalInfo"> | string | null
    employer?: StringNullableFilter<"PersonalInfo"> | string | null
    workPhone?: StringNullableFilter<"PersonalInfo"> | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type PersonalInfoOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    suffix?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    ssn?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    mailingAddress?: SortOrder
    physicalAddress?: SortOrderInput | SortOrder
    employmentStatus?: SortOrder
    occupation?: SortOrderInput | SortOrder
    employer?: SortOrderInput | SortOrder
    workPhone?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    _count?: PersonalInfoCountOrderByAggregateInput
    _max?: PersonalInfoMaxOrderByAggregateInput
    _min?: PersonalInfoMinOrderByAggregateInput
  }

  export type PersonalInfoScalarWhereWithAggregatesInput = {
    AND?: PersonalInfoScalarWhereWithAggregatesInput | PersonalInfoScalarWhereWithAggregatesInput[]
    OR?: PersonalInfoScalarWhereWithAggregatesInput[]
    NOT?: PersonalInfoScalarWhereWithAggregatesInput | PersonalInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PersonalInfo"> | string
    firstName?: StringWithAggregatesFilter<"PersonalInfo"> | string
    middleName?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    lastName?: StringWithAggregatesFilter<"PersonalInfo"> | string
    suffix?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    dateOfBirth?: StringWithAggregatesFilter<"PersonalInfo"> | string
    ssn?: StringWithAggregatesFilter<"PersonalInfo"> | string
    phone?: StringWithAggregatesFilter<"PersonalInfo"> | string
    email?: StringWithAggregatesFilter<"PersonalInfo"> | string
    mailingAddress?: JsonWithAggregatesFilter<"PersonalInfo">
    physicalAddress?: JsonNullableWithAggregatesFilter<"PersonalInfo">
    employmentStatus?: StringWithAggregatesFilter<"PersonalInfo"> | string
    occupation?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    employer?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    workPhone?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    applicationId?: StringWithAggregatesFilter<"PersonalInfo"> | string
  }

  export type BusinessProfileWhereInput = {
    AND?: BusinessProfileWhereInput | BusinessProfileWhereInput[]
    OR?: BusinessProfileWhereInput[]
    NOT?: BusinessProfileWhereInput | BusinessProfileWhereInput[]
    id?: StringFilter<"BusinessProfile"> | string
    businessName?: StringFilter<"BusinessProfile"> | string
    dbaName?: StringNullableFilter<"BusinessProfile"> | string | null
    ein?: StringFilter<"BusinessProfile"> | string
    entityType?: StringFilter<"BusinessProfile"> | string
    industryType?: StringFilter<"BusinessProfile"> | string
    dateEstablished?: StringFilter<"BusinessProfile"> | string
    businessAddress?: JsonFilter<"BusinessProfile">
    mailingAddress?: JsonNullableFilter<"BusinessProfile">
    businessPhone?: StringFilter<"BusinessProfile"> | string
    businessEmail?: StringFilter<"BusinessProfile"> | string
    website?: StringNullableFilter<"BusinessProfile"> | string | null
    description?: StringFilter<"BusinessProfile"> | string
    isCashIntensive?: BoolFilter<"BusinessProfile"> | boolean
    monthlyTransactionVolume?: FloatFilter<"BusinessProfile"> | number
    monthlyTransactionCount?: IntFilter<"BusinessProfile"> | number
    expectedBalance?: FloatFilter<"BusinessProfile"> | number
    applicationId?: StringFilter<"BusinessProfile"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type BusinessProfileOrderByWithRelationInput = {
    id?: SortOrder
    businessName?: SortOrder
    dbaName?: SortOrderInput | SortOrder
    ein?: SortOrder
    entityType?: SortOrder
    industryType?: SortOrder
    dateEstablished?: SortOrder
    businessAddress?: SortOrder
    mailingAddress?: SortOrderInput | SortOrder
    businessPhone?: SortOrder
    businessEmail?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrder
    isCashIntensive?: SortOrder
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type BusinessProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: BusinessProfileWhereInput | BusinessProfileWhereInput[]
    OR?: BusinessProfileWhereInput[]
    NOT?: BusinessProfileWhereInput | BusinessProfileWhereInput[]
    businessName?: StringFilter<"BusinessProfile"> | string
    dbaName?: StringNullableFilter<"BusinessProfile"> | string | null
    ein?: StringFilter<"BusinessProfile"> | string
    entityType?: StringFilter<"BusinessProfile"> | string
    industryType?: StringFilter<"BusinessProfile"> | string
    dateEstablished?: StringFilter<"BusinessProfile"> | string
    businessAddress?: JsonFilter<"BusinessProfile">
    mailingAddress?: JsonNullableFilter<"BusinessProfile">
    businessPhone?: StringFilter<"BusinessProfile"> | string
    businessEmail?: StringFilter<"BusinessProfile"> | string
    website?: StringNullableFilter<"BusinessProfile"> | string | null
    description?: StringFilter<"BusinessProfile"> | string
    isCashIntensive?: BoolFilter<"BusinessProfile"> | boolean
    monthlyTransactionVolume?: FloatFilter<"BusinessProfile"> | number
    monthlyTransactionCount?: IntFilter<"BusinessProfile"> | number
    expectedBalance?: FloatFilter<"BusinessProfile"> | number
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type BusinessProfileOrderByWithAggregationInput = {
    id?: SortOrder
    businessName?: SortOrder
    dbaName?: SortOrderInput | SortOrder
    ein?: SortOrder
    entityType?: SortOrder
    industryType?: SortOrder
    dateEstablished?: SortOrder
    businessAddress?: SortOrder
    mailingAddress?: SortOrderInput | SortOrder
    businessPhone?: SortOrder
    businessEmail?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrder
    isCashIntensive?: SortOrder
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
    applicationId?: SortOrder
    _count?: BusinessProfileCountOrderByAggregateInput
    _avg?: BusinessProfileAvgOrderByAggregateInput
    _max?: BusinessProfileMaxOrderByAggregateInput
    _min?: BusinessProfileMinOrderByAggregateInput
    _sum?: BusinessProfileSumOrderByAggregateInput
  }

  export type BusinessProfileScalarWhereWithAggregatesInput = {
    AND?: BusinessProfileScalarWhereWithAggregatesInput | BusinessProfileScalarWhereWithAggregatesInput[]
    OR?: BusinessProfileScalarWhereWithAggregatesInput[]
    NOT?: BusinessProfileScalarWhereWithAggregatesInput | BusinessProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessProfile"> | string
    businessName?: StringWithAggregatesFilter<"BusinessProfile"> | string
    dbaName?: StringNullableWithAggregatesFilter<"BusinessProfile"> | string | null
    ein?: StringWithAggregatesFilter<"BusinessProfile"> | string
    entityType?: StringWithAggregatesFilter<"BusinessProfile"> | string
    industryType?: StringWithAggregatesFilter<"BusinessProfile"> | string
    dateEstablished?: StringWithAggregatesFilter<"BusinessProfile"> | string
    businessAddress?: JsonWithAggregatesFilter<"BusinessProfile">
    mailingAddress?: JsonNullableWithAggregatesFilter<"BusinessProfile">
    businessPhone?: StringWithAggregatesFilter<"BusinessProfile"> | string
    businessEmail?: StringWithAggregatesFilter<"BusinessProfile"> | string
    website?: StringNullableWithAggregatesFilter<"BusinessProfile"> | string | null
    description?: StringWithAggregatesFilter<"BusinessProfile"> | string
    isCashIntensive?: BoolWithAggregatesFilter<"BusinessProfile"> | boolean
    monthlyTransactionVolume?: FloatWithAggregatesFilter<"BusinessProfile"> | number
    monthlyTransactionCount?: IntWithAggregatesFilter<"BusinessProfile"> | number
    expectedBalance?: FloatWithAggregatesFilter<"BusinessProfile"> | number
    applicationId?: StringWithAggregatesFilter<"BusinessProfile"> | string
  }

  export type FinancialProfileWhereInput = {
    AND?: FinancialProfileWhereInput | FinancialProfileWhereInput[]
    OR?: FinancialProfileWhereInput[]
    NOT?: FinancialProfileWhereInput | FinancialProfileWhereInput[]
    id?: StringFilter<"FinancialProfile"> | string
    annualIncome?: FloatFilter<"FinancialProfile"> | number
    incomeSource?: StringNullableListFilter<"FinancialProfile">
    employmentInfo?: JsonNullableFilter<"FinancialProfile">
    assets?: FloatFilter<"FinancialProfile"> | number
    liabilities?: FloatFilter<"FinancialProfile"> | number
    bankingRelationships?: JsonNullableListFilter<"FinancialProfile">
    accountActivities?: JsonNullableListFilter<"FinancialProfile">
    applicationId?: StringFilter<"FinancialProfile"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type FinancialProfileOrderByWithRelationInput = {
    id?: SortOrder
    annualIncome?: SortOrder
    incomeSource?: SortOrder
    employmentInfo?: SortOrderInput | SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
    bankingRelationships?: SortOrder
    accountActivities?: SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type FinancialProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: FinancialProfileWhereInput | FinancialProfileWhereInput[]
    OR?: FinancialProfileWhereInput[]
    NOT?: FinancialProfileWhereInput | FinancialProfileWhereInput[]
    annualIncome?: FloatFilter<"FinancialProfile"> | number
    incomeSource?: StringNullableListFilter<"FinancialProfile">
    employmentInfo?: JsonNullableFilter<"FinancialProfile">
    assets?: FloatFilter<"FinancialProfile"> | number
    liabilities?: FloatFilter<"FinancialProfile"> | number
    bankingRelationships?: JsonNullableListFilter<"FinancialProfile">
    accountActivities?: JsonNullableListFilter<"FinancialProfile">
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type FinancialProfileOrderByWithAggregationInput = {
    id?: SortOrder
    annualIncome?: SortOrder
    incomeSource?: SortOrder
    employmentInfo?: SortOrderInput | SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
    bankingRelationships?: SortOrder
    accountActivities?: SortOrder
    applicationId?: SortOrder
    _count?: FinancialProfileCountOrderByAggregateInput
    _avg?: FinancialProfileAvgOrderByAggregateInput
    _max?: FinancialProfileMaxOrderByAggregateInput
    _min?: FinancialProfileMinOrderByAggregateInput
    _sum?: FinancialProfileSumOrderByAggregateInput
  }

  export type FinancialProfileScalarWhereWithAggregatesInput = {
    AND?: FinancialProfileScalarWhereWithAggregatesInput | FinancialProfileScalarWhereWithAggregatesInput[]
    OR?: FinancialProfileScalarWhereWithAggregatesInput[]
    NOT?: FinancialProfileScalarWhereWithAggregatesInput | FinancialProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialProfile"> | string
    annualIncome?: FloatWithAggregatesFilter<"FinancialProfile"> | number
    incomeSource?: StringNullableListFilter<"FinancialProfile">
    employmentInfo?: JsonNullableWithAggregatesFilter<"FinancialProfile">
    assets?: FloatWithAggregatesFilter<"FinancialProfile"> | number
    liabilities?: FloatWithAggregatesFilter<"FinancialProfile"> | number
    bankingRelationships?: JsonNullableListFilter<"FinancialProfile">
    accountActivities?: JsonNullableListFilter<"FinancialProfile">
    applicationId?: StringWithAggregatesFilter<"FinancialProfile"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    type?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    features?: StringNullableListFilter<"Product">
    minimumBalance?: FloatFilter<"Product"> | number
    monthlyFee?: FloatFilter<"Product"> | number
    interestRate?: FloatNullableFilter<"Product"> | number | null
    isActive?: BoolFilter<"Product"> | boolean
    eligibilityRules?: JsonNullableListFilter<"Product">
    productSelections?: ProductSelectionListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    features?: SortOrder
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    eligibilityRules?: SortOrder
    productSelections?: ProductSelectionOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    type?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    features?: StringNullableListFilter<"Product">
    minimumBalance?: FloatFilter<"Product"> | number
    monthlyFee?: FloatFilter<"Product"> | number
    interestRate?: FloatNullableFilter<"Product"> | number | null
    isActive?: BoolFilter<"Product"> | boolean
    eligibilityRules?: JsonNullableListFilter<"Product">
    productSelections?: ProductSelectionListRelationFilter
  }, "id" | "name">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    features?: SortOrder
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    eligibilityRules?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    type?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    features?: StringNullableListFilter<"Product">
    minimumBalance?: FloatWithAggregatesFilter<"Product"> | number
    monthlyFee?: FloatWithAggregatesFilter<"Product"> | number
    interestRate?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    eligibilityRules?: JsonNullableListFilter<"Product">
  }

  export type ProductSelectionWhereInput = {
    AND?: ProductSelectionWhereInput | ProductSelectionWhereInput[]
    OR?: ProductSelectionWhereInput[]
    NOT?: ProductSelectionWhereInput | ProductSelectionWhereInput[]
    id?: StringFilter<"ProductSelection"> | string
    selectedFeatures?: StringNullableListFilter<"ProductSelection">
    initialDeposit?: FloatNullableFilter<"ProductSelection"> | number | null
    applicationId?: StringFilter<"ProductSelection"> | string
    productId?: StringFilter<"ProductSelection"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductSelectionOrderByWithRelationInput = {
    id?: SortOrder
    selectedFeatures?: SortOrder
    initialDeposit?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    productId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ProductSelectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductSelectionWhereInput | ProductSelectionWhereInput[]
    OR?: ProductSelectionWhereInput[]
    NOT?: ProductSelectionWhereInput | ProductSelectionWhereInput[]
    selectedFeatures?: StringNullableListFilter<"ProductSelection">
    initialDeposit?: FloatNullableFilter<"ProductSelection"> | number | null
    applicationId?: StringFilter<"ProductSelection"> | string
    productId?: StringFilter<"ProductSelection"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductSelectionOrderByWithAggregationInput = {
    id?: SortOrder
    selectedFeatures?: SortOrder
    initialDeposit?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    productId?: SortOrder
    _count?: ProductSelectionCountOrderByAggregateInput
    _avg?: ProductSelectionAvgOrderByAggregateInput
    _max?: ProductSelectionMaxOrderByAggregateInput
    _min?: ProductSelectionMinOrderByAggregateInput
    _sum?: ProductSelectionSumOrderByAggregateInput
  }

  export type ProductSelectionScalarWhereWithAggregatesInput = {
    AND?: ProductSelectionScalarWhereWithAggregatesInput | ProductSelectionScalarWhereWithAggregatesInput[]
    OR?: ProductSelectionScalarWhereWithAggregatesInput[]
    NOT?: ProductSelectionScalarWhereWithAggregatesInput | ProductSelectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductSelection"> | string
    selectedFeatures?: StringNullableListFilter<"ProductSelection">
    initialDeposit?: FloatNullableWithAggregatesFilter<"ProductSelection"> | number | null
    applicationId?: StringWithAggregatesFilter<"ProductSelection"> | string
    productId?: StringWithAggregatesFilter<"ProductSelection"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    verificationStatus?: StringFilter<"Document"> | string
    verificationDetails?: JsonNullableFilter<"Document">
    applicationId?: StringFilter<"Document"> | string
    signerId?: StringNullableFilter<"Document"> | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    signer?: XOR<AdditionalSignerNullableScalarRelationFilter, AdditionalSignerWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    verificationStatus?: SortOrder
    verificationDetails?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    signerId?: SortOrderInput | SortOrder
    application?: ApplicationOrderByWithRelationInput
    signer?: AdditionalSignerOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    type?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    verificationStatus?: StringFilter<"Document"> | string
    verificationDetails?: JsonNullableFilter<"Document">
    applicationId?: StringFilter<"Document"> | string
    signerId?: StringNullableFilter<"Document"> | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    signer?: XOR<AdditionalSignerNullableScalarRelationFilter, AdditionalSignerWhereInput> | null
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    verificationStatus?: SortOrder
    verificationDetails?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    signerId?: SortOrderInput | SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    type?: StringWithAggregatesFilter<"Document"> | string
    fileName?: StringWithAggregatesFilter<"Document"> | string
    fileSize?: IntWithAggregatesFilter<"Document"> | number
    mimeType?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    verificationStatus?: StringWithAggregatesFilter<"Document"> | string
    verificationDetails?: JsonNullableWithAggregatesFilter<"Document">
    applicationId?: StringWithAggregatesFilter<"Document"> | string
    signerId?: StringNullableWithAggregatesFilter<"Document"> | string | null
  }

  export type KYCVerificationWhereInput = {
    AND?: KYCVerificationWhereInput | KYCVerificationWhereInput[]
    OR?: KYCVerificationWhereInput[]
    NOT?: KYCVerificationWhereInput | KYCVerificationWhereInput[]
    id?: StringFilter<"KYCVerification"> | string
    status?: StringFilter<"KYCVerification"> | string
    provider?: StringFilter<"KYCVerification"> | string
    verificationId?: StringFilter<"KYCVerification"> | string
    confidence?: FloatFilter<"KYCVerification"> | number
    verifiedAt?: DateTimeNullableFilter<"KYCVerification"> | Date | string | null
    results?: JsonFilter<"KYCVerification">
    applicationId?: StringFilter<"KYCVerification"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type KYCVerificationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    verificationId?: SortOrder
    confidence?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    results?: SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type KYCVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: KYCVerificationWhereInput | KYCVerificationWhereInput[]
    OR?: KYCVerificationWhereInput[]
    NOT?: KYCVerificationWhereInput | KYCVerificationWhereInput[]
    status?: StringFilter<"KYCVerification"> | string
    provider?: StringFilter<"KYCVerification"> | string
    verificationId?: StringFilter<"KYCVerification"> | string
    confidence?: FloatFilter<"KYCVerification"> | number
    verifiedAt?: DateTimeNullableFilter<"KYCVerification"> | Date | string | null
    results?: JsonFilter<"KYCVerification">
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type KYCVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    verificationId?: SortOrder
    confidence?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    results?: SortOrder
    applicationId?: SortOrder
    _count?: KYCVerificationCountOrderByAggregateInput
    _avg?: KYCVerificationAvgOrderByAggregateInput
    _max?: KYCVerificationMaxOrderByAggregateInput
    _min?: KYCVerificationMinOrderByAggregateInput
    _sum?: KYCVerificationSumOrderByAggregateInput
  }

  export type KYCVerificationScalarWhereWithAggregatesInput = {
    AND?: KYCVerificationScalarWhereWithAggregatesInput | KYCVerificationScalarWhereWithAggregatesInput[]
    OR?: KYCVerificationScalarWhereWithAggregatesInput[]
    NOT?: KYCVerificationScalarWhereWithAggregatesInput | KYCVerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KYCVerification"> | string
    status?: StringWithAggregatesFilter<"KYCVerification"> | string
    provider?: StringWithAggregatesFilter<"KYCVerification"> | string
    verificationId?: StringWithAggregatesFilter<"KYCVerification"> | string
    confidence?: FloatWithAggregatesFilter<"KYCVerification"> | number
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"KYCVerification"> | Date | string | null
    results?: JsonWithAggregatesFilter<"KYCVerification">
    applicationId?: StringWithAggregatesFilter<"KYCVerification"> | string
  }

  export type AdditionalSignerWhereInput = {
    AND?: AdditionalSignerWhereInput | AdditionalSignerWhereInput[]
    OR?: AdditionalSignerWhereInput[]
    NOT?: AdditionalSignerWhereInput | AdditionalSignerWhereInput[]
    id?: StringFilter<"AdditionalSigner"> | string
    personalInfo?: JsonFilter<"AdditionalSigner">
    role?: StringFilter<"AdditionalSigner"> | string
    relationshipToBusiness?: StringNullableFilter<"AdditionalSigner"> | string | null
    beneficialOwnershipPercentage?: FloatNullableFilter<"AdditionalSigner"> | number | null
    hasSigningAuthority?: BoolFilter<"AdditionalSigner"> | boolean
    kycStatus?: StringFilter<"AdditionalSigner"> | string
    applicationId?: StringFilter<"AdditionalSigner"> | string
    documents?: DocumentListRelationFilter
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type AdditionalSignerOrderByWithRelationInput = {
    id?: SortOrder
    personalInfo?: SortOrder
    role?: SortOrder
    relationshipToBusiness?: SortOrderInput | SortOrder
    beneficialOwnershipPercentage?: SortOrderInput | SortOrder
    hasSigningAuthority?: SortOrder
    kycStatus?: SortOrder
    applicationId?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type AdditionalSignerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdditionalSignerWhereInput | AdditionalSignerWhereInput[]
    OR?: AdditionalSignerWhereInput[]
    NOT?: AdditionalSignerWhereInput | AdditionalSignerWhereInput[]
    personalInfo?: JsonFilter<"AdditionalSigner">
    role?: StringFilter<"AdditionalSigner"> | string
    relationshipToBusiness?: StringNullableFilter<"AdditionalSigner"> | string | null
    beneficialOwnershipPercentage?: FloatNullableFilter<"AdditionalSigner"> | number | null
    hasSigningAuthority?: BoolFilter<"AdditionalSigner"> | boolean
    kycStatus?: StringFilter<"AdditionalSigner"> | string
    applicationId?: StringFilter<"AdditionalSigner"> | string
    documents?: DocumentListRelationFilter
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id">

  export type AdditionalSignerOrderByWithAggregationInput = {
    id?: SortOrder
    personalInfo?: SortOrder
    role?: SortOrder
    relationshipToBusiness?: SortOrderInput | SortOrder
    beneficialOwnershipPercentage?: SortOrderInput | SortOrder
    hasSigningAuthority?: SortOrder
    kycStatus?: SortOrder
    applicationId?: SortOrder
    _count?: AdditionalSignerCountOrderByAggregateInput
    _avg?: AdditionalSignerAvgOrderByAggregateInput
    _max?: AdditionalSignerMaxOrderByAggregateInput
    _min?: AdditionalSignerMinOrderByAggregateInput
    _sum?: AdditionalSignerSumOrderByAggregateInput
  }

  export type AdditionalSignerScalarWhereWithAggregatesInput = {
    AND?: AdditionalSignerScalarWhereWithAggregatesInput | AdditionalSignerScalarWhereWithAggregatesInput[]
    OR?: AdditionalSignerScalarWhereWithAggregatesInput[]
    NOT?: AdditionalSignerScalarWhereWithAggregatesInput | AdditionalSignerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdditionalSigner"> | string
    personalInfo?: JsonWithAggregatesFilter<"AdditionalSigner">
    role?: StringWithAggregatesFilter<"AdditionalSigner"> | string
    relationshipToBusiness?: StringNullableWithAggregatesFilter<"AdditionalSigner"> | string | null
    beneficialOwnershipPercentage?: FloatNullableWithAggregatesFilter<"AdditionalSigner"> | number | null
    hasSigningAuthority?: BoolWithAggregatesFilter<"AdditionalSigner"> | boolean
    kycStatus?: StringWithAggregatesFilter<"AdditionalSigner"> | string
    applicationId?: StringWithAggregatesFilter<"AdditionalSigner"> | string
  }

  export type RiskAssessmentWhereInput = {
    AND?: RiskAssessmentWhereInput | RiskAssessmentWhereInput[]
    OR?: RiskAssessmentWhereInput[]
    NOT?: RiskAssessmentWhereInput | RiskAssessmentWhereInput[]
    id?: StringFilter<"RiskAssessment"> | string
    overallRisk?: StringFilter<"RiskAssessment"> | string
    riskScore?: IntFilter<"RiskAssessment"> | number
    factors?: JsonNullableListFilter<"RiskAssessment">
    recommendations?: StringNullableListFilter<"RiskAssessment">
    requiresManualReview?: BoolFilter<"RiskAssessment"> | boolean
    assessedAt?: DateTimeFilter<"RiskAssessment"> | Date | string
    assessedBy?: StringFilter<"RiskAssessment"> | string
    applicationId?: StringFilter<"RiskAssessment"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type RiskAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    overallRisk?: SortOrder
    riskScore?: SortOrder
    factors?: SortOrder
    recommendations?: SortOrder
    requiresManualReview?: SortOrder
    assessedAt?: SortOrder
    assessedBy?: SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type RiskAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: RiskAssessmentWhereInput | RiskAssessmentWhereInput[]
    OR?: RiskAssessmentWhereInput[]
    NOT?: RiskAssessmentWhereInput | RiskAssessmentWhereInput[]
    overallRisk?: StringFilter<"RiskAssessment"> | string
    riskScore?: IntFilter<"RiskAssessment"> | number
    factors?: JsonNullableListFilter<"RiskAssessment">
    recommendations?: StringNullableListFilter<"RiskAssessment">
    requiresManualReview?: BoolFilter<"RiskAssessment"> | boolean
    assessedAt?: DateTimeFilter<"RiskAssessment"> | Date | string
    assessedBy?: StringFilter<"RiskAssessment"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type RiskAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    overallRisk?: SortOrder
    riskScore?: SortOrder
    factors?: SortOrder
    recommendations?: SortOrder
    requiresManualReview?: SortOrder
    assessedAt?: SortOrder
    assessedBy?: SortOrder
    applicationId?: SortOrder
    _count?: RiskAssessmentCountOrderByAggregateInput
    _avg?: RiskAssessmentAvgOrderByAggregateInput
    _max?: RiskAssessmentMaxOrderByAggregateInput
    _min?: RiskAssessmentMinOrderByAggregateInput
    _sum?: RiskAssessmentSumOrderByAggregateInput
  }

  export type RiskAssessmentScalarWhereWithAggregatesInput = {
    AND?: RiskAssessmentScalarWhereWithAggregatesInput | RiskAssessmentScalarWhereWithAggregatesInput[]
    OR?: RiskAssessmentScalarWhereWithAggregatesInput[]
    NOT?: RiskAssessmentScalarWhereWithAggregatesInput | RiskAssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RiskAssessment"> | string
    overallRisk?: StringWithAggregatesFilter<"RiskAssessment"> | string
    riskScore?: IntWithAggregatesFilter<"RiskAssessment"> | number
    factors?: JsonNullableListFilter<"RiskAssessment">
    recommendations?: StringNullableListFilter<"RiskAssessment">
    requiresManualReview?: BoolWithAggregatesFilter<"RiskAssessment"> | boolean
    assessedAt?: DateTimeWithAggregatesFilter<"RiskAssessment"> | Date | string
    assessedBy?: StringWithAggregatesFilter<"RiskAssessment"> | string
    applicationId?: StringWithAggregatesFilter<"RiskAssessment"> | string
  }

  export type DisclosureWhereInput = {
    AND?: DisclosureWhereInput | DisclosureWhereInput[]
    OR?: DisclosureWhereInput[]
    NOT?: DisclosureWhereInput | DisclosureWhereInput[]
    id?: StringFilter<"Disclosure"> | string
    type?: StringFilter<"Disclosure"> | string
    title?: StringFilter<"Disclosure"> | string
    content?: StringFilter<"Disclosure"> | string
    version?: StringFilter<"Disclosure"> | string
    effectiveDate?: StringFilter<"Disclosure"> | string
    required?: BoolFilter<"Disclosure"> | boolean
    applicableFor?: StringNullableListFilter<"Disclosure">
    agreements?: AgreementListRelationFilter
  }

  export type DisclosureOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    version?: SortOrder
    effectiveDate?: SortOrder
    required?: SortOrder
    applicableFor?: SortOrder
    agreements?: AgreementOrderByRelationAggregateInput
  }

  export type DisclosureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DisclosureWhereInput | DisclosureWhereInput[]
    OR?: DisclosureWhereInput[]
    NOT?: DisclosureWhereInput | DisclosureWhereInput[]
    type?: StringFilter<"Disclosure"> | string
    title?: StringFilter<"Disclosure"> | string
    content?: StringFilter<"Disclosure"> | string
    version?: StringFilter<"Disclosure"> | string
    effectiveDate?: StringFilter<"Disclosure"> | string
    required?: BoolFilter<"Disclosure"> | boolean
    applicableFor?: StringNullableListFilter<"Disclosure">
    agreements?: AgreementListRelationFilter
  }, "id">

  export type DisclosureOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    version?: SortOrder
    effectiveDate?: SortOrder
    required?: SortOrder
    applicableFor?: SortOrder
    _count?: DisclosureCountOrderByAggregateInput
    _max?: DisclosureMaxOrderByAggregateInput
    _min?: DisclosureMinOrderByAggregateInput
  }

  export type DisclosureScalarWhereWithAggregatesInput = {
    AND?: DisclosureScalarWhereWithAggregatesInput | DisclosureScalarWhereWithAggregatesInput[]
    OR?: DisclosureScalarWhereWithAggregatesInput[]
    NOT?: DisclosureScalarWhereWithAggregatesInput | DisclosureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Disclosure"> | string
    type?: StringWithAggregatesFilter<"Disclosure"> | string
    title?: StringWithAggregatesFilter<"Disclosure"> | string
    content?: StringWithAggregatesFilter<"Disclosure"> | string
    version?: StringWithAggregatesFilter<"Disclosure"> | string
    effectiveDate?: StringWithAggregatesFilter<"Disclosure"> | string
    required?: BoolWithAggregatesFilter<"Disclosure"> | boolean
    applicableFor?: StringNullableListFilter<"Disclosure">
  }

  export type AgreementWhereInput = {
    AND?: AgreementWhereInput | AgreementWhereInput[]
    OR?: AgreementWhereInput[]
    NOT?: AgreementWhereInput | AgreementWhereInput[]
    id?: StringFilter<"Agreement"> | string
    acknowledged?: BoolFilter<"Agreement"> | boolean
    acknowledgedAt?: DateTimeNullableFilter<"Agreement"> | Date | string | null
    ipAddress?: StringFilter<"Agreement"> | string
    userAgent?: StringFilter<"Agreement"> | string
    applicationId?: StringFilter<"Agreement"> | string
    disclosureId?: StringFilter<"Agreement"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    disclosure?: XOR<DisclosureScalarRelationFilter, DisclosureWhereInput>
  }

  export type AgreementOrderByWithRelationInput = {
    id?: SortOrder
    acknowledged?: SortOrder
    acknowledgedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
    disclosureId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    disclosure?: DisclosureOrderByWithRelationInput
  }

  export type AgreementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgreementWhereInput | AgreementWhereInput[]
    OR?: AgreementWhereInput[]
    NOT?: AgreementWhereInput | AgreementWhereInput[]
    acknowledged?: BoolFilter<"Agreement"> | boolean
    acknowledgedAt?: DateTimeNullableFilter<"Agreement"> | Date | string | null
    ipAddress?: StringFilter<"Agreement"> | string
    userAgent?: StringFilter<"Agreement"> | string
    applicationId?: StringFilter<"Agreement"> | string
    disclosureId?: StringFilter<"Agreement"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    disclosure?: XOR<DisclosureScalarRelationFilter, DisclosureWhereInput>
  }, "id">

  export type AgreementOrderByWithAggregationInput = {
    id?: SortOrder
    acknowledged?: SortOrder
    acknowledgedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
    disclosureId?: SortOrder
    _count?: AgreementCountOrderByAggregateInput
    _max?: AgreementMaxOrderByAggregateInput
    _min?: AgreementMinOrderByAggregateInput
  }

  export type AgreementScalarWhereWithAggregatesInput = {
    AND?: AgreementScalarWhereWithAggregatesInput | AgreementScalarWhereWithAggregatesInput[]
    OR?: AgreementScalarWhereWithAggregatesInput[]
    NOT?: AgreementScalarWhereWithAggregatesInput | AgreementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agreement"> | string
    acknowledged?: BoolWithAggregatesFilter<"Agreement"> | boolean
    acknowledgedAt?: DateTimeNullableWithAggregatesFilter<"Agreement"> | Date | string | null
    ipAddress?: StringWithAggregatesFilter<"Agreement"> | string
    userAgent?: StringWithAggregatesFilter<"Agreement"> | string
    applicationId?: StringWithAggregatesFilter<"Agreement"> | string
    disclosureId?: StringWithAggregatesFilter<"Agreement"> | string
  }

  export type ElectronicSignatureWhereInput = {
    AND?: ElectronicSignatureWhereInput | ElectronicSignatureWhereInput[]
    OR?: ElectronicSignatureWhereInput[]
    NOT?: ElectronicSignatureWhereInput | ElectronicSignatureWhereInput[]
    id?: StringFilter<"ElectronicSignature"> | string
    signerId?: StringFilter<"ElectronicSignature"> | string
    documentType?: StringFilter<"ElectronicSignature"> | string
    signatureData?: StringFilter<"ElectronicSignature"> | string
    signedAt?: DateTimeFilter<"ElectronicSignature"> | Date | string
    ipAddress?: StringFilter<"ElectronicSignature"> | string
    userAgent?: StringFilter<"ElectronicSignature"> | string
    biometric?: JsonNullableFilter<"ElectronicSignature">
    applicationId?: StringFilter<"ElectronicSignature"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type ElectronicSignatureOrderByWithRelationInput = {
    id?: SortOrder
    signerId?: SortOrder
    documentType?: SortOrder
    signatureData?: SortOrder
    signedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    biometric?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type ElectronicSignatureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ElectronicSignatureWhereInput | ElectronicSignatureWhereInput[]
    OR?: ElectronicSignatureWhereInput[]
    NOT?: ElectronicSignatureWhereInput | ElectronicSignatureWhereInput[]
    signerId?: StringFilter<"ElectronicSignature"> | string
    documentType?: StringFilter<"ElectronicSignature"> | string
    signatureData?: StringFilter<"ElectronicSignature"> | string
    signedAt?: DateTimeFilter<"ElectronicSignature"> | Date | string
    ipAddress?: StringFilter<"ElectronicSignature"> | string
    userAgent?: StringFilter<"ElectronicSignature"> | string
    biometric?: JsonNullableFilter<"ElectronicSignature">
    applicationId?: StringFilter<"ElectronicSignature"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id">

  export type ElectronicSignatureOrderByWithAggregationInput = {
    id?: SortOrder
    signerId?: SortOrder
    documentType?: SortOrder
    signatureData?: SortOrder
    signedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    biometric?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    _count?: ElectronicSignatureCountOrderByAggregateInput
    _max?: ElectronicSignatureMaxOrderByAggregateInput
    _min?: ElectronicSignatureMinOrderByAggregateInput
  }

  export type ElectronicSignatureScalarWhereWithAggregatesInput = {
    AND?: ElectronicSignatureScalarWhereWithAggregatesInput | ElectronicSignatureScalarWhereWithAggregatesInput[]
    OR?: ElectronicSignatureScalarWhereWithAggregatesInput[]
    NOT?: ElectronicSignatureScalarWhereWithAggregatesInput | ElectronicSignatureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    signerId?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    documentType?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    signatureData?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    signedAt?: DateTimeWithAggregatesFilter<"ElectronicSignature"> | Date | string
    ipAddress?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    userAgent?: StringWithAggregatesFilter<"ElectronicSignature"> | string
    biometric?: JsonNullableWithAggregatesFilter<"ElectronicSignature">
    applicationId?: StringWithAggregatesFilter<"ElectronicSignature"> | string
  }

  export type FundingSetupWhereInput = {
    AND?: FundingSetupWhereInput | FundingSetupWhereInput[]
    OR?: FundingSetupWhereInput[]
    NOT?: FundingSetupWhereInput | FundingSetupWhereInput[]
    id?: StringFilter<"FundingSetup"> | string
    method?: StringFilter<"FundingSetup"> | string
    amount?: FloatFilter<"FundingSetup"> | number
    status?: StringFilter<"FundingSetup"> | string
    details?: JsonFilter<"FundingSetup">
    createdAt?: DateTimeFilter<"FundingSetup"> | Date | string
    processedAt?: DateTimeNullableFilter<"FundingSetup"> | Date | string | null
    applicationId?: StringFilter<"FundingSetup"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type FundingSetupOrderByWithRelationInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type FundingSetupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: FundingSetupWhereInput | FundingSetupWhereInput[]
    OR?: FundingSetupWhereInput[]
    NOT?: FundingSetupWhereInput | FundingSetupWhereInput[]
    method?: StringFilter<"FundingSetup"> | string
    amount?: FloatFilter<"FundingSetup"> | number
    status?: StringFilter<"FundingSetup"> | string
    details?: JsonFilter<"FundingSetup">
    createdAt?: DateTimeFilter<"FundingSetup"> | Date | string
    processedAt?: DateTimeNullableFilter<"FundingSetup"> | Date | string | null
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id" | "applicationId">

  export type FundingSetupOrderByWithAggregationInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    _count?: FundingSetupCountOrderByAggregateInput
    _avg?: FundingSetupAvgOrderByAggregateInput
    _max?: FundingSetupMaxOrderByAggregateInput
    _min?: FundingSetupMinOrderByAggregateInput
    _sum?: FundingSetupSumOrderByAggregateInput
  }

  export type FundingSetupScalarWhereWithAggregatesInput = {
    AND?: FundingSetupScalarWhereWithAggregatesInput | FundingSetupScalarWhereWithAggregatesInput[]
    OR?: FundingSetupScalarWhereWithAggregatesInput[]
    NOT?: FundingSetupScalarWhereWithAggregatesInput | FundingSetupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FundingSetup"> | string
    method?: StringWithAggregatesFilter<"FundingSetup"> | string
    amount?: FloatWithAggregatesFilter<"FundingSetup"> | number
    status?: StringWithAggregatesFilter<"FundingSetup"> | string
    details?: JsonWithAggregatesFilter<"FundingSetup">
    createdAt?: DateTimeWithAggregatesFilter<"FundingSetup"> | Date | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"FundingSetup"> | Date | string | null
    applicationId?: StringWithAggregatesFilter<"FundingSetup"> | string
  }

  export type AuditTrailEntryWhereInput = {
    AND?: AuditTrailEntryWhereInput | AuditTrailEntryWhereInput[]
    OR?: AuditTrailEntryWhereInput[]
    NOT?: AuditTrailEntryWhereInput | AuditTrailEntryWhereInput[]
    id?: StringFilter<"AuditTrailEntry"> | string
    action?: StringFilter<"AuditTrailEntry"> | string
    description?: StringFilter<"AuditTrailEntry"> | string
    performedBy?: StringFilter<"AuditTrailEntry"> | string
    performedAt?: DateTimeFilter<"AuditTrailEntry"> | Date | string
    ipAddress?: StringFilter<"AuditTrailEntry"> | string
    userAgent?: StringFilter<"AuditTrailEntry"> | string
    changes?: JsonNullableFilter<"AuditTrailEntry">
    applicationId?: StringFilter<"AuditTrailEntry"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }

  export type AuditTrailEntryOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    description?: SortOrder
    performedBy?: SortOrder
    performedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    changes?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type AuditTrailEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditTrailEntryWhereInput | AuditTrailEntryWhereInput[]
    OR?: AuditTrailEntryWhereInput[]
    NOT?: AuditTrailEntryWhereInput | AuditTrailEntryWhereInput[]
    action?: StringFilter<"AuditTrailEntry"> | string
    description?: StringFilter<"AuditTrailEntry"> | string
    performedBy?: StringFilter<"AuditTrailEntry"> | string
    performedAt?: DateTimeFilter<"AuditTrailEntry"> | Date | string
    ipAddress?: StringFilter<"AuditTrailEntry"> | string
    userAgent?: StringFilter<"AuditTrailEntry"> | string
    changes?: JsonNullableFilter<"AuditTrailEntry">
    applicationId?: StringFilter<"AuditTrailEntry"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
  }, "id">

  export type AuditTrailEntryOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    description?: SortOrder
    performedBy?: SortOrder
    performedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    changes?: SortOrderInput | SortOrder
    applicationId?: SortOrder
    _count?: AuditTrailEntryCountOrderByAggregateInput
    _max?: AuditTrailEntryMaxOrderByAggregateInput
    _min?: AuditTrailEntryMinOrderByAggregateInput
  }

  export type AuditTrailEntryScalarWhereWithAggregatesInput = {
    AND?: AuditTrailEntryScalarWhereWithAggregatesInput | AuditTrailEntryScalarWhereWithAggregatesInput[]
    OR?: AuditTrailEntryScalarWhereWithAggregatesInput[]
    NOT?: AuditTrailEntryScalarWhereWithAggregatesInput | AuditTrailEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    action?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    description?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    performedBy?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    performedAt?: DateTimeWithAggregatesFilter<"AuditTrailEntry"> | Date | string
    ipAddress?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    userAgent?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
    changes?: JsonNullableWithAggregatesFilter<"AuditTrailEntry">
    applicationId?: StringWithAggregatesFilter<"AuditTrailEntry"> | string
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateInput = {
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
    userId: number
  }

  export type TokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyInput = {
    id?: number
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
    userId: number
  }

  export type TokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationCreateInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
  }

  export type ApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PersonalInfoCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus: string
    occupation?: string | null
    employer?: string | null
    workPhone?: string | null
    application: ApplicationCreateNestedOneWithoutPersonalInfoInput
  }

  export type PersonalInfoUncheckedCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus: string
    occupation?: string | null
    employer?: string | null
    workPhone?: string | null
    applicationId: string
  }

  export type PersonalInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    application?: ApplicationUpdateOneRequiredWithoutPersonalInfoNestedInput
  }

  export type PersonalInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalInfoCreateManyInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus: string
    occupation?: string | null
    employer?: string | null
    workPhone?: string | null
    applicationId: string
  }

  export type PersonalInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessProfileCreateInput = {
    id?: string
    businessName: string
    dbaName?: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone: string
    businessEmail: string
    website?: string | null
    description: string
    isCashIntensive?: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
    application: ApplicationCreateNestedOneWithoutBusinessProfileInput
  }

  export type BusinessProfileUncheckedCreateInput = {
    id?: string
    businessName: string
    dbaName?: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone: string
    businessEmail: string
    website?: string | null
    description: string
    isCashIntensive?: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
    applicationId: string
  }

  export type BusinessProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
    application?: ApplicationUpdateOneRequiredWithoutBusinessProfileNestedInput
  }

  export type BusinessProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessProfileCreateManyInput = {
    id?: string
    businessName: string
    dbaName?: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone: string
    businessEmail: string
    website?: string | null
    description: string
    isCashIntensive?: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
    applicationId: string
  }

  export type BusinessProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
  }

  export type BusinessProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialProfileCreateInput = {
    id?: string
    annualIncome: number
    incomeSource?: FinancialProfileCreateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets: number
    liabilities: number
    bankingRelationships?: FinancialProfileCreatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileCreateaccountActivitiesInput | InputJsonValue[]
    application: ApplicationCreateNestedOneWithoutFinancialProfileInput
  }

  export type FinancialProfileUncheckedCreateInput = {
    id?: string
    annualIncome: number
    incomeSource?: FinancialProfileCreateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets: number
    liabilities: number
    bankingRelationships?: FinancialProfileCreatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileCreateaccountActivitiesInput | InputJsonValue[]
    applicationId: string
  }

  export type FinancialProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
    application?: ApplicationUpdateOneRequiredWithoutFinancialProfileNestedInput
  }

  export type FinancialProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialProfileCreateManyInput = {
    id?: string
    annualIncome: number
    incomeSource?: FinancialProfileCreateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets: number
    liabilities: number
    bankingRelationships?: FinancialProfileCreatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileCreateaccountActivitiesInput | InputJsonValue[]
    applicationId: string
  }

  export type FinancialProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
  }

  export type FinancialProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    type: string
    description: string
    features?: ProductCreatefeaturesInput | string[]
    minimumBalance: number
    monthlyFee: number
    interestRate?: number | null
    isActive?: boolean
    eligibilityRules?: ProductCreateeligibilityRulesInput | InputJsonValue[]
    productSelections?: ProductSelectionCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    description: string
    features?: ProductCreatefeaturesInput | string[]
    minimumBalance: number
    monthlyFee: number
    interestRate?: number | null
    isActive?: boolean
    eligibilityRules?: ProductCreateeligibilityRulesInput | InputJsonValue[]
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
    productSelections?: ProductSelectionUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    type: string
    description: string
    features?: ProductCreatefeaturesInput | string[]
    minimumBalance: number
    monthlyFee: number
    interestRate?: number | null
    isActive?: boolean
    eligibilityRules?: ProductCreateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductSelectionCreateInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    application: ApplicationCreateNestedOneWithoutProductSelectionsInput
    product: ProductCreateNestedOneWithoutProductSelectionsInput
  }

  export type ProductSelectionUncheckedCreateInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    applicationId: string
    productId: string
  }

  export type ProductSelectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    application?: ApplicationUpdateOneRequiredWithoutProductSelectionsNestedInput
    product?: ProductUpdateOneRequiredWithoutProductSelectionsNestedInput
  }

  export type ProductSelectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    applicationId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSelectionCreateManyInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    applicationId: string
    productId: string
  }

  export type ProductSelectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ProductSelectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    applicationId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    application: ApplicationCreateNestedOneWithoutDocumentsInput
    signer?: AdditionalSignerCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
    signerId?: string | null
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    application?: ApplicationUpdateOneRequiredWithoutDocumentsNestedInput
    signer?: AdditionalSignerUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
    signerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
    signerId?: string | null
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
    signerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KYCVerificationCreateInput = {
    id?: string
    status?: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt?: Date | string | null
    results: JsonNullValueInput | InputJsonValue
    application: ApplicationCreateNestedOneWithoutKycVerificationInput
  }

  export type KYCVerificationUncheckedCreateInput = {
    id?: string
    status?: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt?: Date | string | null
    results: JsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type KYCVerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
    application?: ApplicationUpdateOneRequiredWithoutKycVerificationNestedInput
  }

  export type KYCVerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type KYCVerificationCreateManyInput = {
    id?: string
    status?: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt?: Date | string | null
    results: JsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type KYCVerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
  }

  export type KYCVerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type AdditionalSignerCreateInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    documents?: DocumentCreateNestedManyWithoutSignerInput
    application: ApplicationCreateNestedOneWithoutAdditionalSignersInput
  }

  export type AdditionalSignerUncheckedCreateInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    applicationId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutSignerInput
  }

  export type AdditionalSignerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutSignerNestedInput
    application?: ApplicationUpdateOneRequiredWithoutAdditionalSignersNestedInput
  }

  export type AdditionalSignerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutSignerNestedInput
  }

  export type AdditionalSignerCreateManyInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    applicationId: string
  }

  export type AdditionalSignerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
  }

  export type AdditionalSignerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskAssessmentCreateInput = {
    id?: string
    overallRisk: string
    riskScore: number
    factors?: RiskAssessmentCreatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentCreaterecommendationsInput | string[]
    requiresManualReview?: boolean
    assessedAt?: Date | string
    assessedBy: string
    application: ApplicationCreateNestedOneWithoutRiskAssessmentInput
  }

  export type RiskAssessmentUncheckedCreateInput = {
    id?: string
    overallRisk: string
    riskScore: number
    factors?: RiskAssessmentCreatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentCreaterecommendationsInput | string[]
    requiresManualReview?: boolean
    assessedAt?: Date | string
    assessedBy: string
    applicationId: string
  }

  export type RiskAssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutRiskAssessmentNestedInput
  }

  export type RiskAssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskAssessmentCreateManyInput = {
    id?: string
    overallRisk: string
    riskScore: number
    factors?: RiskAssessmentCreatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentCreaterecommendationsInput | string[]
    requiresManualReview?: boolean
    assessedAt?: Date | string
    assessedBy: string
    applicationId: string
  }

  export type RiskAssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
  }

  export type RiskAssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type DisclosureCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required?: boolean
    applicableFor?: DisclosureCreateapplicableForInput | string[]
    agreements?: AgreementCreateNestedManyWithoutDisclosureInput
  }

  export type DisclosureUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required?: boolean
    applicableFor?: DisclosureCreateapplicableForInput | string[]
    agreements?: AgreementUncheckedCreateNestedManyWithoutDisclosureInput
  }

  export type DisclosureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
    agreements?: AgreementUpdateManyWithoutDisclosureNestedInput
  }

  export type DisclosureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
    agreements?: AgreementUncheckedUpdateManyWithoutDisclosureNestedInput
  }

  export type DisclosureCreateManyInput = {
    id?: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required?: boolean
    applicableFor?: DisclosureCreateapplicableForInput | string[]
  }

  export type DisclosureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
  }

  export type DisclosureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
  }

  export type AgreementCreateInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    application: ApplicationCreateNestedOneWithoutAgreementsInput
    disclosure: DisclosureCreateNestedOneWithoutAgreementsInput
  }

  export type AgreementUncheckedCreateInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    applicationId: string
    disclosureId: string
  }

  export type AgreementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutAgreementsNestedInput
    disclosure?: DisclosureUpdateOneRequiredWithoutAgreementsNestedInput
  }

  export type AgreementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    disclosureId?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementCreateManyInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    applicationId: string
    disclosureId: string
  }

  export type AgreementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    disclosureId?: StringFieldUpdateOperationsInput | string
  }

  export type ElectronicSignatureCreateInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    application: ApplicationCreateNestedOneWithoutSignaturesInput
  }

  export type ElectronicSignatureUncheckedCreateInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type ElectronicSignatureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    application?: ApplicationUpdateOneRequiredWithoutSignaturesNestedInput
  }

  export type ElectronicSignatureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type ElectronicSignatureCreateManyInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type ElectronicSignatureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ElectronicSignatureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type FundingSetupCreateInput = {
    id?: string
    method: string
    amount: number
    status?: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    processedAt?: Date | string | null
    application: ApplicationCreateNestedOneWithoutFundingSetupInput
  }

  export type FundingSetupUncheckedCreateInput = {
    id?: string
    method: string
    amount: number
    status?: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    processedAt?: Date | string | null
    applicationId: string
  }

  export type FundingSetupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    application?: ApplicationUpdateOneRequiredWithoutFundingSetupNestedInput
  }

  export type FundingSetupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type FundingSetupCreateManyInput = {
    id?: string
    method: string
    amount: number
    status?: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    processedAt?: Date | string | null
    applicationId: string
  }

  export type FundingSetupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FundingSetupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditTrailEntryCreateInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
    application: ApplicationCreateNestedOneWithoutAuditTrailInput
  }

  export type AuditTrailEntryUncheckedCreateInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type AuditTrailEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
    application?: ApplicationUpdateOneRequiredWithoutAuditTrailNestedInput
  }

  export type AuditTrailEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditTrailEntryCreateManyInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type AuditTrailEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isEmailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isEmailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isEmailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expires?: SortOrder
    blacklisted?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expires?: SortOrder
    blacklisted?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expires?: SortOrder
    blacklisted?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PersonalInfoNullableScalarRelationFilter = {
    is?: PersonalInfoWhereInput | null
    isNot?: PersonalInfoWhereInput | null
  }

  export type BusinessProfileNullableScalarRelationFilter = {
    is?: BusinessProfileWhereInput | null
    isNot?: BusinessProfileWhereInput | null
  }

  export type FinancialProfileNullableScalarRelationFilter = {
    is?: FinancialProfileWhereInput | null
    isNot?: FinancialProfileWhereInput | null
  }

  export type ProductSelectionListRelationFilter = {
    every?: ProductSelectionWhereInput
    some?: ProductSelectionWhereInput
    none?: ProductSelectionWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type AdditionalSignerListRelationFilter = {
    every?: AdditionalSignerWhereInput
    some?: AdditionalSignerWhereInput
    none?: AdditionalSignerWhereInput
  }

  export type KYCVerificationNullableScalarRelationFilter = {
    is?: KYCVerificationWhereInput | null
    isNot?: KYCVerificationWhereInput | null
  }

  export type RiskAssessmentNullableScalarRelationFilter = {
    is?: RiskAssessmentWhereInput | null
    isNot?: RiskAssessmentWhereInput | null
  }

  export type AgreementListRelationFilter = {
    every?: AgreementWhereInput
    some?: AgreementWhereInput
    none?: AgreementWhereInput
  }

  export type ElectronicSignatureListRelationFilter = {
    every?: ElectronicSignatureWhereInput
    some?: ElectronicSignatureWhereInput
    none?: ElectronicSignatureWhereInput
  }

  export type FundingSetupNullableScalarRelationFilter = {
    is?: FundingSetupWhereInput | null
    isNot?: FundingSetupWhereInput | null
  }

  export type AuditTrailEntryListRelationFilter = {
    every?: AuditTrailEntryWhereInput
    some?: AuditTrailEntryWhereInput
    none?: AuditTrailEntryWhereInput
  }

  export type ProductSelectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdditionalSignerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgreementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ElectronicSignatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditTrailEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    currentStep?: SortOrder
    accountType?: SortOrder
    customerType?: SortOrder
    applicantId?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    currentStep?: SortOrder
    accountType?: SortOrder
    customerType?: SortOrder
    applicantId?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    currentStep?: SortOrder
    accountType?: SortOrder
    customerType?: SortOrder
    applicantId?: SortOrder
    submittedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ApplicationScalarRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type PersonalInfoCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    dateOfBirth?: SortOrder
    ssn?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    mailingAddress?: SortOrder
    physicalAddress?: SortOrder
    employmentStatus?: SortOrder
    occupation?: SortOrder
    employer?: SortOrder
    workPhone?: SortOrder
    applicationId?: SortOrder
  }

  export type PersonalInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    dateOfBirth?: SortOrder
    ssn?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    employmentStatus?: SortOrder
    occupation?: SortOrder
    employer?: SortOrder
    workPhone?: SortOrder
    applicationId?: SortOrder
  }

  export type PersonalInfoMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    dateOfBirth?: SortOrder
    ssn?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    employmentStatus?: SortOrder
    occupation?: SortOrder
    employer?: SortOrder
    workPhone?: SortOrder
    applicationId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BusinessProfileCountOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    dbaName?: SortOrder
    ein?: SortOrder
    entityType?: SortOrder
    industryType?: SortOrder
    dateEstablished?: SortOrder
    businessAddress?: SortOrder
    mailingAddress?: SortOrder
    businessPhone?: SortOrder
    businessEmail?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isCashIntensive?: SortOrder
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
    applicationId?: SortOrder
  }

  export type BusinessProfileAvgOrderByAggregateInput = {
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
  }

  export type BusinessProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    dbaName?: SortOrder
    ein?: SortOrder
    entityType?: SortOrder
    industryType?: SortOrder
    dateEstablished?: SortOrder
    businessPhone?: SortOrder
    businessEmail?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isCashIntensive?: SortOrder
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
    applicationId?: SortOrder
  }

  export type BusinessProfileMinOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    dbaName?: SortOrder
    ein?: SortOrder
    entityType?: SortOrder
    industryType?: SortOrder
    dateEstablished?: SortOrder
    businessPhone?: SortOrder
    businessEmail?: SortOrder
    website?: SortOrder
    description?: SortOrder
    isCashIntensive?: SortOrder
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
    applicationId?: SortOrder
  }

  export type BusinessProfileSumOrderByAggregateInput = {
    monthlyTransactionVolume?: SortOrder
    monthlyTransactionCount?: SortOrder
    expectedBalance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FinancialProfileCountOrderByAggregateInput = {
    id?: SortOrder
    annualIncome?: SortOrder
    incomeSource?: SortOrder
    employmentInfo?: SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
    bankingRelationships?: SortOrder
    accountActivities?: SortOrder
    applicationId?: SortOrder
  }

  export type FinancialProfileAvgOrderByAggregateInput = {
    annualIncome?: SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
  }

  export type FinancialProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    annualIncome?: SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
    applicationId?: SortOrder
  }

  export type FinancialProfileMinOrderByAggregateInput = {
    id?: SortOrder
    annualIncome?: SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
    applicationId?: SortOrder
  }

  export type FinancialProfileSumOrderByAggregateInput = {
    annualIncome?: SortOrder
    assets?: SortOrder
    liabilities?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    features?: SortOrder
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrder
    isActive?: SortOrder
    eligibilityRules?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrder
    isActive?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrder
    isActive?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    minimumBalance?: SortOrder
    monthlyFee?: SortOrder
    interestRate?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductSelectionCountOrderByAggregateInput = {
    id?: SortOrder
    selectedFeatures?: SortOrder
    initialDeposit?: SortOrder
    applicationId?: SortOrder
    productId?: SortOrder
  }

  export type ProductSelectionAvgOrderByAggregateInput = {
    initialDeposit?: SortOrder
  }

  export type ProductSelectionMaxOrderByAggregateInput = {
    id?: SortOrder
    initialDeposit?: SortOrder
    applicationId?: SortOrder
    productId?: SortOrder
  }

  export type ProductSelectionMinOrderByAggregateInput = {
    id?: SortOrder
    initialDeposit?: SortOrder
    applicationId?: SortOrder
    productId?: SortOrder
  }

  export type ProductSelectionSumOrderByAggregateInput = {
    initialDeposit?: SortOrder
  }

  export type AdditionalSignerNullableScalarRelationFilter = {
    is?: AdditionalSignerWhereInput | null
    isNot?: AdditionalSignerWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    verificationStatus?: SortOrder
    verificationDetails?: SortOrder
    applicationId?: SortOrder
    signerId?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    verificationStatus?: SortOrder
    applicationId?: SortOrder
    signerId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    fileName?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    verificationStatus?: SortOrder
    applicationId?: SortOrder
    signerId?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type KYCVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    verificationId?: SortOrder
    confidence?: SortOrder
    verifiedAt?: SortOrder
    results?: SortOrder
    applicationId?: SortOrder
  }

  export type KYCVerificationAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type KYCVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    verificationId?: SortOrder
    confidence?: SortOrder
    verifiedAt?: SortOrder
    applicationId?: SortOrder
  }

  export type KYCVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    verificationId?: SortOrder
    confidence?: SortOrder
    verifiedAt?: SortOrder
    applicationId?: SortOrder
  }

  export type KYCVerificationSumOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type AdditionalSignerCountOrderByAggregateInput = {
    id?: SortOrder
    personalInfo?: SortOrder
    role?: SortOrder
    relationshipToBusiness?: SortOrder
    beneficialOwnershipPercentage?: SortOrder
    hasSigningAuthority?: SortOrder
    kycStatus?: SortOrder
    applicationId?: SortOrder
  }

  export type AdditionalSignerAvgOrderByAggregateInput = {
    beneficialOwnershipPercentage?: SortOrder
  }

  export type AdditionalSignerMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    relationshipToBusiness?: SortOrder
    beneficialOwnershipPercentage?: SortOrder
    hasSigningAuthority?: SortOrder
    kycStatus?: SortOrder
    applicationId?: SortOrder
  }

  export type AdditionalSignerMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    relationshipToBusiness?: SortOrder
    beneficialOwnershipPercentage?: SortOrder
    hasSigningAuthority?: SortOrder
    kycStatus?: SortOrder
    applicationId?: SortOrder
  }

  export type AdditionalSignerSumOrderByAggregateInput = {
    beneficialOwnershipPercentage?: SortOrder
  }

  export type RiskAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    overallRisk?: SortOrder
    riskScore?: SortOrder
    factors?: SortOrder
    recommendations?: SortOrder
    requiresManualReview?: SortOrder
    assessedAt?: SortOrder
    assessedBy?: SortOrder
    applicationId?: SortOrder
  }

  export type RiskAssessmentAvgOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type RiskAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    overallRisk?: SortOrder
    riskScore?: SortOrder
    requiresManualReview?: SortOrder
    assessedAt?: SortOrder
    assessedBy?: SortOrder
    applicationId?: SortOrder
  }

  export type RiskAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    overallRisk?: SortOrder
    riskScore?: SortOrder
    requiresManualReview?: SortOrder
    assessedAt?: SortOrder
    assessedBy?: SortOrder
    applicationId?: SortOrder
  }

  export type RiskAssessmentSumOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type DisclosureCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    version?: SortOrder
    effectiveDate?: SortOrder
    required?: SortOrder
    applicableFor?: SortOrder
  }

  export type DisclosureMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    version?: SortOrder
    effectiveDate?: SortOrder
    required?: SortOrder
  }

  export type DisclosureMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    version?: SortOrder
    effectiveDate?: SortOrder
    required?: SortOrder
  }

  export type DisclosureScalarRelationFilter = {
    is?: DisclosureWhereInput
    isNot?: DisclosureWhereInput
  }

  export type AgreementCountOrderByAggregateInput = {
    id?: SortOrder
    acknowledged?: SortOrder
    acknowledgedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
    disclosureId?: SortOrder
  }

  export type AgreementMaxOrderByAggregateInput = {
    id?: SortOrder
    acknowledged?: SortOrder
    acknowledgedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
    disclosureId?: SortOrder
  }

  export type AgreementMinOrderByAggregateInput = {
    id?: SortOrder
    acknowledged?: SortOrder
    acknowledgedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
    disclosureId?: SortOrder
  }

  export type ElectronicSignatureCountOrderByAggregateInput = {
    id?: SortOrder
    signerId?: SortOrder
    documentType?: SortOrder
    signatureData?: SortOrder
    signedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    biometric?: SortOrder
    applicationId?: SortOrder
  }

  export type ElectronicSignatureMaxOrderByAggregateInput = {
    id?: SortOrder
    signerId?: SortOrder
    documentType?: SortOrder
    signatureData?: SortOrder
    signedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
  }

  export type ElectronicSignatureMinOrderByAggregateInput = {
    id?: SortOrder
    signerId?: SortOrder
    documentType?: SortOrder
    signatureData?: SortOrder
    signedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
  }

  export type FundingSetupCountOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    applicationId?: SortOrder
  }

  export type FundingSetupAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FundingSetupMaxOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    applicationId?: SortOrder
  }

  export type FundingSetupMinOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    applicationId?: SortOrder
  }

  export type FundingSetupSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type AuditTrailEntryCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    description?: SortOrder
    performedBy?: SortOrder
    performedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    changes?: SortOrder
    applicationId?: SortOrder
  }

  export type AuditTrailEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    description?: SortOrder
    performedBy?: SortOrder
    performedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
  }

  export type AuditTrailEntryMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    description?: SortOrder
    performedBy?: SortOrder
    performedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    applicationId?: SortOrder
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutUserInput | ApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutUserInput | ApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutUserInput | ApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput> | ApplicationCreateWithoutUserInput[] | ApplicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutUserInput | ApplicationCreateOrConnectWithoutUserInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutUserInput | ApplicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutUserInput | ApplicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutUserInput | ApplicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type UserUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokensInput, UserUpdateWithoutTokensInput>, UserUncheckedUpdateWithoutTokensInput>
  }

  export type PersonalInfoCreateNestedOneWithoutApplicationInput = {
    create?: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutApplicationInput
    connect?: PersonalInfoWhereUniqueInput
  }

  export type BusinessProfileCreateNestedOneWithoutApplicationInput = {
    create?: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: BusinessProfileCreateOrConnectWithoutApplicationInput
    connect?: BusinessProfileWhereUniqueInput
  }

  export type FinancialProfileCreateNestedOneWithoutApplicationInput = {
    create?: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FinancialProfileCreateOrConnectWithoutApplicationInput
    connect?: FinancialProfileWhereUniqueInput
  }

  export type ProductSelectionCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput> | ProductSelectionCreateWithoutApplicationInput[] | ProductSelectionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutApplicationInput | ProductSelectionCreateOrConnectWithoutApplicationInput[]
    createMany?: ProductSelectionCreateManyApplicationInputEnvelope
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type AdditionalSignerCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput> | AdditionalSignerCreateWithoutApplicationInput[] | AdditionalSignerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutApplicationInput | AdditionalSignerCreateOrConnectWithoutApplicationInput[]
    createMany?: AdditionalSignerCreateManyApplicationInputEnvelope
    connect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
  }

  export type KYCVerificationCreateNestedOneWithoutApplicationInput = {
    create?: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: KYCVerificationCreateOrConnectWithoutApplicationInput
    connect?: KYCVerificationWhereUniqueInput
  }

  export type RiskAssessmentCreateNestedOneWithoutApplicationInput = {
    create?: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: RiskAssessmentCreateOrConnectWithoutApplicationInput
    connect?: RiskAssessmentWhereUniqueInput
  }

  export type AgreementCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput> | AgreementCreateWithoutApplicationInput[] | AgreementUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutApplicationInput | AgreementCreateOrConnectWithoutApplicationInput[]
    createMany?: AgreementCreateManyApplicationInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type ElectronicSignatureCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput> | ElectronicSignatureCreateWithoutApplicationInput[] | ElectronicSignatureUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ElectronicSignatureCreateOrConnectWithoutApplicationInput | ElectronicSignatureCreateOrConnectWithoutApplicationInput[]
    createMany?: ElectronicSignatureCreateManyApplicationInputEnvelope
    connect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
  }

  export type FundingSetupCreateNestedOneWithoutApplicationInput = {
    create?: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FundingSetupCreateOrConnectWithoutApplicationInput
    connect?: FundingSetupWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    connect?: UserWhereUniqueInput
  }

  export type AuditTrailEntryCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput> | AuditTrailEntryCreateWithoutApplicationInput[] | AuditTrailEntryUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AuditTrailEntryCreateOrConnectWithoutApplicationInput | AuditTrailEntryCreateOrConnectWithoutApplicationInput[]
    createMany?: AuditTrailEntryCreateManyApplicationInputEnvelope
    connect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
  }

  export type PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutApplicationInput
    connect?: PersonalInfoWhereUniqueInput
  }

  export type BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: BusinessProfileCreateOrConnectWithoutApplicationInput
    connect?: BusinessProfileWhereUniqueInput
  }

  export type FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FinancialProfileCreateOrConnectWithoutApplicationInput
    connect?: FinancialProfileWhereUniqueInput
  }

  export type ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput> | ProductSelectionCreateWithoutApplicationInput[] | ProductSelectionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutApplicationInput | ProductSelectionCreateOrConnectWithoutApplicationInput[]
    createMany?: ProductSelectionCreateManyApplicationInputEnvelope
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput> | AdditionalSignerCreateWithoutApplicationInput[] | AdditionalSignerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutApplicationInput | AdditionalSignerCreateOrConnectWithoutApplicationInput[]
    createMany?: AdditionalSignerCreateManyApplicationInputEnvelope
    connect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
  }

  export type KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: KYCVerificationCreateOrConnectWithoutApplicationInput
    connect?: KYCVerificationWhereUniqueInput
  }

  export type RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: RiskAssessmentCreateOrConnectWithoutApplicationInput
    connect?: RiskAssessmentWhereUniqueInput
  }

  export type AgreementUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput> | AgreementCreateWithoutApplicationInput[] | AgreementUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutApplicationInput | AgreementCreateOrConnectWithoutApplicationInput[]
    createMany?: AgreementCreateManyApplicationInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput> | ElectronicSignatureCreateWithoutApplicationInput[] | ElectronicSignatureUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ElectronicSignatureCreateOrConnectWithoutApplicationInput | ElectronicSignatureCreateOrConnectWithoutApplicationInput[]
    createMany?: ElectronicSignatureCreateManyApplicationInputEnvelope
    connect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
  }

  export type FundingSetupUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FundingSetupCreateOrConnectWithoutApplicationInput
    connect?: FundingSetupWhereUniqueInput
  }

  export type AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput> | AuditTrailEntryCreateWithoutApplicationInput[] | AuditTrailEntryUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AuditTrailEntryCreateOrConnectWithoutApplicationInput | AuditTrailEntryCreateOrConnectWithoutApplicationInput[]
    createMany?: AuditTrailEntryCreateManyApplicationInputEnvelope
    connect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PersonalInfoUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutApplicationInput
    upsert?: PersonalInfoUpsertWithoutApplicationInput
    disconnect?: PersonalInfoWhereInput | boolean
    delete?: PersonalInfoWhereInput | boolean
    connect?: PersonalInfoWhereUniqueInput
    update?: XOR<XOR<PersonalInfoUpdateToOneWithWhereWithoutApplicationInput, PersonalInfoUpdateWithoutApplicationInput>, PersonalInfoUncheckedUpdateWithoutApplicationInput>
  }

  export type BusinessProfileUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: BusinessProfileCreateOrConnectWithoutApplicationInput
    upsert?: BusinessProfileUpsertWithoutApplicationInput
    disconnect?: BusinessProfileWhereInput | boolean
    delete?: BusinessProfileWhereInput | boolean
    connect?: BusinessProfileWhereUniqueInput
    update?: XOR<XOR<BusinessProfileUpdateToOneWithWhereWithoutApplicationInput, BusinessProfileUpdateWithoutApplicationInput>, BusinessProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type FinancialProfileUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FinancialProfileCreateOrConnectWithoutApplicationInput
    upsert?: FinancialProfileUpsertWithoutApplicationInput
    disconnect?: FinancialProfileWhereInput | boolean
    delete?: FinancialProfileWhereInput | boolean
    connect?: FinancialProfileWhereUniqueInput
    update?: XOR<XOR<FinancialProfileUpdateToOneWithWhereWithoutApplicationInput, FinancialProfileUpdateWithoutApplicationInput>, FinancialProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type ProductSelectionUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput> | ProductSelectionCreateWithoutApplicationInput[] | ProductSelectionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutApplicationInput | ProductSelectionCreateOrConnectWithoutApplicationInput[]
    upsert?: ProductSelectionUpsertWithWhereUniqueWithoutApplicationInput | ProductSelectionUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ProductSelectionCreateManyApplicationInputEnvelope
    set?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    disconnect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    delete?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    update?: ProductSelectionUpdateWithWhereUniqueWithoutApplicationInput | ProductSelectionUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ProductSelectionUpdateManyWithWhereWithoutApplicationInput | ProductSelectionUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutApplicationInput | DocumentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutApplicationInput | DocumentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutApplicationInput | DocumentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type AdditionalSignerUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput> | AdditionalSignerCreateWithoutApplicationInput[] | AdditionalSignerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutApplicationInput | AdditionalSignerCreateOrConnectWithoutApplicationInput[]
    upsert?: AdditionalSignerUpsertWithWhereUniqueWithoutApplicationInput | AdditionalSignerUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AdditionalSignerCreateManyApplicationInputEnvelope
    set?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    disconnect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    delete?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    connect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    update?: AdditionalSignerUpdateWithWhereUniqueWithoutApplicationInput | AdditionalSignerUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AdditionalSignerUpdateManyWithWhereWithoutApplicationInput | AdditionalSignerUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AdditionalSignerScalarWhereInput | AdditionalSignerScalarWhereInput[]
  }

  export type KYCVerificationUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: KYCVerificationCreateOrConnectWithoutApplicationInput
    upsert?: KYCVerificationUpsertWithoutApplicationInput
    disconnect?: KYCVerificationWhereInput | boolean
    delete?: KYCVerificationWhereInput | boolean
    connect?: KYCVerificationWhereUniqueInput
    update?: XOR<XOR<KYCVerificationUpdateToOneWithWhereWithoutApplicationInput, KYCVerificationUpdateWithoutApplicationInput>, KYCVerificationUncheckedUpdateWithoutApplicationInput>
  }

  export type RiskAssessmentUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: RiskAssessmentCreateOrConnectWithoutApplicationInput
    upsert?: RiskAssessmentUpsertWithoutApplicationInput
    disconnect?: RiskAssessmentWhereInput | boolean
    delete?: RiskAssessmentWhereInput | boolean
    connect?: RiskAssessmentWhereUniqueInput
    update?: XOR<XOR<RiskAssessmentUpdateToOneWithWhereWithoutApplicationInput, RiskAssessmentUpdateWithoutApplicationInput>, RiskAssessmentUncheckedUpdateWithoutApplicationInput>
  }

  export type AgreementUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput> | AgreementCreateWithoutApplicationInput[] | AgreementUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutApplicationInput | AgreementCreateOrConnectWithoutApplicationInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutApplicationInput | AgreementUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AgreementCreateManyApplicationInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutApplicationInput | AgreementUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutApplicationInput | AgreementUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type ElectronicSignatureUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput> | ElectronicSignatureCreateWithoutApplicationInput[] | ElectronicSignatureUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ElectronicSignatureCreateOrConnectWithoutApplicationInput | ElectronicSignatureCreateOrConnectWithoutApplicationInput[]
    upsert?: ElectronicSignatureUpsertWithWhereUniqueWithoutApplicationInput | ElectronicSignatureUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ElectronicSignatureCreateManyApplicationInputEnvelope
    set?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    disconnect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    delete?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    connect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    update?: ElectronicSignatureUpdateWithWhereUniqueWithoutApplicationInput | ElectronicSignatureUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ElectronicSignatureUpdateManyWithWhereWithoutApplicationInput | ElectronicSignatureUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ElectronicSignatureScalarWhereInput | ElectronicSignatureScalarWhereInput[]
  }

  export type FundingSetupUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FundingSetupCreateOrConnectWithoutApplicationInput
    upsert?: FundingSetupUpsertWithoutApplicationInput
    disconnect?: FundingSetupWhereInput | boolean
    delete?: FundingSetupWhereInput | boolean
    connect?: FundingSetupWhereUniqueInput
    update?: XOR<XOR<FundingSetupUpdateToOneWithWhereWithoutApplicationInput, FundingSetupUpdateWithoutApplicationInput>, FundingSetupUncheckedUpdateWithoutApplicationInput>
  }

  export type UserUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    upsert?: UserUpsertWithoutApplicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicationsInput, UserUpdateWithoutApplicationsInput>, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type AuditTrailEntryUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput> | AuditTrailEntryCreateWithoutApplicationInput[] | AuditTrailEntryUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AuditTrailEntryCreateOrConnectWithoutApplicationInput | AuditTrailEntryCreateOrConnectWithoutApplicationInput[]
    upsert?: AuditTrailEntryUpsertWithWhereUniqueWithoutApplicationInput | AuditTrailEntryUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AuditTrailEntryCreateManyApplicationInputEnvelope
    set?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    disconnect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    delete?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    connect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    update?: AuditTrailEntryUpdateWithWhereUniqueWithoutApplicationInput | AuditTrailEntryUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AuditTrailEntryUpdateManyWithWhereWithoutApplicationInput | AuditTrailEntryUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AuditTrailEntryScalarWhereInput | AuditTrailEntryScalarWhereInput[]
  }

  export type PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutApplicationInput
    upsert?: PersonalInfoUpsertWithoutApplicationInput
    disconnect?: PersonalInfoWhereInput | boolean
    delete?: PersonalInfoWhereInput | boolean
    connect?: PersonalInfoWhereUniqueInput
    update?: XOR<XOR<PersonalInfoUpdateToOneWithWhereWithoutApplicationInput, PersonalInfoUpdateWithoutApplicationInput>, PersonalInfoUncheckedUpdateWithoutApplicationInput>
  }

  export type BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: BusinessProfileCreateOrConnectWithoutApplicationInput
    upsert?: BusinessProfileUpsertWithoutApplicationInput
    disconnect?: BusinessProfileWhereInput | boolean
    delete?: BusinessProfileWhereInput | boolean
    connect?: BusinessProfileWhereUniqueInput
    update?: XOR<XOR<BusinessProfileUpdateToOneWithWhereWithoutApplicationInput, BusinessProfileUpdateWithoutApplicationInput>, BusinessProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FinancialProfileCreateOrConnectWithoutApplicationInput
    upsert?: FinancialProfileUpsertWithoutApplicationInput
    disconnect?: FinancialProfileWhereInput | boolean
    delete?: FinancialProfileWhereInput | boolean
    connect?: FinancialProfileWhereUniqueInput
    update?: XOR<XOR<FinancialProfileUpdateToOneWithWhereWithoutApplicationInput, FinancialProfileUpdateWithoutApplicationInput>, FinancialProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput> | ProductSelectionCreateWithoutApplicationInput[] | ProductSelectionUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutApplicationInput | ProductSelectionCreateOrConnectWithoutApplicationInput[]
    upsert?: ProductSelectionUpsertWithWhereUniqueWithoutApplicationInput | ProductSelectionUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ProductSelectionCreateManyApplicationInputEnvelope
    set?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    disconnect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    delete?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    update?: ProductSelectionUpdateWithWhereUniqueWithoutApplicationInput | ProductSelectionUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ProductSelectionUpdateManyWithWhereWithoutApplicationInput | ProductSelectionUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutApplicationInput | DocumentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutApplicationInput | DocumentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutApplicationInput | DocumentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput> | AdditionalSignerCreateWithoutApplicationInput[] | AdditionalSignerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutApplicationInput | AdditionalSignerCreateOrConnectWithoutApplicationInput[]
    upsert?: AdditionalSignerUpsertWithWhereUniqueWithoutApplicationInput | AdditionalSignerUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AdditionalSignerCreateManyApplicationInputEnvelope
    set?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    disconnect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    delete?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    connect?: AdditionalSignerWhereUniqueInput | AdditionalSignerWhereUniqueInput[]
    update?: AdditionalSignerUpdateWithWhereUniqueWithoutApplicationInput | AdditionalSignerUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AdditionalSignerUpdateManyWithWhereWithoutApplicationInput | AdditionalSignerUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AdditionalSignerScalarWhereInput | AdditionalSignerScalarWhereInput[]
  }

  export type KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: KYCVerificationCreateOrConnectWithoutApplicationInput
    upsert?: KYCVerificationUpsertWithoutApplicationInput
    disconnect?: KYCVerificationWhereInput | boolean
    delete?: KYCVerificationWhereInput | boolean
    connect?: KYCVerificationWhereUniqueInput
    update?: XOR<XOR<KYCVerificationUpdateToOneWithWhereWithoutApplicationInput, KYCVerificationUpdateWithoutApplicationInput>, KYCVerificationUncheckedUpdateWithoutApplicationInput>
  }

  export type RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: RiskAssessmentCreateOrConnectWithoutApplicationInput
    upsert?: RiskAssessmentUpsertWithoutApplicationInput
    disconnect?: RiskAssessmentWhereInput | boolean
    delete?: RiskAssessmentWhereInput | boolean
    connect?: RiskAssessmentWhereUniqueInput
    update?: XOR<XOR<RiskAssessmentUpdateToOneWithWhereWithoutApplicationInput, RiskAssessmentUpdateWithoutApplicationInput>, RiskAssessmentUncheckedUpdateWithoutApplicationInput>
  }

  export type AgreementUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput> | AgreementCreateWithoutApplicationInput[] | AgreementUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutApplicationInput | AgreementCreateOrConnectWithoutApplicationInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutApplicationInput | AgreementUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AgreementCreateManyApplicationInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutApplicationInput | AgreementUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutApplicationInput | AgreementUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput> | ElectronicSignatureCreateWithoutApplicationInput[] | ElectronicSignatureUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ElectronicSignatureCreateOrConnectWithoutApplicationInput | ElectronicSignatureCreateOrConnectWithoutApplicationInput[]
    upsert?: ElectronicSignatureUpsertWithWhereUniqueWithoutApplicationInput | ElectronicSignatureUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ElectronicSignatureCreateManyApplicationInputEnvelope
    set?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    disconnect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    delete?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    connect?: ElectronicSignatureWhereUniqueInput | ElectronicSignatureWhereUniqueInput[]
    update?: ElectronicSignatureUpdateWithWhereUniqueWithoutApplicationInput | ElectronicSignatureUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ElectronicSignatureUpdateManyWithWhereWithoutApplicationInput | ElectronicSignatureUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ElectronicSignatureScalarWhereInput | ElectronicSignatureScalarWhereInput[]
  }

  export type FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: FundingSetupCreateOrConnectWithoutApplicationInput
    upsert?: FundingSetupUpsertWithoutApplicationInput
    disconnect?: FundingSetupWhereInput | boolean
    delete?: FundingSetupWhereInput | boolean
    connect?: FundingSetupWhereUniqueInput
    update?: XOR<XOR<FundingSetupUpdateToOneWithWhereWithoutApplicationInput, FundingSetupUpdateWithoutApplicationInput>, FundingSetupUncheckedUpdateWithoutApplicationInput>
  }

  export type AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput> | AuditTrailEntryCreateWithoutApplicationInput[] | AuditTrailEntryUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: AuditTrailEntryCreateOrConnectWithoutApplicationInput | AuditTrailEntryCreateOrConnectWithoutApplicationInput[]
    upsert?: AuditTrailEntryUpsertWithWhereUniqueWithoutApplicationInput | AuditTrailEntryUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: AuditTrailEntryCreateManyApplicationInputEnvelope
    set?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    disconnect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    delete?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    connect?: AuditTrailEntryWhereUniqueInput | AuditTrailEntryWhereUniqueInput[]
    update?: AuditTrailEntryUpdateWithWhereUniqueWithoutApplicationInput | AuditTrailEntryUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: AuditTrailEntryUpdateManyWithWhereWithoutApplicationInput | AuditTrailEntryUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: AuditTrailEntryScalarWhereInput | AuditTrailEntryScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutPersonalInfoInput = {
    create?: XOR<ApplicationCreateWithoutPersonalInfoInput, ApplicationUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutPersonalInfoInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutPersonalInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutPersonalInfoInput, ApplicationUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutPersonalInfoInput
    upsert?: ApplicationUpsertWithoutPersonalInfoInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutPersonalInfoInput, ApplicationUpdateWithoutPersonalInfoInput>, ApplicationUncheckedUpdateWithoutPersonalInfoInput>
  }

  export type ApplicationCreateNestedOneWithoutBusinessProfileInput = {
    create?: XOR<ApplicationCreateWithoutBusinessProfileInput, ApplicationUncheckedCreateWithoutBusinessProfileInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutBusinessProfileInput
    connect?: ApplicationWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApplicationUpdateOneRequiredWithoutBusinessProfileNestedInput = {
    create?: XOR<ApplicationCreateWithoutBusinessProfileInput, ApplicationUncheckedCreateWithoutBusinessProfileInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutBusinessProfileInput
    upsert?: ApplicationUpsertWithoutBusinessProfileInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutBusinessProfileInput, ApplicationUpdateWithoutBusinessProfileInput>, ApplicationUncheckedUpdateWithoutBusinessProfileInput>
  }

  export type FinancialProfileCreateincomeSourceInput = {
    set: string[]
  }

  export type FinancialProfileCreatebankingRelationshipsInput = {
    set: InputJsonValue[]
  }

  export type FinancialProfileCreateaccountActivitiesInput = {
    set: InputJsonValue[]
  }

  export type ApplicationCreateNestedOneWithoutFinancialProfileInput = {
    create?: XOR<ApplicationCreateWithoutFinancialProfileInput, ApplicationUncheckedCreateWithoutFinancialProfileInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutFinancialProfileInput
    connect?: ApplicationWhereUniqueInput
  }

  export type FinancialProfileUpdateincomeSourceInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FinancialProfileUpdatebankingRelationshipsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type FinancialProfileUpdateaccountActivitiesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ApplicationUpdateOneRequiredWithoutFinancialProfileNestedInput = {
    create?: XOR<ApplicationCreateWithoutFinancialProfileInput, ApplicationUncheckedCreateWithoutFinancialProfileInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutFinancialProfileInput
    upsert?: ApplicationUpsertWithoutFinancialProfileInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutFinancialProfileInput, ApplicationUpdateWithoutFinancialProfileInput>, ApplicationUncheckedUpdateWithoutFinancialProfileInput>
  }

  export type ProductCreatefeaturesInput = {
    set: string[]
  }

  export type ProductCreateeligibilityRulesInput = {
    set: InputJsonValue[]
  }

  export type ProductSelectionCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput> | ProductSelectionCreateWithoutProductInput[] | ProductSelectionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutProductInput | ProductSelectionCreateOrConnectWithoutProductInput[]
    createMany?: ProductSelectionCreateManyProductInputEnvelope
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
  }

  export type ProductSelectionUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput> | ProductSelectionCreateWithoutProductInput[] | ProductSelectionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutProductInput | ProductSelectionCreateOrConnectWithoutProductInput[]
    createMany?: ProductSelectionCreateManyProductInputEnvelope
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
  }

  export type ProductUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateeligibilityRulesInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type ProductSelectionUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput> | ProductSelectionCreateWithoutProductInput[] | ProductSelectionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutProductInput | ProductSelectionCreateOrConnectWithoutProductInput[]
    upsert?: ProductSelectionUpsertWithWhereUniqueWithoutProductInput | ProductSelectionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSelectionCreateManyProductInputEnvelope
    set?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    disconnect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    delete?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    update?: ProductSelectionUpdateWithWhereUniqueWithoutProductInput | ProductSelectionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSelectionUpdateManyWithWhereWithoutProductInput | ProductSelectionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
  }

  export type ProductSelectionUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput> | ProductSelectionCreateWithoutProductInput[] | ProductSelectionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSelectionCreateOrConnectWithoutProductInput | ProductSelectionCreateOrConnectWithoutProductInput[]
    upsert?: ProductSelectionUpsertWithWhereUniqueWithoutProductInput | ProductSelectionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSelectionCreateManyProductInputEnvelope
    set?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    disconnect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    delete?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    connect?: ProductSelectionWhereUniqueInput | ProductSelectionWhereUniqueInput[]
    update?: ProductSelectionUpdateWithWhereUniqueWithoutProductInput | ProductSelectionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSelectionUpdateManyWithWhereWithoutProductInput | ProductSelectionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
  }

  export type ProductSelectionCreateselectedFeaturesInput = {
    set: string[]
  }

  export type ApplicationCreateNestedOneWithoutProductSelectionsInput = {
    create?: XOR<ApplicationCreateWithoutProductSelectionsInput, ApplicationUncheckedCreateWithoutProductSelectionsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutProductSelectionsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductSelectionsInput = {
    create?: XOR<ProductCreateWithoutProductSelectionsInput, ProductUncheckedCreateWithoutProductSelectionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductSelectionsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductSelectionUpdateselectedFeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ApplicationUpdateOneRequiredWithoutProductSelectionsNestedInput = {
    create?: XOR<ApplicationCreateWithoutProductSelectionsInput, ApplicationUncheckedCreateWithoutProductSelectionsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutProductSelectionsInput
    upsert?: ApplicationUpsertWithoutProductSelectionsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutProductSelectionsInput, ApplicationUpdateWithoutProductSelectionsInput>, ApplicationUncheckedUpdateWithoutProductSelectionsInput>
  }

  export type ProductUpdateOneRequiredWithoutProductSelectionsNestedInput = {
    create?: XOR<ProductCreateWithoutProductSelectionsInput, ProductUncheckedCreateWithoutProductSelectionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductSelectionsInput
    upsert?: ProductUpsertWithoutProductSelectionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductSelectionsInput, ProductUpdateWithoutProductSelectionsInput>, ProductUncheckedUpdateWithoutProductSelectionsInput>
  }

  export type ApplicationCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type AdditionalSignerCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<AdditionalSignerCreateWithoutDocumentsInput, AdditionalSignerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutDocumentsInput
    connect?: AdditionalSignerWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentsInput
    upsert?: ApplicationUpsertWithoutDocumentsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutDocumentsInput, ApplicationUpdateWithoutDocumentsInput>, ApplicationUncheckedUpdateWithoutDocumentsInput>
  }

  export type AdditionalSignerUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<AdditionalSignerCreateWithoutDocumentsInput, AdditionalSignerUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: AdditionalSignerCreateOrConnectWithoutDocumentsInput
    upsert?: AdditionalSignerUpsertWithoutDocumentsInput
    disconnect?: AdditionalSignerWhereInput | boolean
    delete?: AdditionalSignerWhereInput | boolean
    connect?: AdditionalSignerWhereUniqueInput
    update?: XOR<XOR<AdditionalSignerUpdateToOneWithWhereWithoutDocumentsInput, AdditionalSignerUpdateWithoutDocumentsInput>, AdditionalSignerUncheckedUpdateWithoutDocumentsInput>
  }

  export type ApplicationCreateNestedOneWithoutKycVerificationInput = {
    create?: XOR<ApplicationCreateWithoutKycVerificationInput, ApplicationUncheckedCreateWithoutKycVerificationInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutKycVerificationInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutKycVerificationNestedInput = {
    create?: XOR<ApplicationCreateWithoutKycVerificationInput, ApplicationUncheckedCreateWithoutKycVerificationInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutKycVerificationInput
    upsert?: ApplicationUpsertWithoutKycVerificationInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutKycVerificationInput, ApplicationUpdateWithoutKycVerificationInput>, ApplicationUncheckedUpdateWithoutKycVerificationInput>
  }

  export type DocumentCreateNestedManyWithoutSignerInput = {
    create?: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput> | DocumentCreateWithoutSignerInput[] | DocumentUncheckedCreateWithoutSignerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSignerInput | DocumentCreateOrConnectWithoutSignerInput[]
    createMany?: DocumentCreateManySignerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ApplicationCreateNestedOneWithoutAdditionalSignersInput = {
    create?: XOR<ApplicationCreateWithoutAdditionalSignersInput, ApplicationUncheckedCreateWithoutAdditionalSignersInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAdditionalSignersInput
    connect?: ApplicationWhereUniqueInput
  }

  export type DocumentUncheckedCreateNestedManyWithoutSignerInput = {
    create?: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput> | DocumentCreateWithoutSignerInput[] | DocumentUncheckedCreateWithoutSignerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSignerInput | DocumentCreateOrConnectWithoutSignerInput[]
    createMany?: DocumentCreateManySignerInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUpdateManyWithoutSignerNestedInput = {
    create?: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput> | DocumentCreateWithoutSignerInput[] | DocumentUncheckedCreateWithoutSignerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSignerInput | DocumentCreateOrConnectWithoutSignerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutSignerInput | DocumentUpsertWithWhereUniqueWithoutSignerInput[]
    createMany?: DocumentCreateManySignerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutSignerInput | DocumentUpdateWithWhereUniqueWithoutSignerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutSignerInput | DocumentUpdateManyWithWhereWithoutSignerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ApplicationUpdateOneRequiredWithoutAdditionalSignersNestedInput = {
    create?: XOR<ApplicationCreateWithoutAdditionalSignersInput, ApplicationUncheckedCreateWithoutAdditionalSignersInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAdditionalSignersInput
    upsert?: ApplicationUpsertWithoutAdditionalSignersInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutAdditionalSignersInput, ApplicationUpdateWithoutAdditionalSignersInput>, ApplicationUncheckedUpdateWithoutAdditionalSignersInput>
  }

  export type DocumentUncheckedUpdateManyWithoutSignerNestedInput = {
    create?: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput> | DocumentCreateWithoutSignerInput[] | DocumentUncheckedCreateWithoutSignerInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutSignerInput | DocumentCreateOrConnectWithoutSignerInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutSignerInput | DocumentUpsertWithWhereUniqueWithoutSignerInput[]
    createMany?: DocumentCreateManySignerInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutSignerInput | DocumentUpdateWithWhereUniqueWithoutSignerInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutSignerInput | DocumentUpdateManyWithWhereWithoutSignerInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type RiskAssessmentCreatefactorsInput = {
    set: InputJsonValue[]
  }

  export type RiskAssessmentCreaterecommendationsInput = {
    set: string[]
  }

  export type ApplicationCreateNestedOneWithoutRiskAssessmentInput = {
    create?: XOR<ApplicationCreateWithoutRiskAssessmentInput, ApplicationUncheckedCreateWithoutRiskAssessmentInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutRiskAssessmentInput
    connect?: ApplicationWhereUniqueInput
  }

  export type RiskAssessmentUpdatefactorsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type RiskAssessmentUpdaterecommendationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ApplicationUpdateOneRequiredWithoutRiskAssessmentNestedInput = {
    create?: XOR<ApplicationCreateWithoutRiskAssessmentInput, ApplicationUncheckedCreateWithoutRiskAssessmentInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutRiskAssessmentInput
    upsert?: ApplicationUpsertWithoutRiskAssessmentInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutRiskAssessmentInput, ApplicationUpdateWithoutRiskAssessmentInput>, ApplicationUncheckedUpdateWithoutRiskAssessmentInput>
  }

  export type DisclosureCreateapplicableForInput = {
    set: string[]
  }

  export type AgreementCreateNestedManyWithoutDisclosureInput = {
    create?: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput> | AgreementCreateWithoutDisclosureInput[] | AgreementUncheckedCreateWithoutDisclosureInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutDisclosureInput | AgreementCreateOrConnectWithoutDisclosureInput[]
    createMany?: AgreementCreateManyDisclosureInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type AgreementUncheckedCreateNestedManyWithoutDisclosureInput = {
    create?: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput> | AgreementCreateWithoutDisclosureInput[] | AgreementUncheckedCreateWithoutDisclosureInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutDisclosureInput | AgreementCreateOrConnectWithoutDisclosureInput[]
    createMany?: AgreementCreateManyDisclosureInputEnvelope
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
  }

  export type DisclosureUpdateapplicableForInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AgreementUpdateManyWithoutDisclosureNestedInput = {
    create?: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput> | AgreementCreateWithoutDisclosureInput[] | AgreementUncheckedCreateWithoutDisclosureInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutDisclosureInput | AgreementCreateOrConnectWithoutDisclosureInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutDisclosureInput | AgreementUpsertWithWhereUniqueWithoutDisclosureInput[]
    createMany?: AgreementCreateManyDisclosureInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutDisclosureInput | AgreementUpdateWithWhereUniqueWithoutDisclosureInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutDisclosureInput | AgreementUpdateManyWithWhereWithoutDisclosureInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type AgreementUncheckedUpdateManyWithoutDisclosureNestedInput = {
    create?: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput> | AgreementCreateWithoutDisclosureInput[] | AgreementUncheckedCreateWithoutDisclosureInput[]
    connectOrCreate?: AgreementCreateOrConnectWithoutDisclosureInput | AgreementCreateOrConnectWithoutDisclosureInput[]
    upsert?: AgreementUpsertWithWhereUniqueWithoutDisclosureInput | AgreementUpsertWithWhereUniqueWithoutDisclosureInput[]
    createMany?: AgreementCreateManyDisclosureInputEnvelope
    set?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    disconnect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    delete?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    connect?: AgreementWhereUniqueInput | AgreementWhereUniqueInput[]
    update?: AgreementUpdateWithWhereUniqueWithoutDisclosureInput | AgreementUpdateWithWhereUniqueWithoutDisclosureInput[]
    updateMany?: AgreementUpdateManyWithWhereWithoutDisclosureInput | AgreementUpdateManyWithWhereWithoutDisclosureInput[]
    deleteMany?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutAgreementsInput = {
    create?: XOR<ApplicationCreateWithoutAgreementsInput, ApplicationUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAgreementsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type DisclosureCreateNestedOneWithoutAgreementsInput = {
    create?: XOR<DisclosureCreateWithoutAgreementsInput, DisclosureUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: DisclosureCreateOrConnectWithoutAgreementsInput
    connect?: DisclosureWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutAgreementsNestedInput = {
    create?: XOR<ApplicationCreateWithoutAgreementsInput, ApplicationUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAgreementsInput
    upsert?: ApplicationUpsertWithoutAgreementsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutAgreementsInput, ApplicationUpdateWithoutAgreementsInput>, ApplicationUncheckedUpdateWithoutAgreementsInput>
  }

  export type DisclosureUpdateOneRequiredWithoutAgreementsNestedInput = {
    create?: XOR<DisclosureCreateWithoutAgreementsInput, DisclosureUncheckedCreateWithoutAgreementsInput>
    connectOrCreate?: DisclosureCreateOrConnectWithoutAgreementsInput
    upsert?: DisclosureUpsertWithoutAgreementsInput
    connect?: DisclosureWhereUniqueInput
    update?: XOR<XOR<DisclosureUpdateToOneWithWhereWithoutAgreementsInput, DisclosureUpdateWithoutAgreementsInput>, DisclosureUncheckedUpdateWithoutAgreementsInput>
  }

  export type ApplicationCreateNestedOneWithoutSignaturesInput = {
    create?: XOR<ApplicationCreateWithoutSignaturesInput, ApplicationUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSignaturesInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutSignaturesNestedInput = {
    create?: XOR<ApplicationCreateWithoutSignaturesInput, ApplicationUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutSignaturesInput
    upsert?: ApplicationUpsertWithoutSignaturesInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutSignaturesInput, ApplicationUpdateWithoutSignaturesInput>, ApplicationUncheckedUpdateWithoutSignaturesInput>
  }

  export type ApplicationCreateNestedOneWithoutFundingSetupInput = {
    create?: XOR<ApplicationCreateWithoutFundingSetupInput, ApplicationUncheckedCreateWithoutFundingSetupInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutFundingSetupInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutFundingSetupNestedInput = {
    create?: XOR<ApplicationCreateWithoutFundingSetupInput, ApplicationUncheckedCreateWithoutFundingSetupInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutFundingSetupInput
    upsert?: ApplicationUpsertWithoutFundingSetupInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutFundingSetupInput, ApplicationUpdateWithoutFundingSetupInput>, ApplicationUncheckedUpdateWithoutFundingSetupInput>
  }

  export type ApplicationCreateNestedOneWithoutAuditTrailInput = {
    create?: XOR<ApplicationCreateWithoutAuditTrailInput, ApplicationUncheckedCreateWithoutAuditTrailInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAuditTrailInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutAuditTrailNestedInput = {
    create?: XOR<ApplicationCreateWithoutAuditTrailInput, ApplicationUncheckedCreateWithoutAuditTrailInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAuditTrailInput
    upsert?: ApplicationUpsertWithoutAuditTrailInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutAuditTrailInput, ApplicationUpdateWithoutAuditTrailInput>, ApplicationUncheckedUpdateWithoutAuditTrailInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type TokenCreateWithoutUserInput = {
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: TokenCreateManyUserInput | TokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutUserInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutUserInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationCreateManyUserInputEnvelope = {
    data: ApplicationCreateManyUserInput | ApplicationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenScalarWhereInput = {
    AND?: TokenScalarWhereInput | TokenScalarWhereInput[]
    OR?: TokenScalarWhereInput[]
    NOT?: TokenScalarWhereInput | TokenScalarWhereInput[]
    id?: IntFilter<"Token"> | number
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expires?: DateTimeFilter<"Token"> | Date | string
    blacklisted?: BoolFilter<"Token"> | boolean
    createdAt?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
  }

  export type ApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutUserInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutUserInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: StringFilter<"Application"> | string
    status?: StringFilter<"Application"> | string
    currentStep?: StringFilter<"Application"> | string
    accountType?: StringFilter<"Application"> | string
    customerType?: StringFilter<"Application"> | string
    applicantId?: StringFilter<"Application"> | string
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    metadata?: JsonFilter<"Application">
    userId?: IntFilter<"Application"> | number
  }

  export type UserCreateWithoutTokensInput = {
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonalInfoCreateWithoutApplicationInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus: string
    occupation?: string | null
    employer?: string | null
    workPhone?: string | null
  }

  export type PersonalInfoUncheckedCreateWithoutApplicationInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    dateOfBirth: string
    ssn: string
    phone: string
    email: string
    mailingAddress: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus: string
    occupation?: string | null
    employer?: string | null
    workPhone?: string | null
  }

  export type PersonalInfoCreateOrConnectWithoutApplicationInput = {
    where: PersonalInfoWhereUniqueInput
    create: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
  }

  export type BusinessProfileCreateWithoutApplicationInput = {
    id?: string
    businessName: string
    dbaName?: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone: string
    businessEmail: string
    website?: string | null
    description: string
    isCashIntensive?: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
  }

  export type BusinessProfileUncheckedCreateWithoutApplicationInput = {
    id?: string
    businessName: string
    dbaName?: string | null
    ein: string
    entityType: string
    industryType: string
    dateEstablished: string
    businessAddress: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone: string
    businessEmail: string
    website?: string | null
    description: string
    isCashIntensive?: boolean
    monthlyTransactionVolume: number
    monthlyTransactionCount: number
    expectedBalance: number
  }

  export type BusinessProfileCreateOrConnectWithoutApplicationInput = {
    where: BusinessProfileWhereUniqueInput
    create: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
  }

  export type FinancialProfileCreateWithoutApplicationInput = {
    id?: string
    annualIncome: number
    incomeSource?: FinancialProfileCreateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets: number
    liabilities: number
    bankingRelationships?: FinancialProfileCreatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileCreateaccountActivitiesInput | InputJsonValue[]
  }

  export type FinancialProfileUncheckedCreateWithoutApplicationInput = {
    id?: string
    annualIncome: number
    incomeSource?: FinancialProfileCreateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets: number
    liabilities: number
    bankingRelationships?: FinancialProfileCreatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileCreateaccountActivitiesInput | InputJsonValue[]
  }

  export type FinancialProfileCreateOrConnectWithoutApplicationInput = {
    where: FinancialProfileWhereUniqueInput
    create: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
  }

  export type ProductSelectionCreateWithoutApplicationInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    product: ProductCreateNestedOneWithoutProductSelectionsInput
  }

  export type ProductSelectionUncheckedCreateWithoutApplicationInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    productId: string
  }

  export type ProductSelectionCreateOrConnectWithoutApplicationInput = {
    where: ProductSelectionWhereUniqueInput
    create: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput>
  }

  export type ProductSelectionCreateManyApplicationInputEnvelope = {
    data: ProductSelectionCreateManyApplicationInput | ProductSelectionCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutApplicationInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signer?: AdditionalSignerCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutApplicationInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signerId?: string | null
  }

  export type DocumentCreateOrConnectWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentCreateManyApplicationInputEnvelope = {
    data: DocumentCreateManyApplicationInput | DocumentCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type AdditionalSignerCreateWithoutApplicationInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    documents?: DocumentCreateNestedManyWithoutSignerInput
  }

  export type AdditionalSignerUncheckedCreateWithoutApplicationInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    documents?: DocumentUncheckedCreateNestedManyWithoutSignerInput
  }

  export type AdditionalSignerCreateOrConnectWithoutApplicationInput = {
    where: AdditionalSignerWhereUniqueInput
    create: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput>
  }

  export type AdditionalSignerCreateManyApplicationInputEnvelope = {
    data: AdditionalSignerCreateManyApplicationInput | AdditionalSignerCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type KYCVerificationCreateWithoutApplicationInput = {
    id?: string
    status?: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt?: Date | string | null
    results: JsonNullValueInput | InputJsonValue
  }

  export type KYCVerificationUncheckedCreateWithoutApplicationInput = {
    id?: string
    status?: string
    provider: string
    verificationId: string
    confidence: number
    verifiedAt?: Date | string | null
    results: JsonNullValueInput | InputJsonValue
  }

  export type KYCVerificationCreateOrConnectWithoutApplicationInput = {
    where: KYCVerificationWhereUniqueInput
    create: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
  }

  export type RiskAssessmentCreateWithoutApplicationInput = {
    id?: string
    overallRisk: string
    riskScore: number
    factors?: RiskAssessmentCreatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentCreaterecommendationsInput | string[]
    requiresManualReview?: boolean
    assessedAt?: Date | string
    assessedBy: string
  }

  export type RiskAssessmentUncheckedCreateWithoutApplicationInput = {
    id?: string
    overallRisk: string
    riskScore: number
    factors?: RiskAssessmentCreatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentCreaterecommendationsInput | string[]
    requiresManualReview?: boolean
    assessedAt?: Date | string
    assessedBy: string
  }

  export type RiskAssessmentCreateOrConnectWithoutApplicationInput = {
    where: RiskAssessmentWhereUniqueInput
    create: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
  }

  export type AgreementCreateWithoutApplicationInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    disclosure: DisclosureCreateNestedOneWithoutAgreementsInput
  }

  export type AgreementUncheckedCreateWithoutApplicationInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    disclosureId: string
  }

  export type AgreementCreateOrConnectWithoutApplicationInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput>
  }

  export type AgreementCreateManyApplicationInputEnvelope = {
    data: AgreementCreateManyApplicationInput | AgreementCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type ElectronicSignatureCreateWithoutApplicationInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ElectronicSignatureUncheckedCreateWithoutApplicationInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ElectronicSignatureCreateOrConnectWithoutApplicationInput = {
    where: ElectronicSignatureWhereUniqueInput
    create: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput>
  }

  export type ElectronicSignatureCreateManyApplicationInputEnvelope = {
    data: ElectronicSignatureCreateManyApplicationInput | ElectronicSignatureCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type FundingSetupCreateWithoutApplicationInput = {
    id?: string
    method: string
    amount: number
    status?: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type FundingSetupUncheckedCreateWithoutApplicationInput = {
    id?: string
    method: string
    amount: number
    status?: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    processedAt?: Date | string | null
  }

  export type FundingSetupCreateOrConnectWithoutApplicationInput = {
    where: FundingSetupWhereUniqueInput
    create: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
  }

  export type UserCreateWithoutApplicationsInput = {
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicationsInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    isEmailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApplicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
  }

  export type AuditTrailEntryCreateWithoutApplicationInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryUncheckedCreateWithoutApplicationInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryCreateOrConnectWithoutApplicationInput = {
    where: AuditTrailEntryWhereUniqueInput
    create: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput>
  }

  export type AuditTrailEntryCreateManyApplicationInputEnvelope = {
    data: AuditTrailEntryCreateManyApplicationInput | AuditTrailEntryCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type PersonalInfoUpsertWithoutApplicationInput = {
    update: XOR<PersonalInfoUpdateWithoutApplicationInput, PersonalInfoUncheckedUpdateWithoutApplicationInput>
    create: XOR<PersonalInfoCreateWithoutApplicationInput, PersonalInfoUncheckedCreateWithoutApplicationInput>
    where?: PersonalInfoWhereInput
  }

  export type PersonalInfoUpdateToOneWithWhereWithoutApplicationInput = {
    where?: PersonalInfoWhereInput
    data: XOR<PersonalInfoUpdateWithoutApplicationInput, PersonalInfoUncheckedUpdateWithoutApplicationInput>
  }

  export type PersonalInfoUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalInfoUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    ssn?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mailingAddress?: JsonNullValueInput | InputJsonValue
    physicalAddress?: NullableJsonNullValueInput | InputJsonValue
    employmentStatus?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    employer?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessProfileUpsertWithoutApplicationInput = {
    update: XOR<BusinessProfileUpdateWithoutApplicationInput, BusinessProfileUncheckedUpdateWithoutApplicationInput>
    create: XOR<BusinessProfileCreateWithoutApplicationInput, BusinessProfileUncheckedCreateWithoutApplicationInput>
    where?: BusinessProfileWhereInput
  }

  export type BusinessProfileUpdateToOneWithWhereWithoutApplicationInput = {
    where?: BusinessProfileWhereInput
    data: XOR<BusinessProfileUpdateWithoutApplicationInput, BusinessProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type BusinessProfileUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
  }

  export type BusinessProfileUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    dbaName?: NullableStringFieldUpdateOperationsInput | string | null
    ein?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    industryType?: StringFieldUpdateOperationsInput | string
    dateEstablished?: StringFieldUpdateOperationsInput | string
    businessAddress?: JsonNullValueInput | InputJsonValue
    mailingAddress?: NullableJsonNullValueInput | InputJsonValue
    businessPhone?: StringFieldUpdateOperationsInput | string
    businessEmail?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    isCashIntensive?: BoolFieldUpdateOperationsInput | boolean
    monthlyTransactionVolume?: FloatFieldUpdateOperationsInput | number
    monthlyTransactionCount?: IntFieldUpdateOperationsInput | number
    expectedBalance?: FloatFieldUpdateOperationsInput | number
  }

  export type FinancialProfileUpsertWithoutApplicationInput = {
    update: XOR<FinancialProfileUpdateWithoutApplicationInput, FinancialProfileUncheckedUpdateWithoutApplicationInput>
    create: XOR<FinancialProfileCreateWithoutApplicationInput, FinancialProfileUncheckedCreateWithoutApplicationInput>
    where?: FinancialProfileWhereInput
  }

  export type FinancialProfileUpdateToOneWithWhereWithoutApplicationInput = {
    where?: FinancialProfileWhereInput
    data: XOR<FinancialProfileUpdateWithoutApplicationInput, FinancialProfileUncheckedUpdateWithoutApplicationInput>
  }

  export type FinancialProfileUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
  }

  export type FinancialProfileUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    annualIncome?: FloatFieldUpdateOperationsInput | number
    incomeSource?: FinancialProfileUpdateincomeSourceInput | string[]
    employmentInfo?: NullableJsonNullValueInput | InputJsonValue
    assets?: FloatFieldUpdateOperationsInput | number
    liabilities?: FloatFieldUpdateOperationsInput | number
    bankingRelationships?: FinancialProfileUpdatebankingRelationshipsInput | InputJsonValue[]
    accountActivities?: FinancialProfileUpdateaccountActivitiesInput | InputJsonValue[]
  }

  export type ProductSelectionUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ProductSelectionWhereUniqueInput
    update: XOR<ProductSelectionUpdateWithoutApplicationInput, ProductSelectionUncheckedUpdateWithoutApplicationInput>
    create: XOR<ProductSelectionCreateWithoutApplicationInput, ProductSelectionUncheckedCreateWithoutApplicationInput>
  }

  export type ProductSelectionUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ProductSelectionWhereUniqueInput
    data: XOR<ProductSelectionUpdateWithoutApplicationInput, ProductSelectionUncheckedUpdateWithoutApplicationInput>
  }

  export type ProductSelectionUpdateManyWithWhereWithoutApplicationInput = {
    where: ProductSelectionScalarWhereInput
    data: XOR<ProductSelectionUpdateManyMutationInput, ProductSelectionUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ProductSelectionScalarWhereInput = {
    AND?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
    OR?: ProductSelectionScalarWhereInput[]
    NOT?: ProductSelectionScalarWhereInput | ProductSelectionScalarWhereInput[]
    id?: StringFilter<"ProductSelection"> | string
    selectedFeatures?: StringNullableListFilter<"ProductSelection">
    initialDeposit?: FloatNullableFilter<"ProductSelection"> | number | null
    applicationId?: StringFilter<"ProductSelection"> | string
    productId?: StringFilter<"ProductSelection"> | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutApplicationInput, DocumentUncheckedUpdateWithoutApplicationInput>
    create: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutApplicationInput, DocumentUncheckedUpdateWithoutApplicationInput>
  }

  export type DocumentUpdateManyWithWhereWithoutApplicationInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutApplicationInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    type?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    mimeType?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    verificationStatus?: StringFilter<"Document"> | string
    verificationDetails?: JsonNullableFilter<"Document">
    applicationId?: StringFilter<"Document"> | string
    signerId?: StringNullableFilter<"Document"> | string | null
  }

  export type AdditionalSignerUpsertWithWhereUniqueWithoutApplicationInput = {
    where: AdditionalSignerWhereUniqueInput
    update: XOR<AdditionalSignerUpdateWithoutApplicationInput, AdditionalSignerUncheckedUpdateWithoutApplicationInput>
    create: XOR<AdditionalSignerCreateWithoutApplicationInput, AdditionalSignerUncheckedCreateWithoutApplicationInput>
  }

  export type AdditionalSignerUpdateWithWhereUniqueWithoutApplicationInput = {
    where: AdditionalSignerWhereUniqueInput
    data: XOR<AdditionalSignerUpdateWithoutApplicationInput, AdditionalSignerUncheckedUpdateWithoutApplicationInput>
  }

  export type AdditionalSignerUpdateManyWithWhereWithoutApplicationInput = {
    where: AdditionalSignerScalarWhereInput
    data: XOR<AdditionalSignerUpdateManyMutationInput, AdditionalSignerUncheckedUpdateManyWithoutApplicationInput>
  }

  export type AdditionalSignerScalarWhereInput = {
    AND?: AdditionalSignerScalarWhereInput | AdditionalSignerScalarWhereInput[]
    OR?: AdditionalSignerScalarWhereInput[]
    NOT?: AdditionalSignerScalarWhereInput | AdditionalSignerScalarWhereInput[]
    id?: StringFilter<"AdditionalSigner"> | string
    personalInfo?: JsonFilter<"AdditionalSigner">
    role?: StringFilter<"AdditionalSigner"> | string
    relationshipToBusiness?: StringNullableFilter<"AdditionalSigner"> | string | null
    beneficialOwnershipPercentage?: FloatNullableFilter<"AdditionalSigner"> | number | null
    hasSigningAuthority?: BoolFilter<"AdditionalSigner"> | boolean
    kycStatus?: StringFilter<"AdditionalSigner"> | string
    applicationId?: StringFilter<"AdditionalSigner"> | string
  }

  export type KYCVerificationUpsertWithoutApplicationInput = {
    update: XOR<KYCVerificationUpdateWithoutApplicationInput, KYCVerificationUncheckedUpdateWithoutApplicationInput>
    create: XOR<KYCVerificationCreateWithoutApplicationInput, KYCVerificationUncheckedCreateWithoutApplicationInput>
    where?: KYCVerificationWhereInput
  }

  export type KYCVerificationUpdateToOneWithWhereWithoutApplicationInput = {
    where?: KYCVerificationWhereInput
    data: XOR<KYCVerificationUpdateWithoutApplicationInput, KYCVerificationUncheckedUpdateWithoutApplicationInput>
  }

  export type KYCVerificationUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
  }

  export type KYCVerificationUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    verificationId?: StringFieldUpdateOperationsInput | string
    confidence?: FloatFieldUpdateOperationsInput | number
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    results?: JsonNullValueInput | InputJsonValue
  }

  export type RiskAssessmentUpsertWithoutApplicationInput = {
    update: XOR<RiskAssessmentUpdateWithoutApplicationInput, RiskAssessmentUncheckedUpdateWithoutApplicationInput>
    create: XOR<RiskAssessmentCreateWithoutApplicationInput, RiskAssessmentUncheckedCreateWithoutApplicationInput>
    where?: RiskAssessmentWhereInput
  }

  export type RiskAssessmentUpdateToOneWithWhereWithoutApplicationInput = {
    where?: RiskAssessmentWhereInput
    data: XOR<RiskAssessmentUpdateWithoutApplicationInput, RiskAssessmentUncheckedUpdateWithoutApplicationInput>
  }

  export type RiskAssessmentUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
  }

  export type RiskAssessmentUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRisk?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    factors?: RiskAssessmentUpdatefactorsInput | InputJsonValue[]
    recommendations?: RiskAssessmentUpdaterecommendationsInput | string[]
    requiresManualReview?: BoolFieldUpdateOperationsInput | boolean
    assessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementUpsertWithWhereUniqueWithoutApplicationInput = {
    where: AgreementWhereUniqueInput
    update: XOR<AgreementUpdateWithoutApplicationInput, AgreementUncheckedUpdateWithoutApplicationInput>
    create: XOR<AgreementCreateWithoutApplicationInput, AgreementUncheckedCreateWithoutApplicationInput>
  }

  export type AgreementUpdateWithWhereUniqueWithoutApplicationInput = {
    where: AgreementWhereUniqueInput
    data: XOR<AgreementUpdateWithoutApplicationInput, AgreementUncheckedUpdateWithoutApplicationInput>
  }

  export type AgreementUpdateManyWithWhereWithoutApplicationInput = {
    where: AgreementScalarWhereInput
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyWithoutApplicationInput>
  }

  export type AgreementScalarWhereInput = {
    AND?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
    OR?: AgreementScalarWhereInput[]
    NOT?: AgreementScalarWhereInput | AgreementScalarWhereInput[]
    id?: StringFilter<"Agreement"> | string
    acknowledged?: BoolFilter<"Agreement"> | boolean
    acknowledgedAt?: DateTimeNullableFilter<"Agreement"> | Date | string | null
    ipAddress?: StringFilter<"Agreement"> | string
    userAgent?: StringFilter<"Agreement"> | string
    applicationId?: StringFilter<"Agreement"> | string
    disclosureId?: StringFilter<"Agreement"> | string
  }

  export type ElectronicSignatureUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ElectronicSignatureWhereUniqueInput
    update: XOR<ElectronicSignatureUpdateWithoutApplicationInput, ElectronicSignatureUncheckedUpdateWithoutApplicationInput>
    create: XOR<ElectronicSignatureCreateWithoutApplicationInput, ElectronicSignatureUncheckedCreateWithoutApplicationInput>
  }

  export type ElectronicSignatureUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ElectronicSignatureWhereUniqueInput
    data: XOR<ElectronicSignatureUpdateWithoutApplicationInput, ElectronicSignatureUncheckedUpdateWithoutApplicationInput>
  }

  export type ElectronicSignatureUpdateManyWithWhereWithoutApplicationInput = {
    where: ElectronicSignatureScalarWhereInput
    data: XOR<ElectronicSignatureUpdateManyMutationInput, ElectronicSignatureUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ElectronicSignatureScalarWhereInput = {
    AND?: ElectronicSignatureScalarWhereInput | ElectronicSignatureScalarWhereInput[]
    OR?: ElectronicSignatureScalarWhereInput[]
    NOT?: ElectronicSignatureScalarWhereInput | ElectronicSignatureScalarWhereInput[]
    id?: StringFilter<"ElectronicSignature"> | string
    signerId?: StringFilter<"ElectronicSignature"> | string
    documentType?: StringFilter<"ElectronicSignature"> | string
    signatureData?: StringFilter<"ElectronicSignature"> | string
    signedAt?: DateTimeFilter<"ElectronicSignature"> | Date | string
    ipAddress?: StringFilter<"ElectronicSignature"> | string
    userAgent?: StringFilter<"ElectronicSignature"> | string
    biometric?: JsonNullableFilter<"ElectronicSignature">
    applicationId?: StringFilter<"ElectronicSignature"> | string
  }

  export type FundingSetupUpsertWithoutApplicationInput = {
    update: XOR<FundingSetupUpdateWithoutApplicationInput, FundingSetupUncheckedUpdateWithoutApplicationInput>
    create: XOR<FundingSetupCreateWithoutApplicationInput, FundingSetupUncheckedCreateWithoutApplicationInput>
    where?: FundingSetupWhereInput
  }

  export type FundingSetupUpdateToOneWithWhereWithoutApplicationInput = {
    where?: FundingSetupWhereInput
    data: XOR<FundingSetupUpdateWithoutApplicationInput, FundingSetupUncheckedUpdateWithoutApplicationInput>
  }

  export type FundingSetupUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FundingSetupUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutApplicationsInput = {
    update: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateWithoutApplicationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuditTrailEntryUpsertWithWhereUniqueWithoutApplicationInput = {
    where: AuditTrailEntryWhereUniqueInput
    update: XOR<AuditTrailEntryUpdateWithoutApplicationInput, AuditTrailEntryUncheckedUpdateWithoutApplicationInput>
    create: XOR<AuditTrailEntryCreateWithoutApplicationInput, AuditTrailEntryUncheckedCreateWithoutApplicationInput>
  }

  export type AuditTrailEntryUpdateWithWhereUniqueWithoutApplicationInput = {
    where: AuditTrailEntryWhereUniqueInput
    data: XOR<AuditTrailEntryUpdateWithoutApplicationInput, AuditTrailEntryUncheckedUpdateWithoutApplicationInput>
  }

  export type AuditTrailEntryUpdateManyWithWhereWithoutApplicationInput = {
    where: AuditTrailEntryScalarWhereInput
    data: XOR<AuditTrailEntryUpdateManyMutationInput, AuditTrailEntryUncheckedUpdateManyWithoutApplicationInput>
  }

  export type AuditTrailEntryScalarWhereInput = {
    AND?: AuditTrailEntryScalarWhereInput | AuditTrailEntryScalarWhereInput[]
    OR?: AuditTrailEntryScalarWhereInput[]
    NOT?: AuditTrailEntryScalarWhereInput | AuditTrailEntryScalarWhereInput[]
    id?: StringFilter<"AuditTrailEntry"> | string
    action?: StringFilter<"AuditTrailEntry"> | string
    description?: StringFilter<"AuditTrailEntry"> | string
    performedBy?: StringFilter<"AuditTrailEntry"> | string
    performedAt?: DateTimeFilter<"AuditTrailEntry"> | Date | string
    ipAddress?: StringFilter<"AuditTrailEntry"> | string
    userAgent?: StringFilter<"AuditTrailEntry"> | string
    changes?: JsonNullableFilter<"AuditTrailEntry">
    applicationId?: StringFilter<"AuditTrailEntry"> | string
  }

  export type ApplicationCreateWithoutPersonalInfoInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutPersonalInfoInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutPersonalInfoInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutPersonalInfoInput, ApplicationUncheckedCreateWithoutPersonalInfoInput>
  }

  export type ApplicationUpsertWithoutPersonalInfoInput = {
    update: XOR<ApplicationUpdateWithoutPersonalInfoInput, ApplicationUncheckedUpdateWithoutPersonalInfoInput>
    create: XOR<ApplicationCreateWithoutPersonalInfoInput, ApplicationUncheckedCreateWithoutPersonalInfoInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutPersonalInfoInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutPersonalInfoInput, ApplicationUncheckedUpdateWithoutPersonalInfoInput>
  }

  export type ApplicationUpdateWithoutPersonalInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutPersonalInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutBusinessProfileInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutBusinessProfileInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutBusinessProfileInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutBusinessProfileInput, ApplicationUncheckedCreateWithoutBusinessProfileInput>
  }

  export type ApplicationUpsertWithoutBusinessProfileInput = {
    update: XOR<ApplicationUpdateWithoutBusinessProfileInput, ApplicationUncheckedUpdateWithoutBusinessProfileInput>
    create: XOR<ApplicationCreateWithoutBusinessProfileInput, ApplicationUncheckedCreateWithoutBusinessProfileInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutBusinessProfileInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutBusinessProfileInput, ApplicationUncheckedUpdateWithoutBusinessProfileInput>
  }

  export type ApplicationUpdateWithoutBusinessProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutBusinessProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutFinancialProfileInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutFinancialProfileInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutFinancialProfileInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutFinancialProfileInput, ApplicationUncheckedCreateWithoutFinancialProfileInput>
  }

  export type ApplicationUpsertWithoutFinancialProfileInput = {
    update: XOR<ApplicationUpdateWithoutFinancialProfileInput, ApplicationUncheckedUpdateWithoutFinancialProfileInput>
    create: XOR<ApplicationCreateWithoutFinancialProfileInput, ApplicationUncheckedCreateWithoutFinancialProfileInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutFinancialProfileInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutFinancialProfileInput, ApplicationUncheckedUpdateWithoutFinancialProfileInput>
  }

  export type ApplicationUpdateWithoutFinancialProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutFinancialProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ProductSelectionCreateWithoutProductInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    application: ApplicationCreateNestedOneWithoutProductSelectionsInput
  }

  export type ProductSelectionUncheckedCreateWithoutProductInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    applicationId: string
  }

  export type ProductSelectionCreateOrConnectWithoutProductInput = {
    where: ProductSelectionWhereUniqueInput
    create: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput>
  }

  export type ProductSelectionCreateManyProductInputEnvelope = {
    data: ProductSelectionCreateManyProductInput | ProductSelectionCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductSelectionUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductSelectionWhereUniqueInput
    update: XOR<ProductSelectionUpdateWithoutProductInput, ProductSelectionUncheckedUpdateWithoutProductInput>
    create: XOR<ProductSelectionCreateWithoutProductInput, ProductSelectionUncheckedCreateWithoutProductInput>
  }

  export type ProductSelectionUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductSelectionWhereUniqueInput
    data: XOR<ProductSelectionUpdateWithoutProductInput, ProductSelectionUncheckedUpdateWithoutProductInput>
  }

  export type ProductSelectionUpdateManyWithWhereWithoutProductInput = {
    where: ProductSelectionScalarWhereInput
    data: XOR<ProductSelectionUpdateManyMutationInput, ProductSelectionUncheckedUpdateManyWithoutProductInput>
  }

  export type ApplicationCreateWithoutProductSelectionsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutProductSelectionsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutProductSelectionsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutProductSelectionsInput, ApplicationUncheckedCreateWithoutProductSelectionsInput>
  }

  export type ProductCreateWithoutProductSelectionsInput = {
    id?: string
    name: string
    type: string
    description: string
    features?: ProductCreatefeaturesInput | string[]
    minimumBalance: number
    monthlyFee: number
    interestRate?: number | null
    isActive?: boolean
    eligibilityRules?: ProductCreateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductUncheckedCreateWithoutProductSelectionsInput = {
    id?: string
    name: string
    type: string
    description: string
    features?: ProductCreatefeaturesInput | string[]
    minimumBalance: number
    monthlyFee: number
    interestRate?: number | null
    isActive?: boolean
    eligibilityRules?: ProductCreateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductCreateOrConnectWithoutProductSelectionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductSelectionsInput, ProductUncheckedCreateWithoutProductSelectionsInput>
  }

  export type ApplicationUpsertWithoutProductSelectionsInput = {
    update: XOR<ApplicationUpdateWithoutProductSelectionsInput, ApplicationUncheckedUpdateWithoutProductSelectionsInput>
    create: XOR<ApplicationCreateWithoutProductSelectionsInput, ApplicationUncheckedCreateWithoutProductSelectionsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutProductSelectionsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutProductSelectionsInput, ApplicationUncheckedUpdateWithoutProductSelectionsInput>
  }

  export type ApplicationUpdateWithoutProductSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutProductSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ProductUpsertWithoutProductSelectionsInput = {
    update: XOR<ProductUpdateWithoutProductSelectionsInput, ProductUncheckedUpdateWithoutProductSelectionsInput>
    create: XOR<ProductCreateWithoutProductSelectionsInput, ProductUncheckedCreateWithoutProductSelectionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductSelectionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductSelectionsInput, ProductUncheckedUpdateWithoutProductSelectionsInput>
  }

  export type ProductUpdateWithoutProductSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
  }

  export type ProductUncheckedUpdateWithoutProductSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: ProductUpdatefeaturesInput | string[]
    minimumBalance?: FloatFieldUpdateOperationsInput | number
    monthlyFee?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    eligibilityRules?: ProductUpdateeligibilityRulesInput | InputJsonValue[]
  }

  export type ApplicationCreateWithoutDocumentsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutDocumentsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutDocumentsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
  }

  export type AdditionalSignerCreateWithoutDocumentsInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    application: ApplicationCreateNestedOneWithoutAdditionalSignersInput
  }

  export type AdditionalSignerUncheckedCreateWithoutDocumentsInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
    applicationId: string
  }

  export type AdditionalSignerCreateOrConnectWithoutDocumentsInput = {
    where: AdditionalSignerWhereUniqueInput
    create: XOR<AdditionalSignerCreateWithoutDocumentsInput, AdditionalSignerUncheckedCreateWithoutDocumentsInput>
  }

  export type ApplicationUpsertWithoutDocumentsInput = {
    update: XOR<ApplicationUpdateWithoutDocumentsInput, ApplicationUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutDocumentsInput, ApplicationUncheckedUpdateWithoutDocumentsInput>
  }

  export type ApplicationUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type AdditionalSignerUpsertWithoutDocumentsInput = {
    update: XOR<AdditionalSignerUpdateWithoutDocumentsInput, AdditionalSignerUncheckedUpdateWithoutDocumentsInput>
    create: XOR<AdditionalSignerCreateWithoutDocumentsInput, AdditionalSignerUncheckedCreateWithoutDocumentsInput>
    where?: AdditionalSignerWhereInput
  }

  export type AdditionalSignerUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: AdditionalSignerWhereInput
    data: XOR<AdditionalSignerUpdateWithoutDocumentsInput, AdditionalSignerUncheckedUpdateWithoutDocumentsInput>
  }

  export type AdditionalSignerUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutAdditionalSignersNestedInput
  }

  export type AdditionalSignerUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationCreateWithoutKycVerificationInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutKycVerificationInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutKycVerificationInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutKycVerificationInput, ApplicationUncheckedCreateWithoutKycVerificationInput>
  }

  export type ApplicationUpsertWithoutKycVerificationInput = {
    update: XOR<ApplicationUpdateWithoutKycVerificationInput, ApplicationUncheckedUpdateWithoutKycVerificationInput>
    create: XOR<ApplicationCreateWithoutKycVerificationInput, ApplicationUncheckedCreateWithoutKycVerificationInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutKycVerificationInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutKycVerificationInput, ApplicationUncheckedUpdateWithoutKycVerificationInput>
  }

  export type ApplicationUpdateWithoutKycVerificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutKycVerificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type DocumentCreateWithoutSignerInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    application: ApplicationCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutSignerInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type DocumentCreateOrConnectWithoutSignerInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput>
  }

  export type DocumentCreateManySignerInputEnvelope = {
    data: DocumentCreateManySignerInput | DocumentCreateManySignerInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutAdditionalSignersInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutAdditionalSignersInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutAdditionalSignersInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutAdditionalSignersInput, ApplicationUncheckedCreateWithoutAdditionalSignersInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutSignerInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutSignerInput, DocumentUncheckedUpdateWithoutSignerInput>
    create: XOR<DocumentCreateWithoutSignerInput, DocumentUncheckedCreateWithoutSignerInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutSignerInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutSignerInput, DocumentUncheckedUpdateWithoutSignerInput>
  }

  export type DocumentUpdateManyWithWhereWithoutSignerInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutSignerInput>
  }

  export type ApplicationUpsertWithoutAdditionalSignersInput = {
    update: XOR<ApplicationUpdateWithoutAdditionalSignersInput, ApplicationUncheckedUpdateWithoutAdditionalSignersInput>
    create: XOR<ApplicationCreateWithoutAdditionalSignersInput, ApplicationUncheckedCreateWithoutAdditionalSignersInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutAdditionalSignersInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutAdditionalSignersInput, ApplicationUncheckedUpdateWithoutAdditionalSignersInput>
  }

  export type ApplicationUpdateWithoutAdditionalSignersInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutAdditionalSignersInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutRiskAssessmentInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutRiskAssessmentInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutRiskAssessmentInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutRiskAssessmentInput, ApplicationUncheckedCreateWithoutRiskAssessmentInput>
  }

  export type ApplicationUpsertWithoutRiskAssessmentInput = {
    update: XOR<ApplicationUpdateWithoutRiskAssessmentInput, ApplicationUncheckedUpdateWithoutRiskAssessmentInput>
    create: XOR<ApplicationCreateWithoutRiskAssessmentInput, ApplicationUncheckedCreateWithoutRiskAssessmentInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutRiskAssessmentInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutRiskAssessmentInput, ApplicationUncheckedUpdateWithoutRiskAssessmentInput>
  }

  export type ApplicationUpdateWithoutRiskAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutRiskAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type AgreementCreateWithoutDisclosureInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    application: ApplicationCreateNestedOneWithoutAgreementsInput
  }

  export type AgreementUncheckedCreateWithoutDisclosureInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    applicationId: string
  }

  export type AgreementCreateOrConnectWithoutDisclosureInput = {
    where: AgreementWhereUniqueInput
    create: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput>
  }

  export type AgreementCreateManyDisclosureInputEnvelope = {
    data: AgreementCreateManyDisclosureInput | AgreementCreateManyDisclosureInput[]
    skipDuplicates?: boolean
  }

  export type AgreementUpsertWithWhereUniqueWithoutDisclosureInput = {
    where: AgreementWhereUniqueInput
    update: XOR<AgreementUpdateWithoutDisclosureInput, AgreementUncheckedUpdateWithoutDisclosureInput>
    create: XOR<AgreementCreateWithoutDisclosureInput, AgreementUncheckedCreateWithoutDisclosureInput>
  }

  export type AgreementUpdateWithWhereUniqueWithoutDisclosureInput = {
    where: AgreementWhereUniqueInput
    data: XOR<AgreementUpdateWithoutDisclosureInput, AgreementUncheckedUpdateWithoutDisclosureInput>
  }

  export type AgreementUpdateManyWithWhereWithoutDisclosureInput = {
    where: AgreementScalarWhereInput
    data: XOR<AgreementUpdateManyMutationInput, AgreementUncheckedUpdateManyWithoutDisclosureInput>
  }

  export type ApplicationCreateWithoutAgreementsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutAgreementsInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutAgreementsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutAgreementsInput, ApplicationUncheckedCreateWithoutAgreementsInput>
  }

  export type DisclosureCreateWithoutAgreementsInput = {
    id?: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required?: boolean
    applicableFor?: DisclosureCreateapplicableForInput | string[]
  }

  export type DisclosureUncheckedCreateWithoutAgreementsInput = {
    id?: string
    type: string
    title: string
    content: string
    version: string
    effectiveDate: string
    required?: boolean
    applicableFor?: DisclosureCreateapplicableForInput | string[]
  }

  export type DisclosureCreateOrConnectWithoutAgreementsInput = {
    where: DisclosureWhereUniqueInput
    create: XOR<DisclosureCreateWithoutAgreementsInput, DisclosureUncheckedCreateWithoutAgreementsInput>
  }

  export type ApplicationUpsertWithoutAgreementsInput = {
    update: XOR<ApplicationUpdateWithoutAgreementsInput, ApplicationUncheckedUpdateWithoutAgreementsInput>
    create: XOR<ApplicationCreateWithoutAgreementsInput, ApplicationUncheckedCreateWithoutAgreementsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutAgreementsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutAgreementsInput, ApplicationUncheckedUpdateWithoutAgreementsInput>
  }

  export type ApplicationUpdateWithoutAgreementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutAgreementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type DisclosureUpsertWithoutAgreementsInput = {
    update: XOR<DisclosureUpdateWithoutAgreementsInput, DisclosureUncheckedUpdateWithoutAgreementsInput>
    create: XOR<DisclosureCreateWithoutAgreementsInput, DisclosureUncheckedCreateWithoutAgreementsInput>
    where?: DisclosureWhereInput
  }

  export type DisclosureUpdateToOneWithWhereWithoutAgreementsInput = {
    where?: DisclosureWhereInput
    data: XOR<DisclosureUpdateWithoutAgreementsInput, DisclosureUncheckedUpdateWithoutAgreementsInput>
  }

  export type DisclosureUpdateWithoutAgreementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
  }

  export type DisclosureUncheckedUpdateWithoutAgreementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    effectiveDate?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    applicableFor?: DisclosureUpdateapplicableForInput | string[]
  }

  export type ApplicationCreateWithoutSignaturesInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutSignaturesInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutSignaturesInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutSignaturesInput, ApplicationUncheckedCreateWithoutSignaturesInput>
  }

  export type ApplicationUpsertWithoutSignaturesInput = {
    update: XOR<ApplicationUpdateWithoutSignaturesInput, ApplicationUncheckedUpdateWithoutSignaturesInput>
    create: XOR<ApplicationCreateWithoutSignaturesInput, ApplicationUncheckedCreateWithoutSignaturesInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutSignaturesInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutSignaturesInput, ApplicationUncheckedUpdateWithoutSignaturesInput>
  }

  export type ApplicationUpdateWithoutSignaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutSignaturesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutFundingSetupInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
    auditTrail?: AuditTrailEntryCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutFundingSetupInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    auditTrail?: AuditTrailEntryUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutFundingSetupInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutFundingSetupInput, ApplicationUncheckedCreateWithoutFundingSetupInput>
  }

  export type ApplicationUpsertWithoutFundingSetupInput = {
    update: XOR<ApplicationUpdateWithoutFundingSetupInput, ApplicationUncheckedUpdateWithoutFundingSetupInput>
    create: XOR<ApplicationCreateWithoutFundingSetupInput, ApplicationUncheckedCreateWithoutFundingSetupInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutFundingSetupInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutFundingSetupInput, ApplicationUncheckedUpdateWithoutFundingSetupInput>
  }

  export type ApplicationUpdateWithoutFundingSetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutFundingSetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutAuditTrailInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentCreateNestedOneWithoutApplicationInput
    agreements?: AgreementCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupCreateNestedOneWithoutApplicationInput
    user: UserCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutAuditTrailInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
    userId: number
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutApplicationInput
    businessProfile?: BusinessProfileUncheckedCreateNestedOneWithoutApplicationInput
    financialProfile?: FinancialProfileUncheckedCreateNestedOneWithoutApplicationInput
    productSelections?: ProductSelectionUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    additionalSigners?: AdditionalSignerUncheckedCreateNestedManyWithoutApplicationInput
    kycVerification?: KYCVerificationUncheckedCreateNestedOneWithoutApplicationInput
    riskAssessment?: RiskAssessmentUncheckedCreateNestedOneWithoutApplicationInput
    agreements?: AgreementUncheckedCreateNestedManyWithoutApplicationInput
    signatures?: ElectronicSignatureUncheckedCreateNestedManyWithoutApplicationInput
    fundingSetup?: FundingSetupUncheckedCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutAuditTrailInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutAuditTrailInput, ApplicationUncheckedCreateWithoutAuditTrailInput>
  }

  export type ApplicationUpsertWithoutAuditTrailInput = {
    update: XOR<ApplicationUpdateWithoutAuditTrailInput, ApplicationUncheckedUpdateWithoutAuditTrailInput>
    create: XOR<ApplicationCreateWithoutAuditTrailInput, ApplicationUncheckedCreateWithoutAuditTrailInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutAuditTrailInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutAuditTrailInput, ApplicationUncheckedUpdateWithoutAuditTrailInput>
  }

  export type ApplicationUpdateWithoutAuditTrailInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutAuditTrailInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
  }

  export type TokenCreateManyUserInput = {
    id?: number
    token: string
    type: $Enums.TokenType
    expires: Date | string
    blacklisted: boolean
    createdAt?: Date | string
  }

  export type ApplicationCreateManyUserInput = {
    id?: string
    status?: string
    currentStep?: string
    accountType: string
    customerType?: string
    applicantId: string
    submittedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata: JsonNullValueInput | InputJsonValue
  }

  export type TokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutApplicationNestedInput
    businessProfile?: BusinessProfileUncheckedUpdateOneWithoutApplicationNestedInput
    financialProfile?: FinancialProfileUncheckedUpdateOneWithoutApplicationNestedInput
    productSelections?: ProductSelectionUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    additionalSigners?: AdditionalSignerUncheckedUpdateManyWithoutApplicationNestedInput
    kycVerification?: KYCVerificationUncheckedUpdateOneWithoutApplicationNestedInput
    riskAssessment?: RiskAssessmentUncheckedUpdateOneWithoutApplicationNestedInput
    agreements?: AgreementUncheckedUpdateManyWithoutApplicationNestedInput
    signatures?: ElectronicSignatureUncheckedUpdateManyWithoutApplicationNestedInput
    fundingSetup?: FundingSetupUncheckedUpdateOneWithoutApplicationNestedInput
    auditTrail?: AuditTrailEntryUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentStep?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    customerType?: StringFieldUpdateOperationsInput | string
    applicantId?: StringFieldUpdateOperationsInput | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: JsonNullValueInput | InputJsonValue
  }

  export type ProductSelectionCreateManyApplicationInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    productId: string
  }

  export type DocumentCreateManyApplicationInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signerId?: string | null
  }

  export type AdditionalSignerCreateManyApplicationInput = {
    id?: string
    personalInfo: JsonNullValueInput | InputJsonValue
    role: string
    relationshipToBusiness?: string | null
    beneficialOwnershipPercentage?: number | null
    hasSigningAuthority: boolean
    kycStatus?: string
  }

  export type AgreementCreateManyApplicationInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    disclosureId: string
  }

  export type ElectronicSignatureCreateManyApplicationInput = {
    id?: string
    signerId: string
    documentType: string
    signatureData: string
    signedAt?: Date | string
    ipAddress: string
    userAgent: string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryCreateManyApplicationInput = {
    id?: string
    action: string
    description: string
    performedBy: string
    performedAt?: Date | string
    ipAddress: string
    userAgent: string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProductSelectionUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneRequiredWithoutProductSelectionsNestedInput
  }

  export type ProductSelectionUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSelectionUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signer?: AdditionalSignerUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    signerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdditionalSignerUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutSignerNestedInput
  }

  export type AdditionalSignerUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutSignerNestedInput
  }

  export type AdditionalSignerUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    personalInfo?: JsonNullValueInput | InputJsonValue
    role?: StringFieldUpdateOperationsInput | string
    relationshipToBusiness?: NullableStringFieldUpdateOperationsInput | string | null
    beneficialOwnershipPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    hasSigningAuthority?: BoolFieldUpdateOperationsInput | boolean
    kycStatus?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    disclosure?: DisclosureUpdateOneRequiredWithoutAgreementsNestedInput
  }

  export type AgreementUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    disclosureId?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    disclosureId?: StringFieldUpdateOperationsInput | string
  }

  export type ElectronicSignatureUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ElectronicSignatureUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ElectronicSignatureUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    signerId?: StringFieldUpdateOperationsInput | string
    documentType?: StringFieldUpdateOperationsInput | string
    signatureData?: StringFieldUpdateOperationsInput | string
    signedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    biometric?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditTrailEntryUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    performedBy?: StringFieldUpdateOperationsInput | string
    performedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    changes?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProductSelectionCreateManyProductInput = {
    id?: string
    selectedFeatures?: ProductSelectionCreateselectedFeaturesInput | string[]
    initialDeposit?: number | null
    applicationId: string
  }

  export type ProductSelectionUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    application?: ApplicationUpdateOneRequiredWithoutProductSelectionsNestedInput
  }

  export type ProductSelectionUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSelectionUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedFeatures?: ProductSelectionUpdateselectedFeaturesInput | string[]
    initialDeposit?: NullableFloatFieldUpdateOperationsInput | number | null
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManySignerInput = {
    id?: string
    type: string
    fileName: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    verificationStatus?: string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId: string
  }

  export type DocumentUpdateWithoutSignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    application?: ApplicationUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutSignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyWithoutSignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    verificationStatus?: StringFieldUpdateOperationsInput | string
    verificationDetails?: NullableJsonNullValueInput | InputJsonValue
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementCreateManyDisclosureInput = {
    id?: string
    acknowledged?: boolean
    acknowledgedAt?: Date | string | null
    ipAddress: string
    userAgent: string
    applicationId: string
  }

  export type AgreementUpdateWithoutDisclosureInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutAgreementsNestedInput
  }

  export type AgreementUncheckedUpdateWithoutDisclosureInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }

  export type AgreementUncheckedUpdateManyWithoutDisclosureInput = {
    id?: StringFieldUpdateOperationsInput | string
    acknowledged?: BoolFieldUpdateOperationsInput | boolean
    acknowledgedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}