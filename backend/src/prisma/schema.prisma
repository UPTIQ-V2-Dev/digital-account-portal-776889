// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  name                  String?
  password              String
  role                  Role                   @default(USER)
  isEmailVerified       Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  tokens                Token[]
  applications          Application[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Application {
  id                    String                 @id @default(cuid())
  status                String                 @default("draft")
  currentStep           String                 @default("account_type")
  accountType           String
  customerType          String                 @default("new")
  applicantId           String
  submittedAt           DateTime?
  completedAt           DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  personalInfo          PersonalInfo?
  businessProfile       BusinessProfile?
  financialProfile      FinancialProfile?
  productSelections     ProductSelection[]
  documents             Document[]
  additionalSigners     AdditionalSigner[]
  kycVerification       KYCVerification?
  riskAssessment        RiskAssessment?
  agreements            Agreement[]
  signatures            ElectronicSignature[]
  fundingSetup          FundingSetup?
  metadata              Json
  user                  User                   @relation(fields: [userId], references: [id])
  userId                Int
  auditTrail            AuditTrailEntry[]
}

model PersonalInfo {
  id                    String                 @id @default(cuid())
  firstName             String
  middleName            String?
  lastName              String
  suffix                String?
  dateOfBirth           String
  ssn                   String
  phone                 String
  email                 String
  mailingAddress        Json
  physicalAddress       Json?
  employmentStatus      String
  occupation            String?
  employer              String?
  workPhone             String?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String                 @unique
}

model BusinessProfile {
  id                           String                 @id @default(cuid())
  businessName                 String
  dbaName                      String?
  ein                          String
  entityType                   String
  industryType                 String
  dateEstablished              String
  businessAddress              Json
  mailingAddress               Json?
  businessPhone                String
  businessEmail                String
  website                      String?
  description                  String
  isCashIntensive              Boolean                @default(false)
  monthlyTransactionVolume     Float
  monthlyTransactionCount      Int
  expectedBalance              Float
  application                  Application            @relation(fields: [applicationId], references: [id])
  applicationId                String                 @unique
}

model FinancialProfile {
  id                    String                 @id @default(cuid())
  annualIncome          Float
  incomeSource          String[]
  employmentInfo        Json?
  assets                Float
  liabilities           Float
  bankingRelationships  Json[]
  accountActivities     Json[]
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String                 @unique
}

model Product {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  type                  String
  description           String
  features              String[]
  minimumBalance        Float
  monthlyFee            Float
  interestRate          Float?
  isActive              Boolean                @default(true)
  eligibilityRules      Json[]
  productSelections     ProductSelection[]
}

model ProductSelection {
  id                    String                 @id @default(cuid())
  selectedFeatures      String[]
  initialDeposit        Float?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String
  product               Product                @relation(fields: [productId], references: [id])
  productId             String
}

model Document {
  id                    String                 @id @default(cuid())
  type                  String
  fileName              String
  fileSize              Int
  mimeType              String
  uploadedAt            DateTime               @default(now())
  verificationStatus    String                 @default("pending")
  verificationDetails   Json?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String
  signer                AdditionalSigner?      @relation(fields: [signerId], references: [id])
  signerId              String?
}

model KYCVerification {
  id                    String                 @id @default(cuid())
  status                String                 @default("pending")
  provider              String
  verificationId        String
  confidence            Float
  verifiedAt            DateTime?
  results               Json
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String                 @unique
}

model AdditionalSigner {
  id                           String                 @id @default(cuid())
  personalInfo                 Json
  role                         String
  relationshipToBusiness       String?
  beneficialOwnershipPercentage Float?
  hasSigningAuthority          Boolean
  kycStatus                    String                 @default("pending")
  documents                    Document[]
  application                  Application            @relation(fields: [applicationId], references: [id])
  applicationId                String
}

model RiskAssessment {
  id                    String                 @id @default(cuid())
  overallRisk           String
  riskScore             Int
  factors               Json[]
  recommendations       String[]
  requiresManualReview  Boolean                @default(false)
  assessedAt            DateTime               @default(now())
  assessedBy            String
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String                 @unique
}

model Disclosure {
  id                    String                 @id @default(cuid())
  type                  String
  title                 String
  content               String
  version               String
  effectiveDate         String
  required              Boolean                @default(false)
  applicableFor         String[]
  agreements            Agreement[]
}

model Agreement {
  id                    String                 @id @default(cuid())
  acknowledged          Boolean                @default(false)
  acknowledgedAt        DateTime?
  ipAddress             String
  userAgent             String
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String
  disclosure            Disclosure             @relation(fields: [disclosureId], references: [id])
  disclosureId          String
}

model ElectronicSignature {
  id                    String                 @id @default(cuid())
  signerId              String
  documentType          String
  signatureData         String
  signedAt              DateTime               @default(now())
  ipAddress             String
  userAgent             String
  biometric             Json?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String
}

model FundingSetup {
  id                    String                 @id @default(cuid())
  method                String
  amount                Float
  status                String                 @default("pending")
  details               Json
  createdAt             DateTime               @default(now())
  processedAt           DateTime?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String                 @unique
}

model AuditTrailEntry {
  id                    String                 @id @default(cuid())
  action                String
  description           String
  performedBy           String
  performedAt           DateTime               @default(now())
  ipAddress             String
  userAgent             String
  changes               Json?
  application           Application            @relation(fields: [applicationId], references: [id])
  applicationId         String
}
